using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing.Text;
using System.IO;
using System.Drawing;
using System.Drawing.Imaging;
using System.Windows.Forms;
using System.Threading;
using System.Reflection;
using System.ComponentModel;
using Model;

public partial class MainForm : Form, ISubscriber
{
    #region Interfaces
    ///////////////////////////////////////////////////////////////////////////////
    // ISubscriber method
    public void Notify(Subject subject, FileSystemEventArgs e)
    {
        try
        {
            if (m_subscriber_delegate == null)
            {
                m_subscriber_delegate = new SubscriberDelegate(SubscriberDelegateMethod);
            }

            if (this.InvokeRequired)
            {
                this.BeginInvoke(m_subscriber_delegate, new object[] { subject, e });
            }
            else
            {
                m_subscriber_delegate(subject, e);
            }
        }
        catch
        {
            // handle exception if desired... }
        }
    }
    private SubscriberDelegate m_subscriber_delegate = null;
    private delegate void SubscriberDelegate(Subject subject, FileSystemEventArgs e);
    private void SubscriberDelegateMethod(Subject subject, FileSystemEventArgs e)
    {
        switch (subject)
        {
            case Subject.SimplificationSystem:
                {
                    TextModeComboBox_SelectedIndexChanged(null, null);
                }
                break;
            case Subject.NumerologySystem:
                {
                    NumerologySystemComboBox_SelectedIndexChanged(null, null);
                }
                break;
            case Subject.DNASequenceSystem:
                {
                    DNASequenceSystemComboBox_SelectedIndexChanged(null, null);
                }
                break;
            case Subject.InterestingNumbers:
                {
                    MathsDivisorNumericUpDown_ValueChanged(null, null);
                    DistancesDivisorNumericUpDown_ValueChanged(null, null);
                }
                break;
            default:
                break;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Framework
    ///////////////////////////////////////////////////////////////////////////////
    // TextBox has no Ctrl+A by default, so add it
    private void FixMicrosoft(object sender, KeyPressEventArgs e)
    {
        // stop annoying beep due to parent not having an AcceptButton
        if ((e.KeyChar == (char)Keys.Enter) || (e.KeyChar == (char)Keys.Escape))
        {
            e.Handled = true;
        }
        // enable Ctrl+A to SelectAll
        if ((ModifierKeys == Keys.Control) && (e.KeyChar == (char)1))
        {
            TextBoxBase control = (sender as TextBoxBase);
            if (control != null)
            {
                control.SelectAll();
                e.Handled = true;
            }
        }
    }
    private void TextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (sender is TextBoxBase)
        {
            TextBoxBase control = (sender as TextBoxBase);
            if (control != null)
            {
                if (e.KeyCode == Keys.Tab)
                {
                    control.Text.Insert(control.SelectionStart, "\t");
                    //e.Handled = true;
                }
                else
                {
                    if (ModifierKeys == Keys.Control)
                    {
                        if (e.KeyCode == Keys.A)
                        {
                            control.SelectAll();
                        }
                        else if (e.KeyCode == Keys.F)
                        {
                            // Find dialog
                        }
                        else if (e.KeyCode == Keys.H)
                        {
                            // Replace dialog
                        }
                        else if (e.KeyCode == Keys.S)
                        {
                            // Save As dialog
                        }
                    }
                }
            }
        }
    }
    private void DownloadFile(string uri, string path)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            Downloader.Download(uri, path, 30000);
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private FontConverter font_converter = new FontConverter();
    private ColorConverter color_converter = new ColorConverter();
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Constants
    ///////////////////////////////////////////////////////////////////////////////
    private static int c = 140;
    private static Color[] CHAPTER_INITIALIZATION_COLORS =
    { 
        /* InitializationType.Key */                  Color.Black,
        /* InitializationType.PartiallyInitialized */ Color.FromArgb(c+32, c+0, 0),
        /* InitializationType.FullyInitialized */     Color.FromArgb(c+64, c+32, 0),
        /* InitializationType.DoublyInitialized */    Color.FromArgb(c+96, c+64, 0),
        /* InitializationType.NonInitialized */       Color.FromArgb(64, 64, 64),
    };

    private const int DEFAULT_WINDOW_WIDTH = 1290;
    private const int DEFAULT_WINDOW_HEIGHT = 753;
    private const int DEFAULT_INFORMATION_BOX_TOP = 456;
    private const int DEFAULT_AUDIO_VOLUME = 1000;
    private const string VERSE_ADDRESS_TRANSLATION_SEPARATOR = " ";
    private const string VERSE_ADDRESS_MAIN_SEPARATOR = "\t";
    private const string SUM_SYMBOL = "Ʃ";
    private const string SPACE_GAP = "     ";
    private const int MAX_SELECTON_SCOPE_LENGTH = 16;
    private const string CAPTION_SEPARATOR = " ► ";
    private const string DEFAULT_QURAN_FONT_NAME = "me_quran";
    private const float DEFAULT_QURAN_FONT_SIZE = 14.0F;
    private const int DEFAULT_TRANSLATION_BOX_WIDTH = 409;
    private const string DEFAULT_TRANSALTION_FONT_NAME = "Microsoft Sans Serif";
    private const float DEFAULT_TRANSALTION_FONT_SIZE = 11.0F;
    private static Color DEFAULT_TRANSALTION_FONT_COLOR = Color.Navy;
    private const float DEFAULT_TEXT_ZOOM_FACTOR = 1.0F;
    private const float DEFAULT_GRAPHICS_ZOOM_FACTOR = 1.0F;
    private const int SELECTON_SCOPE_TEXT_MAX_LENGTH = 32;  // for longer text, use elipses (...)
    private const int DEFAULT_RADIX = 10;                   // base for current number system. Decimal by default.
    private const int RADIX_NINTEEN = 19;                   // base for current number system. 19 for OverItNineteen.
    private const int DEFAULT_DIVISOR = 19;                 // 19 for OverItNineteen.
    private const int MIN_DIVISOR = 2;                      // minimum divisor
    private const int MAX_DIVISOR = 9999;                   // maximum divisor
    private static Color DIVISOR_COLOR = Color.FromArgb(204, 255, 204); // background color if number is divisible by DEFAULT_DIVISOR or DISTANCES_DIVISOR.
    private static Color INTERESTING_NUMBER_COLOR = Color.Yellow; // background color if number is InterestingNumber, InterestingRatio.
    private const float DEFAULT_DPI_X = 96.0F;              // 100% = 96.0F,   125% = 120.0F,   150% = 144.0F
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region MainForm
    ///////////////////////////////////////////////////////////////////////////////
    private float m_dpi_x = DEFAULT_DPI_X;
    private string m_ini_filename = null;
    private Client m_client = null;
    private string m_current_text = null;
    public MainForm()
    {
        InitializeComponent();
        this.SetStyle(ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint | ControlStyles.DoubleBuffer, true);

        InstallFonts();
        AboutToolStripMenuItem.Font = new Font(AboutToolStripMenuItem.Font, AboutToolStripMenuItem.Font.Style | FontStyle.Bold);

        using (Graphics graphics = this.CreateGraphics())
        {
            m_dpi_x = graphics.DpiX;
            //if (m_dpi_x == 120.0F)
            //{
            //    // adjust GUI to fit into 125%
            //    MainSplitContainer.Height = (int)(MainSplitContainer.Height / (m_dpi_x / DEFAULT_DPI_X)) + 96;
            //    MainSplitContainer.SplitterDistance = 215;
            //}
        }

        FindByTextButton.Enabled = true;
        FindBySimilarityButton.Enabled = false;
        FindByNumbersButton.Enabled = false;
        FindByFrequencyButton.Enabled = false;

        m_ini_filename = AppDomain.CurrentDomain.FriendlyName.Replace(".exe", ".ini");

        // must initialize here as it is null
        m_active_textbox = MainTextBox;

        this.MainTextBox.HideSelection = false; // this won't shift the text to the left
        //this.MainTextBox.HideSelection = true; // this WILL shift the text to the left
        this.SearchResultTextBox.HideSelection = false; // this won't shift the text to the left
        //this.SearchResultTextBox.HideSelection = true; // this WILL shift the text to the left

        this.MainTextBox.MouseWheel += new MouseEventHandler(MainTextBox_MouseWheel);
        this.SearchResultTextBox.MouseWheel += new MouseEventHandler(MainTextBox_MouseWheel);

        this.BrowseGroupBox.Click += new EventHandler(BrowseGroupBox_Click);
        this.StatisticsGroupBox.Click += new EventHandler(StatisticsGroupBox_Click);

        //this.PictureBox.Cursor = Cursors.Cross;
    }
    private void MainForm_Load(object sender, EventArgs e)
    {
        bool splash_screen_done = false;
        try
        {
            SplashForm splash_form = new SplashForm();
            if (splash_form != null)
            {
                ThreadPool.QueueUserWorkItem(delegate
                {
                    using (splash_form)
                    {
                        splash_form.Show();
                        while (!splash_screen_done)
                        {
                            Application.DoEvents();
                        }
                        splash_form.Close();
                    }
                }, null);

                splash_form.Version += " - " + Globals.SHORT_VERSION;

                InitializeControls();
                if ((Globals.EDITION == Edition.Grammar) || (Globals.EDITION == Edition.Ultimate))
                {
                    splash_form.Information = "Loading grammar information ...";
                }
                else
                {
                    splash_form.Information = "Initializing Server ...";
                }
                splash_form.Progress = 10;
                Thread.Sleep(100);

                string numerology_system_name = LoadNumerologySystemName();
                m_client = new Client(numerology_system_name);
                if (m_client != null)
                {
                    m_client.Subscribe(this, Subject.SimplificationSystem);
                    m_client.Subscribe(this, Subject.NumerologySystem);
                    m_client.Subscribe(this, Subject.DNASequenceSystem);
                    m_client.Subscribe(this, Subject.InterestingNumbers);

                    if (m_client.NumerologySystem != null)
                    {
                        LoadApplicationFolders();

                        splash_form.Information = "Loading research methods ...";
                        LoadResearchMethods();
                        splash_form.Progress = 20;
                        Thread.Sleep(100);

                        LoadTextModeSettings();
                        splash_form.Information = "Building book ...";
                        string text_mode = m_client.NumerologySystem.TextMode;
                        m_client.BuildSimplifiedBook(text_mode, m_with_bism_Allah, m_waw_as_word, m_shadda_as_letter);
                        EnableFindByTextControls();
                        splash_form.Progress = 40;
                        Thread.Sleep(100);

                        if (m_client.Book != null)
                        {
                            UpdateNumericMinMax();

                            splash_form.Information = "Loading translation info ...";
                            PopulateTranslatorsCheckedListBox();
                            PopulateTranslatorComboBox();
                            PopulateTranslatorsComboBox();
                            splash_form.Progress = 50;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading tafseer info ...";
                            PopulateTafseerComboBox();
                            splash_form.Progress = 55;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading recitation info ...";
                            PopulateRecitationsCheckedListBox();
                            PopulateReciterComboBox();
                            splash_form.Progress = 60;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading chapter names ...";
                            PopulateChapterComboBox();
                            PopulateChaptersListBox();
                            PopulateChapterSelectionComboBox();
                            splash_form.Progress = 63;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading sequence systems ...";
                            PopulateSymmetryTypeComboBox();
                            PopulateCVWLSequenceTypeComboBox();
                            PopulateValuesSequenceScopeComboBox();
                            PopulateDNASequenceSystemComboBox();
                            splash_form.Progress = 65;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading user settings ...";
                            LoadApplicationSettings();
                            UpdateNumerologySystemControls();
                            splash_form.Progress = 70;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading numerology systems ...";
                            PopulateTextModeComboBox();
                            splash_form.Information = "Updating numerology systems ...";
                            UpdateNumerologySystemComboBoxs();
                            splash_form.Progress = 80;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading bookmarks and notes ...";
                            m_client.LoadBookmarks();
                            UpdateBookmarkButtons();
                            splash_form.Progress = 90;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading search history ...";
                            m_client.LoadHistoryItems();
                            UpdateSelectionHistoryButtons();
                            splash_form.Progress = 95;
                            Thread.Sleep(100);

                            splash_form.Information = "Loading help messages ...";
                            if (m_client.HelpMessages != null)
                            {
                                if (m_client.HelpMessages.Count > 0)
                                {
                                    HelpMessageLabel.Text = m_client.HelpMessages[0];
                                }
                            }
                            splash_form.Progress = 98;
                            Thread.Sleep(100);

                            if (ReciterComboBox.SelectedItem != null)
                            {
                                RecitationGroupBox.Text = ReciterComboBox.SelectedItem.ToString() + "                                 ";
                            }
                            ToolTip.SetToolTip(PlayerVolumeTrackBar, "Volume " + (m_audio_volume / (1000 / PlayerVolumeTrackBar.Maximum)).ToString() + "%");

                            PopulateChapterSortComboBox();

                            // prepare before Shown
                            this.ClientSplitContainer.SplitterDistance = m_information_box_top;
                            this.TabControl.SelectedIndex = m_information_page_index;
                            this.TranslationSplitContainer.SplitterDistance = m_translation_box_width;
                            SymmetryIncludeBoundaryCasesCheckBox.Checked = m_symmetry_include_boundary_cases;

                            // must be before DisplaySelection for Verse.IncludeNumber to take effect
                            ApplyWordWrapSettings();

                            m_player_looping = !m_player_looping;
                            PlayerRepeatLabel_Click(null, null);
                            m_player_looping_all = !m_player_looping_all;
                            PlayerRepeatAllLabel_Click(null, null);

                            UpdateTextModeOptions();

                            if (Globals.EDITION == Edition.Ultimate)
                            {
                                splash_form.Information = "Preparing prime/composite indexes ...";
                            }
                            else
                            {
                                splash_form.Information = "Preparing text for display ...";
                            }

                            ScopeBookRadioButton.Enabled = ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                            ScopeSelectionRadioButton.Enabled = ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                            ScopeHighlightedTextRadioButton.Enabled = ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                            if ((Globals.EDITION == Edition.Standard) || (Globals.EDITION == Edition.Grammar))
                            {
                                ScopeBookRadioButton.Checked = true;

                                if (m_dpi_x == 120.0F)
                                {
                                    ValueNavigatorPanel.Top -= 145;
                                    LetterFrequencyPanel.Top -= 145;
                                    LetterFrequencyPanel.Height += 145;
                                }
                                else
                                {
                                    ValueNavigatorPanel.Top -= 115;
                                    LetterFrequencyPanel.Top -= 115;
                                    LetterFrequencyPanel.Height += 115;
                                }
                            }

                            if ((Globals.EDITION == Edition.Grammar) || (Globals.EDITION == Edition.Ultimate))
                            {
                                GrammarTextBox.Text = "Click a word to display its grammar information in Arabic and English.";
                            }

                            // refresh chapter sort method/order/pin_chapter1
                            m_client.Book.SortChapters(m_chapter_sort_method, m_chapter_sort_order, m_pin_chapter1);
                            UpdateChapterSortControls();

                            if (m_client.Selection == null)
                            {
                                m_client.Selection = new Selection(m_client.Book, SelectionScope.Chapter, new List<int>() { 0 });
                            }
                            if (m_client.Selection != null)
                            {
                                if ((Chapter.SortMethod == ChapterSortMethod.ByCompilation) && (Chapter.SortOrder == ChapterSortOrder.Ascending))
                                {
                                    DisplaySelection(false);
                                }
                                else
                                {
                                    DisplaySortedChapters();
                                }
                                splash_form.Progress = 100;
                                Thread.Sleep(100);
                            }
                            UpdateSearchScope();

                            if (
                                 (m_text_display_mode == TextDisplayMode.None) ||
                                 (m_text_display_mode == TextDisplayMode.TranslationOnly)
                               )
                            {
                                // fill MainTextBox.Text with anything,
                                // don't leave empty to allow live statistics
                                MainTextBox.Text = "Fast Mode";
                                MainTextBox.Refresh();
                                GenerateSentencesLabel.Visible = false;
                                DuplicateLettersCheckBox.Visible = false;
                            }
                        }

                        DisplayDeficientNumbersLabel.BackColor = Numbers.NUMBER_KIND_COLORS[0];
                        DisplayPerfectNumbersLabel.BackColor = Numbers.NUMBER_KIND_COLORS[1];
                        DisplayAbundantNumbersLabel.BackColor = Numbers.NUMBER_KIND_COLORS[2];

                        this.Activate(); // bring to foreground
                    }
                }
            }
        }
        catch (Exception ex)
        {
            while (ex != null)
            {
                //Console.WriteLine(ex.Message);
                MessageBox.Show(ex.Message, Application.ProductName);
                ex = ex.InnerException;
            }
        }
        finally
        {
            splash_screen_done = true;
            Thread.Sleep(100);  // prevent race-condition to allow splashform.Close()
        }
    }
    private void MainForm_Shown(object sender, EventArgs e)
    {
        // setup C V W L start for distance caluclations
        MainTextBox.AlignToStart();
        Verse verse = GetCurrentVerse();
        if (verse != null)
        {
            if (verse.Chapter != null)
            {
                m_clicked_chapter_number = verse.Chapter.SortedNumber;
            }

            m_clicked_verse_number = verse.Number;

            if (verse.Words.Count > 0)
            {
                Word word = verse.Words[0];
                if (word != null)
                {
                    m_clicked_word_number = word.Number;
                    if (word.Letters.Count > 0)
                    {
                        Letter letter = word.Letters[0];
                        if (letter != null)
                        {
                            m_clicked_letter_number = letter.Number;
                        }
                    }
                }
            }
        }

        if ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate))
        {
            EditNumerologySystemLabel.Enabled = false;
        }

        NotifyIcon.Visible = true;

        // start user at chapter list box
        ChaptersListBox.Focus();
    }
    private void MainForm_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            if (WordsListBox.Focused)
            {
                WordsListBox_DoubleClick(null, null);
                e.Handled = true;
            }
            else
            {
                e.Handled = false;
            }
        }
        if (e.KeyCode == Keys.Tab)
        {
            e.Handled = false;
        }
        else if (e.KeyCode == Keys.Escape)
        {
            HandleEscapeKeyPress(null, null);
            e.Handled = true; // stop annoying beep
        }
        else if (e.Control && (e.KeyCode == Keys.Down)) // Redo
        {
            RedoGotoVerse();
        }
        else if (e.Control && (e.KeyCode == Keys.Up)) // Undo
        {
            UndoGotoVerse();
        }
        else if (e.Control && (e.KeyCode == Keys.A)) // SelectAll chapters
        {
            if (ChaptersListBox.Focused)
            {
                for (int i = 0; i < 3; i++) ChaptersListBox.SelectedIndexChanged -= new EventHandler(ChaptersListBox_SelectedIndexChanged);
                for (int i = 0; i < ChaptersListBox.Items.Count - 1; i++)
                {
                    ChaptersListBox.SelectedIndices.Add(i);
                }
                ChaptersListBox.SelectedIndexChanged += new EventHandler(ChaptersListBox_SelectedIndexChanged);
                ChaptersListBox.SelectedIndices.Add(ChaptersListBox.Items.Count - 1);
            }
            else if (WordsListBox.Focused)
            {
                for (int i = 0; i < 3; i++) WordsListBox.SelectedIndexChanged -= new EventHandler(WordsListBox_SelectedIndexChanged);
                for (int i = 0; i < WordsListBox.Items.Count - 1; i++)
                {
                    WordsListBox.SelectedIndices.Add(i);
                }
                WordsListBox.SelectedIndexChanged += new EventHandler(WordsListBox_SelectedIndexChanged);
                WordsListBox.SelectedIndices.Add(WordsListBox.Items.Count - 1);
            }
            else
            {
                e.Handled = false;
            }
        }
        else
        {
            if (!e.Alt && !e.Control && !e.Shift)
            {
                if ((e.KeyCode == Keys.Back) || (e.KeyCode == Keys.BrowserBack))
                {
                    if (m_active_textbox != null)
                    {
                        if (
                            ((m_active_textbox.Focused) && (m_translation_readonly)) ||
                            (SelectionHistoryBackwardButton.Focused) ||
                            (SelectionHistoryForwardButton.Focused) ||
                            (SelectionHistoryCounterLabel.Focused)
                           )
                        {
                            SelectionHistoryBackwardButton_Click(null, null);
                            e.Handled = true; // stop annoying beep
                        }
                    }
                }
                else if ((e.KeyCode == Keys.BrowserForward))
                {
                    if (m_active_textbox != null)
                    {
                        if (
                            ((m_active_textbox.Focused) && (m_translation_readonly)) ||
                            (SelectionHistoryBackwardButton.Focused) ||
                            (SelectionHistoryForwardButton.Focused) ||
                            (SelectionHistoryCounterLabel.Focused)
                           )
                        {
                            SelectionHistoryForwardButton_Click(null, null);
                            e.Handled = true; // stop annoying beep
                        }
                    }
                }
                else if (e.KeyCode == Keys.F1)
                {
                    HelpMessageLabel.Visible = true;
                }
                else if (e.KeyCode == Keys.F2)
                {
                    HelpMessageLabel.Visible = false;
                }
                else if (e.KeyCode == Keys.F3)
                {
                    if (m_found_verses_displayed)
                    {
                        SelectNextFindMatch();
                    }
                    else
                    {
                        NextBookmarkButton_Click(null, null);
                    }
                }
                else if (e.KeyCode == Keys.F4)
                {
                    if (m_active_textbox != null)
                    {
                        if (m_active_textbox.Focused)
                        {
                            DoFindRelatedWords(m_active_textbox);
                        }
                    }
                }
                else if (e.KeyCode == Keys.F5)
                {
                    if (m_active_textbox != null)
                    {
                        if (m_active_textbox.Focused)
                        {
                            DoFindRelatedVerses(m_active_textbox);
                        }
                    }
                }
                else if (e.KeyCode == Keys.F6)
                {
                    if (m_active_textbox != null)
                    {
                        if (m_active_textbox.Focused)
                        {
                            DoFindSameText(m_active_textbox);
                        }
                    }
                }
                else if (e.KeyCode == Keys.F7)
                {
                    if (m_active_textbox != null)
                    {
                        if (m_active_textbox.Focused)
                        {
                            DoFindSameHarakat(m_active_textbox);
                        }
                    }
                }
                else if (e.KeyCode == Keys.F8)
                {
                    if (m_active_textbox != null)
                    {
                        if (m_active_textbox.Focused)
                        {
                            DoFindSameVerses(m_active_textbox);
                        }
                    }
                }
                else if (e.KeyCode == Keys.F9)
                {
                    if (m_active_textbox != null)
                    {
                        if (m_active_textbox.Focused)
                        {
                            DoFindSameValue(m_active_textbox);
                        }
                    }
                }
                else if (e.KeyCode == Keys.F10)
                {
                }
                else if (e.KeyCode == Keys.F11)
                {
                    ToggleWordWrap();
                }
                else if (e.KeyCode == Keys.F12)
                {
                    if (this.WindowState != FormWindowState.Maximized)
                    {
                        this.WindowState = FormWindowState.Maximized;
                        this.FormBorderStyle = FormBorderStyle.None;
                    }
                    else
                    {
                        this.WindowState = FormWindowState.Normal;
                        this.FormBorderStyle = FormBorderStyle.Sizable;
                    }
                }
                else
                {
                    // let editor process key
                }
            }
            else if (!e.Alt && !e.Control && e.Shift)
            {
                if ((e.KeyCode == Keys.Back) || (e.KeyCode == Keys.BrowserBack))
                {
                    if (m_active_textbox != null)
                    {
                        if (
                            ((m_active_textbox.Focused) && (m_translation_readonly)) ||
                            (SelectionHistoryBackwardButton.Focused) ||
                            (SelectionHistoryForwardButton.Focused) ||
                            (SelectionHistoryCounterLabel.Focused)
                           )
                        {
                            SelectionHistoryForwardButton_Click(null, null);
                            e.Handled = true; // stop annoying beep
                        }
                    }
                }
                else if ((e.KeyCode == Keys.BrowserForward))
                {
                    if (m_active_textbox != null)
                    {
                        if (
                            ((m_active_textbox.Focused) && (m_translation_readonly)) ||
                            (SelectionHistoryBackwardButton.Focused) ||
                            (SelectionHistoryForwardButton.Focused) ||
                            (SelectionHistoryCounterLabel.Focused)
                           )
                        {
                            SelectionHistoryBackwardButton_Click(null, null);
                            e.Handled = true; // stop annoying beep
                        }
                    }
                }
                else if (e.KeyCode == Keys.F1)
                {
                }
                else if (e.KeyCode == Keys.F2)
                {
                }
                else if (e.KeyCode == Keys.F3)
                {
                    if (m_found_verses_displayed)
                    {
                        SelectPreviousFindMatch();
                    }
                    else
                    {
                        PreviousBookmarkButton_Click(null, null);
                    }
                }
                else if (e.KeyCode == Keys.F4)
                {
                }
                else if (e.KeyCode == Keys.F5)
                {
                }
                else if (e.KeyCode == Keys.F6)
                {
                }
                else if (e.KeyCode == Keys.F7)
                {
                }
                else if (e.KeyCode == Keys.F8)
                {
                }
                else if (e.KeyCode == Keys.F9)
                {
                }
                else if (e.KeyCode == Keys.F10)
                {
                }
                else if (e.KeyCode == Keys.F11)
                {
                }
                else if (e.KeyCode == Keys.F12)
                {
                }
                else
                {
                    // let editor process key
                }
            }
        }
    }
    private void MainForm_Resize(object sender, EventArgs e)
    {
        if (this.WindowState != FormWindowState.Minimized)
        {
            m_maximized_before_minimized = this.WindowState == FormWindowState.Maximized;
        }

        if (PictureBox.Visible)
        {
            RedrawImage();
        }
        else
        {
            if (m_player != null)
            {
                if (m_player.Closed)
                {
                    Verse verse = GetCurrentVerse();
                    if (verse != null)
                    {
                        if (m_active_textbox != null)
                        {
                            int start = m_active_textbox.SelectionStart;
                            int length = m_active_textbox.SelectionLength;
                            m_active_textbox.AlignToLineStart();
                            m_active_textbox.Select(start, length);
                        }
                    }
                }
            }
        }
    }
    private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
    {
        //// prevent user from closing from the X close button
        //if (e.CloseReason == CloseReason.UserClosing)
        //{
        //    e.Cancel = true;
        //    this.Visible = false;
        //}
    }
    private void MainForm_FormClosed(object sender, FormClosedEventArgs e)
    {
        CloseApplication();
    }
    private void CloseApplication()
    {
        try
        {
            // save current note (if any)
            BookmarkTextBox_Leave(null, null);

            if (m_client != null)
            {
                // save bookmarks of all texts of current client
                m_client.SaveBookmarks();

                // save user history
                m_client.SaveHistoryItems();
            }

            // save application options
            SaveApplicationOptions();

            PlayerStopLabel_Click(null, null);

            // remove icon from tray
            if (NotifyIcon != null)
            {
                NotifyIcon.Visible = false;
                NotifyIcon.Dispose();
            }

            if (DivisorUpTimer != null)
            {
                DivisorUpTimer.Dispose();
            }
            if (DivisorDownTimer != null)
            {
                DivisorDownTimer.Dispose();
            }
        }
        catch
        {
            // silence IO error in case running from read-only media (CD/DVD)
        }
    }
    private bool m_maximized_before_minimized = false;
    private void NotifyIcon_MouseClick(object sender, MouseEventArgs e)
    {
        if (e.Button == MouseButtons.Left)
        {
            if (this.Visible == true)
            {
                this.Visible = false;
            }
            else
            {
                this.Visible = true;
                if (this.WindowState == FormWindowState.Minimized)
                {
                    if (m_maximized_before_minimized)
                    {
                        this.WindowState = FormWindowState.Maximized;
                    }
                    else
                    {
                        this.WindowState = FormWindowState.Normal;
                    }
                }
                this.Activate();    // bring to foreground
            }
        }
    }
    private void NotifyIcon_MouseDoubleClick(object sender, MouseEventArgs e)
    {
        this.Visible = false;
        //VersionLabel_Click(null, null); //??? runtime error
    }
    private void AboutToolStripMenuItem_Click(object sender, EventArgs e)
    {
        VersionLabel_Click(null, null);
    }
    private void ExitToolStripMenuItem_Click(object sender, EventArgs e)
    {
        CloseApplication();
        Application.Exit();
        System.Environment.Exit(0);
    }
    private void HandleEscapeKeyPress(object sender, KeyEventArgs e)
    {
        if (NumerologySystemComboBox.DroppedDown)
        {
            NumerologySystemComboBox.DroppedDown = false;
        }
        else if (ResearchMethodsComboBox.DroppedDown)
        {
            ResearchMethodsComboBox.DroppedDown = false;
        }
        else if (ChapterSortComboBox.DroppedDown)
        {
            ChapterSortComboBox.DroppedDown = false;
        }
        else if (TranslatorComboBox.DroppedDown)
        {
            TranslatorComboBox.DroppedDown = false;
        }
        else if (TafseerComboBox.DroppedDown)
        {
            TafseerComboBox.DroppedDown = false;
        }
        else if (ReciterComboBox.DroppedDown)
        {
            ReciterComboBox.DroppedDown = false;
        }
        else if (BookmarkTextBox.Focused)
        {
            BookmarkTextBox.Text = null;
        }
        else if (TranslatorsCheckedListBox.Visible)
        {
            TranslationsCancelSettingsLabel_Click(null, null);
        }
        else if (RecitationsDownloadGroupBox.Visible)
        {
            RecitationsCancelSettingsLabel_Click(null, null);
        }
        else if ((TranslationTextBox.Focused) || (TranslationsTextBox.Focused))
        {
            DisplayTranslations(new List<Verse>(m_translated_verses));
        }
        else if (!m_translation_readonly)
        {
            EditSaveTranslationLabel_Click(null, null);
        }
        else if (PictureBox.Visible)
        {
            HidePictureBox();
        }
        else
        {
            if (m_found_verses_displayed)
            {
                if (ChaptersListBox.SelectedIndices.Count > 0)
                {
                    DisplaySearchResults();
                }
                else
                {
                    SwitchActiveTextBox();
                }
            }
            else
            {
                SwitchActiveTextBox();
            }
        }
    }
    private void EscapeButton_Click(object sender, EventArgs e)
    {
        HandleEscapeKeyPress(null, null);
    }
    private void DisplaySearchResults()
    {
        // must clear to go back to main results not main text
        ChaptersListBox.SelectedIndices.Clear();

        int pos = m_find_result_header.IndexOf(" of ");
        if (pos > -1)
        {
            m_find_result_header = m_find_result_header.Substring(pos + 4);
        }

        m_client.FilterChapters = null;
        ClearFindMatches(); // clear m_find_matches for F3 to work correctly in filtered result
        if (m_search_type == SearchType.Numbers)
        {
            switch (m_numbers_result_type)
            {
                case NumbersResultType.VerseRanges:
                    DisplayFoundVerseRanges(false, false);
                    break;
                case NumbersResultType.VerseSets:
                    DisplayFoundVerseSets(false, false);
                    break;
                case NumbersResultType.Chapters:
                    DisplayFoundChapters(false, false);
                    break;
                case NumbersResultType.ChapterRanges:
                    DisplayFoundChapterRanges(false, false);
                    break;
                case NumbersResultType.ChapterSets:
                    DisplayFoundChapterSets(false, false);
                    break;
                default:
                    DisplayFoundVerses(false, false);
                    break;
            }
        }
        else
        {
            DisplayFoundVerses(false, false);
        }

        SearchResultTextBox.Focus();
        SearchResultTextBox.Refresh();
    }
    private void SwitchActiveTextBox()
    {
        if (m_active_textbox != null)
        {
            if (m_found_verses_displayed)
            {
                SwitchToMainTextBox();
            }
            else
            {
                SwitchToSearchResultTextBox();
            }

            PlayerStopLabel_Click(null, null);


            // this code has been moved out of SelectionChanged and brought to MouseClick and KeyUp
            // to keep all verse translations visible until the user clicks a verse then show one verse translation
            if (m_active_textbox.SelectionLength == 0)
            {
                Verse verse = GetCurrentVerse();
                if (verse != null)
                {
                    DisplayTranslations(verse);
                    DisplayTafseer(verse);
                    DisplaySymmetry();
                    DisplayCVWLSequence();
                    DisplayValuesSequence();
                    DisplayDNASequence();
                }
                else
                {
                    TranslationTextBox.WordWrap = m_active_textbox.WordWrap;
                    TranslationTextBox.Text = null;
                    TranslationTextBox.Refresh();

                    TranslationsTextBox.WordWrap = m_active_textbox.WordWrap;
                    TranslationsTextBox.Text = null;
                    TranslationsTextBox.Refresh();

                    m_translation_readonly = true;
                    UpdateTranslationReadOnly();
                    EditSaveTranslationLabel.Enabled = false;
                }

                ToolTip.SetToolTip(ChaptersInspectLabel, "Inspect chapters");
                WordsListBoxLabel.Visible = false;
                WordsListBox.Visible = false;
                WordsListBox.SendToBack();

                GenerateSentencesLabel.Visible = false;
                DuplicateLettersCheckBox.Visible = false;
                GenerateSentencesLabel.Refresh();
                DuplicateLettersCheckBox.Refresh();
            }
            else
            {
                // selected text is dealt with by CalculateAndDisplayCounts 

                DisplayWordFrequencies();

                GenerateSentencesLabel.Visible = true;
                DuplicateLettersCheckBox.Visible = true;
                GenerateSentencesLabel.Refresh();
                DuplicateLettersCheckBox.Refresh();
            }

            UpdateHeaderLabel();

            m_active_textbox.Focus();
            MainTextBox_SelectionChanged(m_active_textbox, null);
        }
    }
    private void UpdateNumericMinMax()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                PageNumericUpDown.Minimum = 1;
                PageNumericUpDown.Maximum = m_client.Book.Pages.Count;
                StationNumericUpDown.Minimum = 1;
                StationNumericUpDown.Maximum = m_client.Book.Stations.Count;
                PartNumericUpDown.Minimum = 1;
                PartNumericUpDown.Maximum = m_client.Book.Parts.Count;
                GroupNumericUpDown.Minimum = 1;
                GroupNumericUpDown.Maximum = m_client.Book.Groups.Count;
                HalfNumericUpDown.Minimum = 1;
                HalfNumericUpDown.Maximum = m_client.Book.Halfs.Count;
                QuarterNumericUpDown.Minimum = 1;
                QuarterNumericUpDown.Maximum = m_client.Book.Quarters.Count;
                BowingNumericUpDown.Minimum = 1;
                BowingNumericUpDown.Maximum = m_client.Book.Bowings.Count;
                PageNumericUpDown.Minimum = 1;
                PageNumericUpDown.Maximum = m_client.Book.Pages.Count;
                VerseNumericUpDown.Minimum = 1;
                VerseNumericUpDown.Maximum = m_client.Book.Verses.Count;
            }
        }
    }
    private void LoadApplicationSettings()
    {
        try
        {
            // must be after the populates...
            LoadApplicationOptions();

            RadixValueLabel.Text = m_radix.ToString();
            DivisorValueLabel.Text = m_divisor.ToString();

            ApplyTranslationFontAndColor();

            // WARNING: updates size BUT loses the font face in right-to-left RichTextBox
            //SetFontSize(m_font_size);
            // so use ZoomFactor instead
            MainTextBox.ZoomFactor = m_text_zoom_factor;
            SearchResultTextBox.ZoomFactor = m_text_zoom_factor;

            PlayerVolumeTrackBar.Value = m_audio_volume / (1000 / PlayerVolumeTrackBar.Maximum);
            PlayerVerseSilenceGapTrackBar.Value = (int)(m_silence_between_verses * (PlayerVerseSilenceGapTrackBar.Maximum / 2));
            SetToolTipPlayerVerseSilenceGapTrackBar();
            PlayerSelectionSilenceGapTrackBar.Value = m_silence_between_selections;
            SetToolTipPlayerSelectionSilenceGapTrackBar();

            UpdateFindByNumbersNumberLabel();
            UpdateDistancesOptions();
        }
        catch (Exception ex)
        {
            while (ex != null)
            {
                //Console.WriteLine(ex.Message);
                MessageBox.Show(ex.Message, Application.ProductName);
                ex = ex.InnerException;
            }
        }
    }
    // speed up by only showing text when needed
    private enum TextDisplayMode { None, QuranOnly, TranslationOnly, Both };
    TextDisplayMode m_text_display_mode = TextDisplayMode.Both;
    private void ClientSplitContainer_Resize(object sender, EventArgs e)
    {
        if (this.ClientSplitContainer.Width < 40)
        {
            m_text_display_mode = TextDisplayMode.None;
        }
        else // find out what it should be from SplitterDistance
        {
            ClientSplitContainer_SplitterMoved(null, null);
        }
    }
    private void ClientSplitContainer_SplitterMoved(object sender, SplitterEventArgs e)
    {
        if (this.ClientSplitContainer.Width > 0)
        {
            m_information_box_top = this.ClientSplitContainer.SplitterDistance;
            if (m_information_box_top <= 40)
            {
                m_text_display_mode = TextDisplayMode.TranslationOnly;
            }
            else if (m_information_box_top > (ClientSplitContainer.Height - 40))
            {
                m_text_display_mode = TextDisplayMode.QuranOnly;
            }
            else
            {
                m_text_display_mode = TextDisplayMode.Both;
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Initialization
    ///////////////////////////////////////////////////////////////////////////////
    private void LoadApplicationFolders()
    {
        if (File.Exists(m_ini_filename))
        {
            try
            {
                using (StreamReader reader = File.OpenText(m_ini_filename))
                {
                    while (!reader.EndOfStream)
                    {
                        string line = reader.ReadLine();
                        if (!String.IsNullOrEmpty(line))
                        {
                            string[] parts = line.Split('=');
                            if (parts.Length >= 2)
                            {
                                switch (parts[0])
                                {
                                    // [Folders]
                                    case "NumbersFolder":
                                        {
                                            Globals.NUMBERS_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "FontsFolder":
                                        {
                                            Globals.FONTS_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "ImagesFolder":
                                        {
                                            Globals.IMAGES_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "DataFolder":
                                        {
                                            Globals.DATA_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "AudioFolder":
                                        {
                                            Globals.AUDIO_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "TranslationsFolder":
                                        {
                                            Globals.TRANSLATIONS_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "TafseersFolder":
                                        {
                                            Globals.TAFSEERS_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "RulesFolder":
                                        {
                                            Globals.RULES_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "ValuesFolder":
                                        {
                                            Globals.VALUES_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "StatisticsFolder":
                                        {
                                            Globals.STATISTICS_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "ResearchFolder":
                                        {
                                            Globals.RESEARCH_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "DrawingsFolder":
                                        {
                                            Globals.DRAWINGS_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "BookmarksFolder":
                                        {
                                            Globals.BOOKMARKS_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "HistoryFolder":
                                        {
                                            Globals.HISTORY_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                    case "HelpFolder":
                                        {
                                            Globals.HELP_FOLDER = parts[1].Replace("\\", "/").Trim();
                                        }
                                        break;
                                }
                            }
                        }
                    }
                }
            }
            catch
            {
                // silence Parse exceptions
                // continue with next INI entry
            }
        }
    }
    private string LoadNumerologySystemName()
    {
        if (File.Exists(m_ini_filename))
        {
            using (StreamReader reader = File.OpenText(m_ini_filename))
            {
                while (!reader.EndOfStream)
                {
                    string line = reader.ReadLine();
                    if (!String.IsNullOrEmpty(line))
                    {
                        string[] parts = line.Split('=');
                        if (parts.Length >= 2)
                        {
                            if (parts[0] == "NumerologySystem")
                            {
                                try
                                {
                                    return parts[1].Trim();
                                }
                                catch
                                {
                                    return NumerologySystem.DEFAULT_NAME;
                                }
                            }
                        }
                    }
                }
            }
        }
        return NumerologySystem.DEFAULT_NAME;
    }
    private string LoadTextModeSettings()
    {
        if (File.Exists(m_ini_filename))
        {
            using (StreamReader reader = File.OpenText(m_ini_filename))
            {
                while (!reader.EndOfStream)
                {
                    string line = reader.ReadLine();
                    if (!String.IsNullOrEmpty(line))
                    {
                        string[] parts = line.Split('=');
                        if (parts.Length >= 2)
                        {
                            switch (parts[0])
                            {
                                case "WithBismAllah":
                                    {
                                        try
                                        {
                                            m_with_bism_Allah = bool.Parse(parts[1].Trim());
                                        }
                                        catch
                                        {
                                            m_with_bism_Allah = true;
                                        }
                                    }
                                    break;
                                case "WawAsWord":
                                    {
                                        try
                                        {
                                            m_waw_as_word = bool.Parse(parts[1].Trim());
                                        }
                                        catch
                                        {
                                            m_waw_as_word = false;
                                        }
                                    }
                                    break;
                                case "ShaddaAsLetter":
                                    {
                                        try
                                        {
                                            m_shadda_as_letter = bool.Parse(parts[1].Trim());
                                        }
                                        catch
                                        {
                                            m_shadda_as_letter = false;
                                        }
                                    }
                                    break;
                            }
                        }
                    }
                }
            }
        }
        return NumerologySystem.DEFAULT_NAME;
    }
    private void LoadApplicationOptions()
    {
        try
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (File.Exists(m_ini_filename))
                    {
                        // Selection.Scope and Selection.Indexes are immutable/readonly so create a new Selection to replace m_client.Selection 
                        SelectionScope selection_scope = SelectionScope.Book;
                        List<int> selection_indexes = new List<int>();

                        using (StreamReader reader = File.OpenText(m_ini_filename))
                        {
                            while (!reader.EndOfStream)
                            {
                                string line = reader.ReadLine();
                                if (!String.IsNullOrEmpty(line))
                                {
                                    if (line.StartsWith("#")) continue;

                                    string[] parts = line.Split('=');
                                    if (parts.Length >= 2)
                                    {
                                        switch (parts[0])
                                        {
                                            // [Window]
                                            case "Top":
                                                {
                                                    try
                                                    {
                                                        this.Top = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        this.Top = 100;
                                                    }
                                                }
                                                break;
                                            case "Left":
                                                {
                                                    try
                                                    {
                                                        this.Left = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        this.Left = 100;
                                                    }
                                                }
                                                break;
                                            case "Width":
                                                {
                                                    try
                                                    {
                                                        this.Width = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        this.Width = DEFAULT_WINDOW_WIDTH;
                                                    }
                                                }
                                                break;
                                            case "Height":
                                                {
                                                    try
                                                    {
                                                        this.Height = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        this.Height = DEFAULT_WINDOW_HEIGHT;
                                                    }
                                                }
                                                break;
                                            case "DrawingWidth":
                                                {
                                                    try
                                                    {
                                                        Drawing.WIDTH = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        // use default Drawing.WIDTH
                                                    }
                                                }
                                                break;
                                            case "DrawingHeight":
                                                {
                                                    try
                                                    {
                                                        Drawing.HEIGHT = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        // use default Drawing.HEIGHT
                                                    }
                                                }
                                                break;
                                            case "InformationBoxTop":
                                                {
                                                    try
                                                    {
                                                        m_information_box_top = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_information_box_top = DEFAULT_INFORMATION_BOX_TOP;
                                                    }
                                                }
                                                break;
                                            case "InformationPageIndex":
                                                {
                                                    try
                                                    {
                                                        m_information_page_index = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_information_page_index = 0;
                                                    }
                                                }
                                                break;
                                            case "TranslationBoxWidth":
                                                {
                                                    try
                                                    {
                                                        m_translation_box_width = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_translation_box_width = DEFAULT_TRANSLATION_BOX_WIDTH;
                                                    }
                                                }
                                                break;
                                            case "Translator":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.TranslatorComboBox.Items.Count))
                                                        {
                                                            this.TranslatorComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        string item = m_client.Book.TranslationInfos[Client.DEFAULT_TRANSLATION].Name;
                                                        if (this.TranslatorComboBox.Items.Contains(item))
                                                        {
                                                            this.TranslatorComboBox.SelectedItem = item;
                                                        }
                                                        else
                                                        {
                                                            this.TranslatorComboBox.SelectedIndex = -1;
                                                        }
                                                    }
                                                }
                                                break;
                                            case "Translators":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.TranslatorsComboBox.Items.Count))
                                                        {
                                                            this.TranslatorsComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        string item = m_client.Book.TranslationInfos[Client.DEFAULT_EMLAAEI_TEXT].Name;
                                                        if (this.TranslatorsComboBox.Items.Contains(item))
                                                        {
                                                            this.TranslatorsComboBox.SelectedItem = item;
                                                        }
                                                        else
                                                        {
                                                            this.TranslatorsComboBox.SelectedIndex = -1;
                                                        }
                                                    }
                                                }
                                                break;
                                            case "ShowAllTranslations":
                                                {
                                                    try
                                                    {
                                                        m_show_all_translations = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_show_all_translations = true;
                                                    }
                                                    AllTranslatorsCheckBox.Checked = m_show_all_translations;
                                                }
                                                break;
                                            case "Tafseer":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.TafseerComboBox.Items.Count))
                                                        {
                                                            this.TafseerComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        string item = Client.DEFAULT_TAFSEER.Replace("/", " - ");
                                                        if (this.TafseerComboBox.Items.Contains(item))
                                                        {
                                                            this.TafseerComboBox.SelectedItem = item;
                                                        }
                                                        else
                                                        {
                                                            this.TafseerComboBox.SelectedIndex = -1;
                                                        }
                                                    }
                                                }
                                                break;
                                            case "SymmetryType":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.SymmetryTypeComboBox.Items.Count))
                                                        {
                                                            this.SymmetryTypeComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        this.SymmetryTypeComboBox.SelectedIndex = -1;
                                                    }
                                                }
                                                break;
                                            case "SymmetryIncludeBoundaryCases":
                                                {
                                                    try
                                                    {
                                                        m_symmetry_include_boundary_cases = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_symmetry_include_boundary_cases = false;
                                                    }
                                                }
                                                break;
                                            case "CVWLSequenceType":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.CVWLSequenceTypeComboBox.Items.Count))
                                                        {
                                                            this.CVWLSequenceTypeComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        this.CVWLSequenceTypeComboBox.SelectedIndex = -1;
                                                    }
                                                }
                                                break;
                                            case "CVWLSequenceDirection":
                                                {
                                                    try
                                                    {
                                                        m_cvwl_sequence_right_to_left = !bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_cvwl_sequence_right_to_left = false;
                                                    }
                                                    CVWLSequenceDirectionLabel_Click(null, null);
                                                }
                                                break;
                                            case "CVWLSequenceShowFactors":
                                                {
                                                    try
                                                    {
                                                        m_cvwl_sequence_show_factors = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_cvwl_sequence_show_factors = false;
                                                    }
                                                    CVWLSequenceShowFactorsCheckBox.Checked = m_cvwl_sequence_show_factors;
                                                }
                                                break;
                                            case "ValuesSequenceRadix":
                                                {
                                                    try
                                                    {
                                                        m_values_sequence_radix = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_values_sequence_radix = DEFAULT_RADIX;
                                                    }
                                                    ValuesSequenceRadixNumericUpDown.Value = m_values_sequence_radix;
                                                }
                                                break;
                                            case "ValuesSequenceScope":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.ValuesSequenceScopeComboBox.Items.Count))
                                                        {
                                                            this.ValuesSequenceScopeComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        this.ValuesSequenceScopeComboBox.SelectedIndex = -1;
                                                    }
                                                }
                                                break;
                                            case "ValuesSequenceDirection":
                                                {
                                                    try
                                                    {
                                                        m_values_sequence_right_to_left = !bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_values_sequence_right_to_left = false;
                                                    }
                                                    ValuesSequenceDirectionLabel_Click(null, null);
                                                }
                                                break;
                                            case "DNASequenceSystem":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.DNASequenceSystemComboBox.Items.Count))
                                                        {
                                                            this.DNASequenceSystemComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        string item = DNASequenceSystem.DEFAULT_NAME;
                                                        if (this.DNASequenceSystemComboBox.Items.Contains(item))
                                                        {
                                                            this.DNASequenceSystemComboBox.SelectedItem = item;
                                                        }
                                                        else
                                                        {
                                                            this.DNASequenceSystemComboBox.SelectedIndex = -1;
                                                        }
                                                    }
                                                }
                                                break;
                                            case "DNASequenceDirection":
                                                {
                                                    try
                                                    {
                                                        m_dna_sequence_right_to_left = !bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_dna_sequence_right_to_left = false;
                                                    }
                                                    DNASequenceDirectionLabel_Click(null, null);
                                                }
                                                break;
                                            // [Numbers]
                                            case "Radix":
                                                {
                                                    try
                                                    {
                                                        m_radix = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_radix = DEFAULT_RADIX;
                                                    }
                                                    RadixValueLabel.Text = m_radix.ToString();
                                                }
                                                break;
                                            case "GlobalDivisor":
                                                {
                                                    try
                                                    {
                                                        m_divisor = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_divisor = DEFAULT_DIVISOR;
                                                    }
                                                    DivisorValueLabel.Text = m_divisor.ToString();
                                                }
                                                break;
                                            case "TotalChapterCounts":
                                                {
                                                    try
                                                    {
                                                        m_total_chapter_counts = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_total_chapter_counts = false;
                                                    }
                                                    TotalChapterCountsCheckBox.Checked = m_total_chapter_counts;
                                                }
                                                break;
                                            case "NumerologySystem":
                                                {
                                                    // m_client.NumerologySystem.Name
                                                    // was read by LoadNumerologySystemName()
                                                    // continue with other m_client.NumerologySystem.Xxx
                                                    if (m_client.NumerologySystem != null)
                                                    {
                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            if ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate))
                                                            {
                                                                m_client.NumerologySystemScope = (NumerologySystemScope)Enum.Parse(typeof(NumerologySystemScope), parts[1].Trim());
                                                            }
                                                            else
                                                            {
                                                                m_client.NumerologySystemScope = NumerologySystemScope.Book;
                                                            }
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterLNumber = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterWNumber = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterVNumber = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterCNumber = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterLDistance = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterWDistance = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterVDistance = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToLetterCDistance = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToWordWNumber = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToWordVNumber = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToWordCNumber = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToWordWDistance = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToWordVDistance = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToWordCDistance = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToVerseVNumber = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToVerseCNumber = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToVerseVDistance = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToVerseCDistance = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }

                                                        line = reader.ReadLine();
                                                        parts = line.Split('=');
                                                        if (parts.Length >= 2)
                                                        {
                                                            m_client.NumerologySystem.AddToChapterCNumber = bool.Parse(parts[1].Trim()) && ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate));
                                                        }
                                                    }
                                                }
                                                break;
                                            case "MathsDivisor":
                                                {
                                                    try
                                                    {
                                                        m_maths_divisor = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_maths_divisor = DEFAULT_DIVISOR;
                                                    }
                                                    MathsDivisorNumericUpDown.Value = m_maths_divisor;
                                                }
                                                break;
                                            case "MathsUpdateGlobalDivisor":
                                                {
                                                    try
                                                    {
                                                        m_maths_update_global_divisor = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_maths_update_global_divisor = false;
                                                    }
                                                    MathsUpdateDivisorCheckBox.Checked = m_maths_update_global_divisor;
                                                }
                                                break;
                                            case "WordNumberScope":
                                                {
                                                    try
                                                    {
                                                        m_word_number_scope = (NumberScope)Enum.Parse(typeof(NumberScope), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_word_number_scope = NumberScope.Number;
                                                    }
                                                }
                                                break;
                                            case "VerseNumberScope":
                                                {
                                                    try
                                                    {
                                                        m_verse_number_scope = (NumberScope)Enum.Parse(typeof(NumberScope), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_verse_number_scope = NumberScope.Number;
                                                    }
                                                }
                                                break;
                                            case "ChapterNumberScope":
                                                {
                                                    try
                                                    {
                                                        m_chapter_number_scope = (NumberScope)Enum.Parse(typeof(NumberScope), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_chapter_number_scope = NumberScope.Number;
                                                    }
                                                }
                                                break;
                                            case "DistancesRunningChapterNumberScope":
                                                {
                                                    try
                                                    {
                                                        m_distances_running_chapter_number_scope = (NumberScope)Enum.Parse(typeof(NumberScope), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_distances_running_chapter_number_scope = NumberScope.Number;
                                                    }
                                                }
                                                break;
                                            case "DistancesRunningVerseNumberScope":
                                                {
                                                    try
                                                    {
                                                        m_distances_running_verse_number_scope = (NumberScope)Enum.Parse(typeof(NumberScope), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_distances_running_verse_number_scope = NumberScope.NumberInChapter;
                                                    }
                                                }
                                                break;
                                            case "DistancesRunningWordNumberScope":
                                                {
                                                    try
                                                    {
                                                        m_distances_running_word_number_scope = (NumberScope)Enum.Parse(typeof(NumberScope), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_distances_running_word_number_scope = NumberScope.NumberInVerse;
                                                    }
                                                }
                                                break;
                                            case "DistancesDivisor":
                                                {
                                                    try
                                                    {
                                                        m_distances_divisor = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_distances_divisor = DEFAULT_DIVISOR;
                                                    }
                                                    DistancesDivisorNumericUpDown.Value = m_distances_divisor;
                                                }
                                                break;
                                            case "DistancesUpdateGlobalDivisor":
                                                {
                                                    try
                                                    {
                                                        m_distances_update_global_divisor = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_distances_update_global_divisor = false;
                                                    }
                                                    DistancesUpdateDivisorCheckBox.Checked = m_distances_update_global_divisor;
                                                }
                                                break;
                                            // [Text]
                                            case "ChapterSortMethod":
                                                {
                                                    try
                                                    {
                                                        m_chapter_sort_method = (ChapterSortMethod)Enum.Parse(typeof(ChapterSortMethod), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_chapter_sort_method = ChapterSortMethod.ByCompilation;
                                                    }
                                                }
                                                break;
                                            case "ChapterSortOrder":
                                                {
                                                    try
                                                    {
                                                        m_chapter_sort_order = (ChapterSortOrder)Enum.Parse(typeof(ChapterSortOrder), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_chapter_sort_order = ChapterSortOrder.Ascending;
                                                    }
                                                }
                                                break;
                                            case "PinChapter1":
                                                {
                                                    try
                                                    {
                                                        m_pin_chapter1 = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_pin_chapter1 = false;
                                                    }
                                                }
                                                break;
                                            // [Display]
                                            case "MainTextWordWrap":
                                                {
                                                    try
                                                    {
                                                        m_word_wrap_main_textbox = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_word_wrap_main_textbox = false;
                                                    }
                                                }
                                                break;
                                            case "SearchResultWordWrap":
                                                {
                                                    try
                                                    {
                                                        m_word_wrap_search_textbox = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_word_wrap_search_textbox = false;
                                                    }
                                                }
                                                break;
                                            case "SelectionScope":
                                                {
                                                    try
                                                    {
                                                        selection_scope = (SelectionScope)Enum.Parse(typeof(SelectionScope), parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        selection_scope = SelectionScope.Chapter;
                                                    }
                                                }
                                                break;
                                            case "SelectionIndexes":
                                                {
                                                    try
                                                    {
                                                        string part = parts[1].Trim();
                                                        string[] sub_parts = part.Split('+');
                                                        selection_indexes.Clear();
                                                        for (int i = 0; i < sub_parts.Length; i++)
                                                        {
                                                            int index = int.Parse(sub_parts[i].Trim()) - 1;
                                                            selection_indexes.Add(index);
                                                        }
                                                        m_client.Selection = new Selection(m_client.Book, selection_scope, selection_indexes);
                                                    }
                                                    catch
                                                    {
                                                        selection_indexes.Add(0);
                                                    }
                                                }
                                                break;
                                            case "QuranFont":
                                                {
                                                    // application-level font
                                                    try
                                                    {
                                                        string[] sub_parts = parts[1].Split(',');
                                                        if (sub_parts.Length >= 2)
                                                        {
                                                            string quran_font_name = sub_parts[0].Trim();
                                                            float quran_font_size = float.Parse(sub_parts[1].Replace("pt", "").Trim());
                                                            ApplyFont(quran_font_name, quran_font_size);
                                                        }
                                                        else
                                                        {
                                                            ApplyFont(DEFAULT_QURAN_FONT_NAME, DEFAULT_QURAN_FONT_SIZE);
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        ApplyFont(DEFAULT_QURAN_FONT_NAME, DEFAULT_QURAN_FONT_SIZE);
                                                    }
                                                }
                                                break;
                                            case "TranslationFont":
                                                {
                                                    // system-level font
                                                    try
                                                    {
                                                        string translation_font_properties = null;
                                                        for (int i = 1; i < parts.Length; i++)
                                                        {
                                                            translation_font_properties += parts[i] + "=";
                                                        }
                                                        translation_font_properties = translation_font_properties.Remove(translation_font_properties.Length - 1, 1);
                                                        m_translation_font = (Font)font_converter.ConvertFromString(translation_font_properties.Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_translation_font = new Font(DEFAULT_TRANSALTION_FONT_NAME, DEFAULT_TRANSALTION_FONT_SIZE);
                                                    }
                                                }
                                                break;
                                            case "TranslationColor":
                                                {
                                                    try
                                                    {
                                                        m_translation_color = (Color)color_converter.ConvertFromString(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_translation_color = DEFAULT_TRANSALTION_FONT_COLOR;
                                                    }
                                                }
                                                break;
                                            case "TextZoomFactor":
                                                {
                                                    try
                                                    {
                                                        m_text_zoom_factor = float.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_text_zoom_factor = DEFAULT_TEXT_ZOOM_FACTOR;
                                                    }
                                                }
                                                break;
                                            // [Audio]
                                            case "Reciter":
                                                {
                                                    try
                                                    {
                                                        int index = int.Parse(parts[1].Trim());
                                                        if ((index >= 0) && (index < this.ReciterComboBox.Items.Count))
                                                        {
                                                            this.ReciterComboBox.SelectedIndex = index;
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        string item = m_client.Book.RecitationInfos[Client.DEFAULT_RECITATION].Reciter;
                                                        if (this.ReciterComboBox.Items.Contains(item))
                                                        {
                                                            this.ReciterComboBox.SelectedItem = item;
                                                        }
                                                        else
                                                        {
                                                            this.ReciterComboBox.SelectedIndex = -1;
                                                        }
                                                    }
                                                }
                                                break;
                                            case "Volume":
                                                {
                                                    try
                                                    {
                                                        m_audio_volume = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_audio_volume = DEFAULT_AUDIO_VOLUME;
                                                    }
                                                }
                                                break;
                                            case "VerseRepetitions":
                                                {
                                                    try
                                                    {
                                                        m_player_looping_count = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_player_looping_count = int.MaxValue; // infinite
                                                    }
                                                }
                                                break;
                                            case "VerseRepetitionsEnabled":
                                                {
                                                    try
                                                    {
                                                        m_player_looping = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_player_looping = false;
                                                    }
                                                }
                                                break;
                                            case "SelectionRepetitions":
                                                {
                                                    try
                                                    {
                                                        m_player_looping_all_count = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_player_looping_all_count = int.MaxValue; // infinite
                                                    }
                                                }
                                                break;
                                            case "SelectionRepetitionsEnabled":
                                                {
                                                    try
                                                    {
                                                        m_player_looping_all = bool.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_player_looping_all = false;
                                                    }
                                                }
                                                break;
                                            case "SilenceBetweenVerses":
                                                {
                                                    try
                                                    {
                                                        m_silence_between_verses = float.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_silence_between_verses = 0.0F;
                                                    }
                                                }
                                                break;
                                            case "SilenceBetweenSelections":
                                                {
                                                    try
                                                    {
                                                        m_silence_between_selections = int.Parse(parts[1].Trim());
                                                    }
                                                    catch
                                                    {
                                                        m_silence_between_selections = 0;
                                                    }
                                                }
                                                break;
                                            // [Downloads]
                                            case "TranslationUrlPrefix":
                                                {
                                                    try
                                                    {
                                                        TranslationInfo.UrlPrefix = parts[1].Trim();
                                                    }
                                                    catch
                                                    {
                                                        TranslationInfo.UrlPrefix = TranslationInfo.DEFAULT_URL_PREFIX;
                                                    }
                                                }
                                                break;
                                            case "TranslationFileType":
                                                {
                                                    try
                                                    {
                                                        TranslationInfo.FileType = parts[1].Trim();
                                                    }
                                                    catch
                                                    {
                                                        TranslationInfo.FileType = TranslationInfo.DEFAULT_FILE_TYPE;
                                                    }
                                                }
                                                break;
                                            case "TranslationIconUrlPrefix":
                                                {
                                                    try
                                                    {
                                                        TranslationInfo.IconUrlPrefix = parts[1].Trim();
                                                    }
                                                    catch
                                                    {
                                                        TranslationInfo.IconUrlPrefix = TranslationInfo.DEFAULT_ICON_URL_PREFIX;
                                                    }
                                                }
                                                break;
                                            case "RecitationUrlPrefix":
                                                {
                                                    try
                                                    {
                                                        RecitationInfo.UrlPrefix = parts[1].Trim();
                                                    }
                                                    catch
                                                    {
                                                        RecitationInfo.UrlPrefix = RecitationInfo.DEFAULT_URL_PREFIX;
                                                    }
                                                }
                                                break;
                                            case "RecitationFileType":
                                                {
                                                    try
                                                    {
                                                        RecitationInfo.FileType = parts[1].Trim();
                                                    }
                                                    catch
                                                    {
                                                        RecitationInfo.FileType = RecitationInfo.DEFAULT_FILE_TYPE;
                                                    }
                                                }
                                                break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else // first Application launch
                    {
                        this.StartPosition = FormStartPosition.CenterScreen;
                        this.Width = DEFAULT_WINDOW_WIDTH;
                        this.Height = DEFAULT_WINDOW_HEIGHT;

                        ApplyFont(DEFAULT_QURAN_FONT_NAME, DEFAULT_QURAN_FONT_SIZE);
                        m_translation_font = new Font(DEFAULT_TRANSALTION_FONT_NAME, DEFAULT_TRANSALTION_FONT_SIZE);
                        AllTranslatorsCheckBox.Checked = m_show_all_translations;

                        if (this.ChapterComboBox.Items.Count > 1)
                        {
                            this.ChapterComboBox.SelectedIndex = 0;
                        }
                        string item = null;
                        if (m_client.Book.TranslationInfos.ContainsKey(Client.DEFAULT_TRANSLATION))
                        {
                            item = m_client.Book.TranslationInfos[Client.DEFAULT_TRANSLATION].Name;
                            if (this.TranslatorComboBox.Items.Contains(item))
                            {
                                this.TranslatorComboBox.SelectedItem = item;
                            }
                        }
                        if (m_client.Book.TranslationInfos.ContainsKey(Client.DEFAULT_EMLAAEI_TEXT))
                        {
                            item = m_client.Book.TranslationInfos[Client.DEFAULT_EMLAAEI_TEXT].Name;
                            if (this.TranslatorsComboBox.Items.Contains(item))
                            {
                                this.TranslatorsComboBox.SelectedItem = item;
                            }
                        }
                        item = Client.DEFAULT_TAFSEER.Replace("/", " - ");
                        if (this.TafseerComboBox.Items.Contains(item))
                        {
                            this.TafseerComboBox.SelectedItem = item;
                        }
                        if (this.SymmetryTypeComboBox.Items.Count > 0)
                        {
                            this.SymmetryTypeComboBox.SelectedIndex = 0;
                        }
                        if (this.CVWLSequenceTypeComboBox.Items.Count > 0)
                        {
                            this.CVWLSequenceTypeComboBox.SelectedIndex = 0;
                        }
                        if (this.ValuesSequenceScopeComboBox.Items.Count > 0)
                        {
                            this.ValuesSequenceScopeComboBox.SelectedIndex = 0;
                        }
                        item = DNASequenceSystem.DEFAULT_NAME;
                        if (this.DNASequenceSystemComboBox.Items.Contains(item))
                        {
                            this.DNASequenceSystemComboBox.SelectedItem = item;
                        }

                        m_values_sequence_radix = DEFAULT_RADIX;
                        ValuesSequenceRadixNumericUpDown.Value = m_values_sequence_radix;
                        m_maths_divisor = DEFAULT_DIVISOR;
                        MathsDivisorNumericUpDown.Value = m_maths_divisor;
                        m_distances_divisor = DEFAULT_DIVISOR;
                        DistancesDivisorNumericUpDown.Value = m_distances_divisor;

                        // select chapter Al-Fatiha as default
                        m_client.Selection = new Selection(m_client.Book, SelectionScope.Chapter, new List<int>() { 0 });
                    }
                }
            }
        }
        catch
        {
            // silence Parse exceptions
            // continue with next INI entry
        }
    }
    private void SaveApplicationOptions()
    {
        try
        {
            if (m_client != null)
            {
                using (StreamWriter writer = new StreamWriter(m_ini_filename, false, Encoding.Unicode))
                {
                    if (this.WindowState == FormWindowState.Maximized)
                    {
                        this.WindowState = FormWindowState.Normal;
                    }

                    writer.WriteLine("[Window]");
                    if (this.WindowState == FormWindowState.Minimized)
                    {
                        // restore or width/height will be saved as 0
                        writer.WriteLine("Top" + "=" + (Screen.PrimaryScreen.WorkingArea.Height - DEFAULT_WINDOW_HEIGHT) / 2);
                        writer.WriteLine("Left" + "=" + (Screen.PrimaryScreen.WorkingArea.Width - DEFAULT_WINDOW_WIDTH) / 2);
                        writer.WriteLine("Width" + "=" + DEFAULT_WINDOW_WIDTH);
                        writer.WriteLine("Height" + "=" + DEFAULT_WINDOW_HEIGHT);
                    }
                    else
                    {
                        writer.WriteLine("Top" + "=" + this.Top);
                        writer.WriteLine("Left" + "=" + this.Left);
                        writer.WriteLine("Width" + "=" + this.Width);
                        writer.WriteLine("Height" + "=" + this.Height);
                    }
                    writer.WriteLine("DrawingWidth" + "=" + Drawing.WIDTH);
                    writer.WriteLine("DrawingHeight" + "=" + Drawing.HEIGHT);
                    writer.WriteLine("InformationBoxTop" + "=" + m_information_box_top);
                    writer.WriteLine("InformationPageIndex" + "=" + m_information_page_index);
                    writer.WriteLine("TranslationBoxWidth" + "=" + m_translation_box_width);
                    writer.WriteLine("Translator" + "=" + this.TranslatorComboBox.SelectedIndex);
                    writer.WriteLine("Translators" + "=" + this.TranslatorsComboBox.SelectedIndex);
                    writer.WriteLine("ShowAllTranslations" + "=" + m_show_all_translations);
                    writer.WriteLine("Tafseer" + "=" + this.TafseerComboBox.SelectedIndex);
                    writer.WriteLine("SymmetryType" + "=" + this.SymmetryTypeComboBox.SelectedIndex);
                    writer.WriteLine("SymmetryIncludeBoundaryCases" + "=" + m_symmetry_include_boundary_cases);
                    writer.WriteLine("CVWLSequenceType" + "=" + this.CVWLSequenceTypeComboBox.SelectedIndex);
                    writer.WriteLine("CVWLSequenceDirection" + "=" + m_cvwl_sequence_right_to_left);
                    writer.WriteLine("CVWLSequenceShowFactors" + "=" + m_cvwl_sequence_show_factors);
                    writer.WriteLine("ValuesSequenceRadix" + "=" + m_values_sequence_radix);
                    writer.WriteLine("ValuesSequenceScope" + "=" + this.ValuesSequenceScopeComboBox.SelectedIndex);
                    writer.WriteLine("ValuesSequenceDirection" + "=" + m_values_sequence_right_to_left);
                    writer.WriteLine("DNASequenceSystem" + "=" + this.DNASequenceSystemComboBox.SelectedIndex);
                    writer.WriteLine("DNASequenceDirection" + "=" + m_dna_sequence_right_to_left);
                    writer.WriteLine();

                    writer.WriteLine("[Numbers]");
                    writer.WriteLine("Radix" + "=" + m_radix);
                    writer.WriteLine("GlobalDivisor" + "=" + m_divisor);
                    writer.WriteLine("TotalChapterCounts" + "=" + m_total_chapter_counts);
                    if (m_client.NumerologySystem != null)
                    {
                        writer.WriteLine("NumerologySystem" + "=" + m_client.NumerologySystem.Name);
                        writer.WriteLine("NumerologySystemScope" + "=" + m_client.NumerologySystemScope.ToString());
                        writer.WriteLine("AddToLetterLNumber" + "=" + m_client.NumerologySystem.AddToLetterLNumber.ToString());
                        writer.WriteLine("AddToLetterWNumber" + "=" + m_client.NumerologySystem.AddToLetterWNumber.ToString());
                        writer.WriteLine("AddToLetterVNumber" + "=" + m_client.NumerologySystem.AddToLetterVNumber.ToString());
                        writer.WriteLine("AddToLetterCNumber" + "=" + m_client.NumerologySystem.AddToLetterCNumber.ToString());
                        writer.WriteLine("AddToLetterLDistance" + "=" + m_client.NumerologySystem.AddToLetterLDistance.ToString());
                        writer.WriteLine("AddToLetterWDistance" + "=" + m_client.NumerologySystem.AddToLetterWDistance.ToString());
                        writer.WriteLine("AddToLetterVDistance" + "=" + m_client.NumerologySystem.AddToLetterVDistance.ToString());
                        writer.WriteLine("AddToLetterCDistance" + "=" + m_client.NumerologySystem.AddToLetterCDistance.ToString());
                        writer.WriteLine("AddToWordWNumber" + "=" + m_client.NumerologySystem.AddToWordWNumber.ToString());
                        writer.WriteLine("AddToWordVNumber" + "=" + m_client.NumerologySystem.AddToWordVNumber.ToString());
                        writer.WriteLine("AddToWordCNumber" + "=" + m_client.NumerologySystem.AddToWordCNumber.ToString());
                        writer.WriteLine("AddToWordWDistance" + "=" + m_client.NumerologySystem.AddToWordWDistance.ToString());
                        writer.WriteLine("AddToWordVDistance" + "=" + m_client.NumerologySystem.AddToWordVDistance.ToString());
                        writer.WriteLine("AddToWordCDistance" + "=" + m_client.NumerologySystem.AddToWordCDistance.ToString());
                        writer.WriteLine("AddToVerseVNumber" + "=" + m_client.NumerologySystem.AddToVerseVNumber.ToString());
                        writer.WriteLine("AddToVerseCNumber" + "=" + m_client.NumerologySystem.AddToVerseCNumber.ToString());
                        writer.WriteLine("AddToVerseVDistance" + "=" + m_client.NumerologySystem.AddToVerseVDistance.ToString());
                        writer.WriteLine("AddToVerseCDistance" + "=" + m_client.NumerologySystem.AddToVerseCDistance.ToString());
                        writer.WriteLine("AddToChapterCNumber" + "=" + m_client.NumerologySystem.AddToChapterCNumber.ToString());
                    }
                    writer.WriteLine("MathsDivisor" + "=" + m_maths_divisor);
                    writer.WriteLine("MathsUpdateGlobalDivisor" + "=" + m_maths_update_global_divisor);
                    writer.WriteLine("ChapterNumberScope" + "=" + m_chapter_number_scope);
                    writer.WriteLine("VerseNumberScope" + "=" + m_verse_number_scope);
                    writer.WriteLine("WordNumberScope" + "=" + m_word_number_scope);
                    writer.WriteLine("DistancesRunningChapterNumberScope" + "=" + m_distances_running_chapter_number_scope);
                    writer.WriteLine("DistancesRunningVerseNumberScope" + "=" + m_distances_running_verse_number_scope);
                    writer.WriteLine("DistancesRunningWordNumberScope" + "=" + m_distances_running_word_number_scope);
                    writer.WriteLine("DistancesDivisor" + "=" + m_distances_divisor);
                    writer.WriteLine("DistancesUpdateGlobalDivisor" + "=" + m_distances_update_global_divisor);
                    writer.WriteLine();

                    writer.WriteLine("[Text]");
                    writer.WriteLine("WithBismAllah" + "=" + m_with_bism_Allah);
                    writer.WriteLine("WawAsWord" + "=" + m_waw_as_word);
                    writer.WriteLine("ShaddaAsLetter" + "=" + m_shadda_as_letter);
                    writer.WriteLine("ChapterSortMethod" + "=" + m_chapter_sort_method);
                    writer.WriteLine("ChapterSortOrder" + "=" + m_chapter_sort_order);
                    writer.WriteLine("PinChapter1" + "=" + m_pin_chapter1);
                    writer.WriteLine();

                    writer.WriteLine("[Display]");
                    writer.WriteLine("MainTextWordWrap" + "=" + m_word_wrap_main_textbox);
                    writer.WriteLine("SearchResultWordWrap" + "=" + m_word_wrap_search_textbox);
                    if (m_client != null)
                    {
                        if (m_client.Selection != null)
                        {
                            writer.WriteLine("SelectionScope" + "=" + (int)m_client.Selection.Scope);
                            StringBuilder str = new StringBuilder("SelectionIndexes=");
                            if (m_client.Selection.Indexes.Count > 0)
                            {
                                foreach (int index in m_client.Selection.Indexes)
                                {
                                    str.Append((index + 1).ToString() + "+");
                                }
                                if (str.Length > 1)
                                {
                                    str.Remove(str.Length - 1, 1);
                                }
                            }
                            writer.WriteLine(str);
                        }
                    }

                    writer.WriteLine("QuranFont" + "=" + font_converter.ConvertToString(m_quran_font));
                    writer.WriteLine("TranslationFont" + "=" + font_converter.ConvertToString(m_translation_font));
                    writer.WriteLine("TranslationColor" + "=" + color_converter.ConvertToString(m_translation_color));
                    writer.WriteLine("TextZoomFactor" + "=" + m_text_zoom_factor);
                    writer.WriteLine();

                    writer.WriteLine("[Audio]");
                    writer.WriteLine("Reciter" + "=" + this.ReciterComboBox.SelectedIndex);
                    writer.WriteLine("Volume" + "=" + m_audio_volume);
                    writer.WriteLine("VerseRepetitions" + "=" + m_player_looping_count);
                    writer.WriteLine("VerseRepetitionsEnabled" + "=" + m_player_looping);
                    writer.WriteLine("SelectionRepetitions" + "=" + m_player_looping_all_count);
                    writer.WriteLine("SelectionRepetitionsEnabled" + "=" + m_player_looping_all);
                    writer.WriteLine("SilenceBetweenVerses" + "=" + m_silence_between_verses);
                    writer.WriteLine("SilenceBetweenSelections" + "=" + m_silence_between_selections);
                    writer.WriteLine();

                    writer.WriteLine("[Downloads]");
                    writer.WriteLine("TranslationUrlPrefix" + "=" + TranslationInfo.UrlPrefix);
                    writer.WriteLine("TranslationFileType" + "=" + TranslationInfo.FileType);
                    writer.WriteLine("TranslationIconUrlPrefix" + "=" + TranslationInfo.IconUrlPrefix);
                    writer.WriteLine("RecitationUrlPrefix" + "=" + RecitationInfo.UrlPrefix);
                    writer.WriteLine("RecitationFileType" + "=" + RecitationInfo.FileType);
                    writer.WriteLine();

                    writer.WriteLine("[Folders]");
                    writer.WriteLine("NumbersFolder=" + Globals.NUMBERS_FOLDER);
                    writer.WriteLine("FontsFolder=" + Globals.FONTS_FOLDER);
                    writer.WriteLine("ImagesFolder=" + Globals.IMAGES_FOLDER);
                    writer.WriteLine("DataFolder=" + Globals.DATA_FOLDER);
                    writer.WriteLine("AudioFolder=" + Globals.AUDIO_FOLDER);
                    writer.WriteLine("TranslationsFolder=" + Globals.TRANSLATIONS_FOLDER);
                    writer.WriteLine("TafseersFolder=" + Globals.TAFSEERS_FOLDER);
                    writer.WriteLine("RulesFolder=" + Globals.RULES_FOLDER);
                    writer.WriteLine("ValuesFolder=" + Globals.VALUES_FOLDER);
                    writer.WriteLine("StatisticsFolder=" + Globals.STATISTICS_FOLDER);
                    writer.WriteLine("ResearchFolder=" + Globals.RESEARCH_FOLDER);
                    writer.WriteLine("DrawingsFolder=" + Globals.DRAWINGS_FOLDER);
                    writer.WriteLine("BookmarksFolder=" + Globals.BOOKMARKS_FOLDER);
                    writer.WriteLine("HistoryFolder=" + Globals.HISTORY_FOLDER);
                    writer.WriteLine("HelpFolder=" + Globals.HELP_FOLDER);
                }
            }
        }
        catch
        {
            // silence IO errors in case running from read-only media (CD/DVD)
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region ToolTips
    ///////////////////////////////////////////////////////////////////////////////
    private void SetupToolTips()
    {
        this.ToolTip.SetToolTip(this.WebsiteLinkLabel, "ٱللَّهُمَّ صَلِّ عَلَىٰ مُحَمَّدٍ وَءَالِ مُحَمَّدٍ");
        this.ToolTip.SetToolTip(this.PlayerPreviousLabel, "Previous verse");
        this.ToolTip.SetToolTip(this.PlayerPlayLabel, "Play");
        this.ToolTip.SetToolTip(this.PlayerNextLabel, "Next verse");
        this.ToolTip.SetToolTip(this.PlayerStopLabel, "Stop");
        this.ToolTip.SetToolTip(this.PlayerRepeatLabel, "Repeat verse");
        this.ToolTip.SetToolTip(this.PlayerRepeatAllLabel, "Repeat selection");
        this.ToolTip.SetToolTip(this.PlayerRepeatCounterLabel, "Verse repetitions");
        this.ToolTip.SetToolTip(this.PlayerRepeatAllCounterLabel, "Selection repetitions");
        this.ToolTip.SetToolTip(this.PlayerMuteLabel, "Mute");
        this.ToolTip.SetToolTip(this.PlayerVerseSilenceGapTrackBar, "Silence between verses");
        this.ToolTip.SetToolTip(this.PlayerSelectionSilenceGapTrackBar, "Silence between selections");
        this.ToolTip.SetToolTip(this.VerseByVerseNumberLabel, "Go to verse number = current value");
        this.ToolTip.SetToolTip(this.VerseByLetterNumberLabel, "Go to verse with letter number = current value");
        this.ToolTip.SetToolTip(this.VerseByWordNumberLabel, "Go to verse with word number = current value");
        this.ToolTip.SetToolTip(this.UndoValueNavigationLabel, "Back");
        this.ToolTip.SetToolTip(this.RedoValueNavigationLabel, "Forward");
        this.ToolTip.SetToolTip(this.TextModeComboBox, "Letter simplification system\r\nنظام تبسيط الحروف");
        this.ToolTip.SetToolTip(this.NumerologySystemComboBox, "Letter valuation system\r\nنظام تقييم الحروف");
        this.ToolTip.SetToolTip(this.ChaptersTextBox, "Chapters in selection\r\nعدد السور");
        this.ToolTip.SetToolTip(this.VersesTextBox, "Verses in selection\r\nعدد الءايات");
        this.ToolTip.SetToolTip(this.WordsTextBox, "Words in selection\r\nعدد الكلمات");
        this.ToolTip.SetToolTip(this.LettersTextBox, "Letters in selection\r\nعدد الحروف");
        this.ToolTip.SetToolTip(this.DecimalChaptersTextBox, "Chapters in selection\r\nعدد السور");
        this.ToolTip.SetToolTip(this.DecimalVersesTextBox, "Verses in selection\r\nعدد الءايات");
        this.ToolTip.SetToolTip(this.DecimalWordsTextBox, "Words in selection\r\nعدد الكلمات");
        this.ToolTip.SetToolTip(this.DecimalLettersTextBox, "Letters in selection\r\nعدد الحروف");
        this.ToolTip.SetToolTip(this.ChapterNumberSumTextBox, "Sum of chapter numbers\r\nمجموع أرقام االسور");
        this.ToolTip.SetToolTip(this.VerseNumberSumTextBox, "Sum of verse numbers in their chapters\r\nمجموع أرقام الءايات في سورها");
        this.ToolTip.SetToolTip(this.WordNumberSumTextBox, "Sum of word numbers in their verses\r\nمجموع أرقام الكلمات في ءاياتها");
        this.ToolTip.SetToolTip(this.LetterNumberSumTextBox, "Sum of letter numbers in their words\r\nمجموع أرقام الحروف في كلماتها");
        this.ToolTip.SetToolTip(this.ValueTextBox, "Value of selection\r\nالقيمة حسب نظام تقييم الحروف الحالي");
        this.ToolTip.SetToolTip(this.PrimeFactorsTextBox, "Prime factors of Value\r\nالعوامل الأولية للقيمة");
        this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizeVerseLabel, "in verses");
        this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizeChapterLabel, "in chapters");
        this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizePageLabel, "in pages");
        this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizeStationLabel, "in stations");
        this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizePartLabel, "in parts");
        this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizeGroupLabel, "in groups");
        this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizeHalfLabel, "in group halves");
        this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizeQuarterLabel, "in group quarters");
        this.ToolTip.SetToolTip(this.FindByTextSearchBlockSizeBowingLabel, "in bowings");
        this.ToolTip.SetToolTip(this.FindByTextExactSearchTypeLabel, "find exact word or expression");
        this.ToolTip.SetToolTip(this.FindByTextProximitySearchTypeLabel, "find any/all given words");
        this.ToolTip.SetToolTip(this.FindByTextRootSearchTypeLabel, "find words of given roots");
        this.ToolTip.SetToolTip(this.FindByTextAtChapterAnywhereRadioButton, "find anywhere in chapters");
        this.ToolTip.SetToolTip(this.FindByTextAtChapterStartRadioButton, "find in first verses");
        this.ToolTip.SetToolTip(this.FindByTextAtChapterMiddleRadioButton, "find in middle verses");
        this.ToolTip.SetToolTip(this.FindByTextAtChapterEndRadioButton, "find in last verses");
        this.ToolTip.SetToolTip(this.FindByTextAtVerseAnywhereRadioButton, "find anywhere in verses");
        this.ToolTip.SetToolTip(this.FindByTextAtVerseStartRadioButton, "find in first words");
        this.ToolTip.SetToolTip(this.FindByTextAtVerseMiddleRadioButton, "find in middle words");
        this.ToolTip.SetToolTip(this.FindByTextAtVerseEndRadioButton, "find in last words");
        this.ToolTip.SetToolTip(this.FindByTextAtWordAnywhereRadioButton, "find anywhere in words");
        this.ToolTip.SetToolTip(this.FindByTextAtWordStartRadioButton, "find at the beginning of words");
        this.ToolTip.SetToolTip(this.FindByTextAtWordMiddleRadioButton, "find in the middle of words");
        this.ToolTip.SetToolTip(this.FindByTextAtWordEndRadioButton, "find at the end of words");
        this.ToolTip.SetToolTip(this.FindByTextMultiplicityCheckBox, "find blocks with N repetitions");
        this.ToolTip.SetToolTip(this.FindByTextAllWordsRadioButton, "find verses with all words in any order");
        this.ToolTip.SetToolTip(this.FindByTextAnyWordRadioButton, "find verses with at least one word");
        this.ToolTip.SetToolTip(this.FindBySimilarityCurrentVerseTypeLabel, "find similar verses to the current verse");
        this.ToolTip.SetToolTip(this.FindBySimilarityAllVersesTypeLabel, "find similar verses to all verses in the Quran");
        this.ToolTip.SetToolTip(this.FindBySimilarityPercentageTrackBar, "similarity percentage");
        this.ToolTip.SetToolTip(this.FindBySimilarityTextRadioButton, "verses with similar text");
        this.ToolTip.SetToolTip(this.FindBySimilarityWordsRadioButton, "verses with similar words");
        this.ToolTip.SetToolTip(this.FindBySimilarityFirstHalfRadioButton, "verses with similar first half");
        this.ToolTip.SetToolTip(this.FindBySimilarityLastHalfRadioButton, "verses with similar last half");
        this.ToolTip.SetToolTip(this.FindBySimilarityFirstWordRadioButton, "verses with similar first word");
        this.ToolTip.SetToolTip(this.FindBySimilarityLastWordRadioButton, "verses with similar last word");
        this.ToolTip.SetToolTip(this.PCIndexChainL2RTextBox, "Prime/composite index chain --> P=0 C=1");
        this.ToolTip.SetToolTip(this.PCIndexChainR2LTextBox, "Prime/composite index chain <-- P=0 C=1");
        this.ToolTip.SetToolTip(this.CPIndexChainL2RTextBox, "Prime/composite index chain --> P=1 C=0");
        this.ToolTip.SetToolTip(this.CPIndexChainR2LTextBox, "Prime/composite index chain <-- P=1 C=0");
        this.ToolTip.SetToolTip(this.IndexChainLengthTextBox, "Prime/composite index chain length");
        this.ToolTip.SetToolTip(this.DigitSumTextBox, "Digit sum");
        this.ToolTip.SetToolTip(this.DigitalRootTextBox, "Digital root");
        this.ToolTip.SetToolTip(this.NthNumberTextBox, "Prime index");
        this.ToolTip.SetToolTip(this.NthAdditiveNumberTextBox, "Additive prime index");
        this.ToolTip.SetToolTip(this.NthNonAdditiveNumberTextBox, "Non-additive prime index");
        this.ToolTip.SetToolTip(this.AdjustValueByPositionsLabel, "Dynamic Primalogy System - ©2012 Ali Adams");
        this.ToolTip.SetToolTip(this.ScopeBookRadioButton, "Use letters of the whole book to re-build the valuation system");
        this.ToolTip.SetToolTip(this.ScopeSelectionRadioButton, "Use letters of current selection to re-build the valuation system");
        this.ToolTip.SetToolTip(this.ScopeHighlightedTextRadioButton, "Use letters of current line or highlighted text to re-build the valuation system");
        this.ToolTip.SetToolTip(this.AddToLetterLNumberCheckBox, "Increment each letter's value by its letter number in word");
        this.ToolTip.SetToolTip(this.AddToLetterWNumberCheckBox, "Increment each letter's value by its word number in verse");
        this.ToolTip.SetToolTip(this.AddToLetterVNumberCheckBox, "Increment each letter's value by its verse number in chapter");
        this.ToolTip.SetToolTip(this.AddToLetterCNumberCheckBox, "Increment each letter's value by its chapter number in book");
        this.ToolTip.SetToolTip(this.AddToLetterLDistanceCheckBox, "Increment each letter's value by the number of letters back to the same letter");
        this.ToolTip.SetToolTip(this.AddToLetterWDistanceCheckBox, "Increment each letter's value by the number of words back to the same letter");
        this.ToolTip.SetToolTip(this.AddToLetterVDistanceCheckBox, "Increment each letter's value by the number of verses back to the same letter");
        this.ToolTip.SetToolTip(this.AddToLetterCDistanceCheckBox, "Increment each letter's value by the number of chapters back to the same letter");
        this.ToolTip.SetToolTip(this.AddToWordWNumberCheckBox, "Increment each word's value by its word number in verse");
        this.ToolTip.SetToolTip(this.AddToWordVNumberCheckBox, "Increment each word's value by its verse number in chapter");
        this.ToolTip.SetToolTip(this.AddToWordCNumberCheckBox, "Increment each word's value by its chapter number in book");
        this.ToolTip.SetToolTip(this.AddToWordWDistanceCheckBox, "Increment each word's value by the number of words back to the same word");
        this.ToolTip.SetToolTip(this.AddToWordVDistanceCheckBox, "Increment each word's value by the number of verses back to the same word");
        this.ToolTip.SetToolTip(this.AddToWordCDistanceCheckBox, "Increment each word's value by the number of chapters back to the same word");
        this.ToolTip.SetToolTip(this.AddToVerseVNumberCheckBox, "Increment each verse's value by its verse number in chapter");
        this.ToolTip.SetToolTip(this.AddToVerseCNumberCheckBox, "Increment each verse's value by its chapter number in book");
        this.ToolTip.SetToolTip(this.AddToVerseVDistanceCheckBox, "Increment each verse's value by the number of verses back to the same verse");
        this.ToolTip.SetToolTip(this.AddToVerseCDistanceCheckBox, "Increment each verse's value by the number of chapters back to the same verse");
        this.ToolTip.SetToolTip(this.AddToChapterCNumberCheckBox, "Increment each chapter's value by its chapter number in book");
        this.ToolTip.SetToolTip(this.ChapterComboBox, "C, C-C, C:V, C:V-C, C-C:V, C:V-C:V or any combination" + "\r\n" + "36  40-46  15:87  18:9-25  1-2:5  24:35-27:62  2:29,41:9-12");
        this.ToolTip.SetToolTip(this.ChapterVerseNumericUpDown, "ءاية" + "\r\n" + "V, V-V, ...");
        this.ToolTip.SetToolTip(this.ChapterWordNumericUpDown, "كلمة" + "\r\n" + "W, W-W, ...");
        this.ToolTip.SetToolTip(this.ChapterLetterNumericUpDown, "حرف" + "\r\n" + "L, L-L, ...");
        this.ToolTip.SetToolTip(this.PartNumericUpDown, "جزء" + "\r\n" + "P, P-P, ...");
        this.ToolTip.SetToolTip(this.PageNumericUpDown, "صفحة" + "\r\n" + "P, P-P, ...");
        this.ToolTip.SetToolTip(this.StationNumericUpDown, "منزل" + "\r\n" + "S, S-S, ...");
        this.ToolTip.SetToolTip(this.GroupNumericUpDown, "حزب" + "\r\n" + "G, G-G, ...");
        this.ToolTip.SetToolTip(this.HalfNumericUpDown, "نصف حزب" + "\r\n" + "H, H-H, ...");
        this.ToolTip.SetToolTip(this.QuarterNumericUpDown, "ربع حزب" + "\r\n" + "Q, Q-Q, ...");
        this.ToolTip.SetToolTip(this.BowingNumericUpDown, "ركوع" + "\r\n" + "B, B-B, ...");
        this.ToolTip.SetToolTip(this.VerseNumericUpDown, "ءاية" + "\r\n" + "V, V-V, ...");
        this.ToolTip.SetToolTip(this.WordNumericUpDown, "كلمة" + "\r\n" + "W, W-W, ...");
        this.ToolTip.SetToolTip(this.LetterNumericUpDown, "حرف" + "\r\n" + "L, L-L, ...");
        this.ToolTip.SetToolTip(this.SearchScopeBookLabel, "Search in entire book  إبحث في الكتاب");
        this.ToolTip.SetToolTip(this.SearchScopeSelectionLabel, "Search in current selection  إبحث في النص المعروض");
        this.ToolTip.SetToolTip(this.SearchScopeResultLabel, "Search in current search result  إبحث في النتائج");
        this.ToolTip.SetToolTip(this.FindByTextTextBox, "text to search for in Arabic or any installed language");
        this.ToolTip.SetToolTip(this.FindByTextWordnessCheckBox, "find verses with whole word only");
        this.ToolTip.SetToolTip(this.FindByTextCaseSensitiveCheckBox, "case sensitive for non-Arabic languages");
        this.ToolTip.SetToolTip(this.FindByNumbersResultTypeWordsLabel, "find words within verses");
        this.ToolTip.SetToolTip(this.FindByNumbersResultTypeSentencesLabel, "find sentences across verses");
        this.ToolTip.SetToolTip(this.FindByNumbersResultTypeVersesLabel, "find verses");
        this.ToolTip.SetToolTip(this.FindByNumbersResultTypeChaptersLabel, "find chapters");
        this.ToolTip.SetToolTip(this.FindByFrequencyResultTypeWordsLabel, "find words within verses");
        this.ToolTip.SetToolTip(this.FindByFrequencyResultTypeSentencesLabel, "find sentences across verses");
        this.ToolTip.SetToolTip(this.FindByFrequencyResultTypeVersesLabel, "find verses");
        this.ToolTip.SetToolTip(this.FindByFrequencyResultTypeChaptersLabel, "find chapters");
        this.ToolTip.SetToolTip(this.FindByFrequencySearchTypeDuplicateLettersLabel, "include duplicate phrase letters");
        this.ToolTip.SetToolTip(this.FindByFrequencySearchTypeUniqueLettersLabel, "exclude duplicate phrase letters");
        this.ToolTip.SetToolTip(this.ValueNavigatorLinkLabel, "©2009 Aminreza Ebrahimi Saba");
    }
    private void InitializeControls()
    {
        VersionLabel.Text = " " + Globals.SHORT_VERSION;

        RegisterContextMenu(MainTextBox);
        RegisterContextMenu(SearchResultTextBox);
        RegisterContextMenu(TranslationTextBox);
        RegisterContextMenu(TranslationsTextBox);
        RegisterContextMenu(RelatedWordsTextBox);
        RegisterContextMenu(GrammarTextBox);
        RegisterContextMenu(VerbFormsTextBox);
        RegisterContextMenu(SymmetryTextBox);
        RegisterContextMenu(CVWLSequenceTextBox);
        RegisterContextMenu(ValuesSequenceTextBox);
        RegisterContextMenu(DNASequenceTextBox);
        RegisterContextMenu(UserTextTextBox);
        RegisterContextMenu(FindByTextTextBox);
        RegisterContextMenu(ValueTextBox);
        RegisterContextMenu(NthNumberTextBox);
        RegisterContextMenu(NthAdditiveNumberTextBox);
        RegisterContextMenu(NthNonAdditiveNumberTextBox);
        RegisterContextMenu(FindByFrequencyPhraseTextBox);

        SetupToolTips();
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region ContextMenu
    ///////////////////////////////////////////////////////////////////////////////
    private string m_clipboard_text = null;
    private string RemovePunctuationMarks(string text)
    {
        if (!String.IsNullOrEmpty(text))
        {
            if (m_language_type == LanguageType.LeftToRight)
            {
                text = text.Replace(".", "");
                text = text.Replace(",", "");
                text = text.Replace(";", "");
                text = text.Replace(":", "");
                text = text.Replace("?", "");
                text = text.Replace("/", "");
                text = text.Replace(")", "");
                text = text.Replace("(", "");
                text = text.Replace(">", "");
                text = text.Replace("<", "");
                text = text.Replace("[", "");
                text = text.Replace("]", "");
                text = text.Replace("{", "");
                text = text.Replace("}", "");
                text = text.Replace("-", "");
                text = text.Replace("\"", "");
                text = text.Replace("\'", "");
                text = text.Replace("!", "");
                text = text.Replace("`", "");
                text = text.Replace("@", "");
                text = text.Replace("#", "");
                text = text.Replace("$", "");
                text = text.Replace("%", "");
                text = text.Replace("^", "");
                text = text.Replace("&", "");
                text = text.Replace("|", "");
                text = text.Replace("*", "");
                text = text.Replace("=", "");
            }
        }
        return text;
    }
    private void SimplifyClipboardTextBeforePaste()
    {
        m_clipboard_text = Clipboard.GetText(TextDataFormat.UnicodeText);
        if ((m_clipboard_text != null) && (m_clipboard_text.Length > 0))
        {
            if (m_client != null)
            {
                if (m_client.NumerologySystem != null)
                {
                    string text = m_clipboard_text.SimplifyTo(m_client.NumerologySystem.TextMode);
                    if ((text != null) && (m_clipboard_text.Length > 0))
                    {
                        Clipboard.SetText(text, TextDataFormat.UnicodeText);
                    }
                }
            }
        }
    }
    private void RestoreClipboardTextAfterPaste()
    {
        if ((m_clipboard_text != null) && (m_clipboard_text.Length > 0))
        {
            Clipboard.SetText(m_clipboard_text, TextDataFormat.UnicodeText);
        }
    }
    private void MenuItem_Undo(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                if (((sender as MenuItem).Parent as ContextMenu).SourceControl is TextBoxBase)
                {
                    (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase).Undo();
                }
            }
        }
    }
    private void MenuItem_Cut(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                if (((sender as MenuItem).Parent as ContextMenu).SourceControl is TextBoxBase)
                {
                    (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase).Cut();
                }
            }
        }
    }
    private void MenuItem_Copy(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                if (((sender as MenuItem).Parent as ContextMenu).SourceControl is TextBoxBase)
                {
                    TextBoxBase control = (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase);

                    if (control.SelectionLength == 0)
                    {
                        List<Verse> selected_verses = GetCurrentVerses();
                        if (selected_verses != null)
                        {
                            StringBuilder str = new StringBuilder();
                            foreach (Verse verse in selected_verses)
                            {
                                str.AppendLine(verse.Chapter.Name + "\t" + verse.Address + "\t" + verse.Text);
                            }
                            Clipboard.SetText(str.ToString());
                            Thread.Sleep(100); // must give chance for Clipboard to refresh its content before Paste
                        }
                    }
                    else
                    {
                        (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase).Copy();
                    }
                }
            }
        }
    }
    private void MenuItem_Paste(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                if (((sender as MenuItem).Parent as ContextMenu).SourceControl is TextBoxBase)
                {
                    SimplifyClipboardTextBeforePaste();
                    Thread.Sleep(100); // must give chance for Clipboard to refresh its content before Paste
                    (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase).Paste();
                    RestoreClipboardTextAfterPaste();
                }
            }
        }
    }
    private void MenuItem_SelectAll(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                if (((sender as MenuItem).Parent as ContextMenu).SourceControl is TextBoxBase)
                {
                    (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase).SelectAll();
                    (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase).KeyDown += new KeyEventHandler(TextBox_KeyDown);
                }
            }
        }
    }
    private void MenuItem_GenerateSentences(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                if (((sender as MenuItem).Parent as ContextMenu).SourceControl is TextBoxBase)
                {
                    TextBoxBase control = (((sender as MenuItem).Parent as ContextMenu).SourceControl as TextBoxBase);

                    if (control.SelectionLength > 0)
                    {
                        GenerateAnagrams();
                    }
                }
            }
        }
    }
    private void MenuItem_RelatedWords(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                Control control = ((sender as MenuItem).Parent as ContextMenu).SourceControl;
                if ((control == MainTextBox) || (control == SearchResultTextBox))
                {
                    DoFindRelatedWords(control);
                }
            }
        }
    }
    private void MenuItem_RelatedVerses(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                Control control = ((sender as MenuItem).Parent as ContextMenu).SourceControl;
                if ((control == MainTextBox) || (control == SearchResultTextBox))
                {
                    DoFindRelatedVerses(control);
                }
            }
        }
    }
    private void MenuItem_SameText(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                Control control = ((sender as MenuItem).Parent as ContextMenu).SourceControl;
                if ((control == MainTextBox) || (control == SearchResultTextBox))
                {
                    DoFindSameText(control);
                }
            }
        }
    }
    private void MenuItem_SameVerses(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                Control control = ((sender as MenuItem).Parent as ContextMenu).SourceControl;
                if ((control == MainTextBox) || (control == SearchResultTextBox))
                {
                    DoFindSameVerses(control);
                }
            }
        }
    }
    private void MenuItem_SameHarakat(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                Control control = ((sender as MenuItem).Parent as ContextMenu).SourceControl;
                if ((control == MainTextBox) || (control == SearchResultTextBox))
                {
                    DoFindSameHarakat(control);
                }
            }
        }
    }
    private void MenuItem_SameValue(object sender, EventArgs e)
    {
        if (sender is MenuItem)
        {
            if ((sender as MenuItem).Parent is ContextMenu)
            {
                Control control = ((sender as MenuItem).Parent as ContextMenu).SourceControl;
                if ((control == MainTextBox) || (control == SearchResultTextBox))
                {
                    DoFindSameValue(control);
                }
            }
        }
    }
    private void DoFindSameHarakat(object sender)
    {
        if (sender is TextBoxBase)
        {
            string text = (sender as TextBoxBase).SelectedText.Trim();
            if (text.Length == 0) // no selection, get word under mouse pointer
            {
                m_clicked_word = GetWordAtCursor();
                if (m_clicked_word == null)
                {
                    return;
                }
                text = m_clicked_word.Text;
            }

            DoFindSameHarakat(text);
        }
    }
    private void DoFindSameHarakat(string text)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                ClearFindMatches();

                m_client.FindPhrases(TextSearchBlockSize.Verse, text, LanguageType.RightToLeft, null, TextLocationInChapter.Anywhere, TextLocationInVerse.Anywhere, TextLocationInWord.Anywhere, TextWordness.Any, false, true, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                if (m_client.FoundPhrases != null)
                {
                    int phrase_count = GetPhraseCount(m_client.FoundPhrases);
                    if (m_client.FoundVerses != null)
                    {
                        int verse_count = m_client.FoundVerses.Count;
                        m_find_result_header = phrase_count + " matches in " + verse_count + ((verse_count == 1) ? " verse" : " verses") + " with " + text + " anywhere " + " in " + m_client.SearchScope.ToString();
                        DisplayFoundVerses(true, true);

                        SearchResultTextBox.Focus();
                        SearchResultTextBox.Refresh();
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DoFindRelatedWords(object sender)
    {
        if (sender is TextBoxBase)
        {
            string text = (sender as TextBoxBase).SelectedText.Trim();
            if (text.Length == 0) // no selection, get word under mouse pointer
            {
                m_clicked_word = GetWordAtCursor();
                if (m_clicked_word == null)
                {
                    return;
                }
                text = m_clicked_word.Text;
            }

            DoFindRelatedWords(text);
        }
    }
    private void DoFindRelatedWords(string text)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                ClearFindMatches();

                FindByTextTextBox.Text = text;
                FindByTextTextBox.Refresh();

                FindByRoot(text);
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DoFindRelatedVerses(object sender)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            m_search_type = SearchType.Similarity;

            if (m_client != null)
            {
                ClearFindMatches();

                Verse verse = GetCurrentVerse();
                if (verse != null)
                {
                    if (verse.Chapter != null)
                    {
                        m_client.FindRelatedVerses(verse);
                        if (m_client.FoundVerses != null)
                        {
                            string text = " to verse " + verse.Chapter.Name + " " + verse.NumberInChapter + " ";
                            int verse_count = m_client.FoundVerses.Count;
                            m_find_result_header = verse_count + ((verse_count == 1) ? " verse" : " verses") + " with " + "similar words" + text + " in " + m_client.SearchScope.ToString();

                            DisplayFoundVerses(true, true);

                            SearchResultTextBox.Focus();
                            SearchResultTextBox.Refresh();
                        }
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DoFindSameText(object sender)
    {
        if (sender is TextBoxBase)
        {
            string text = (sender as TextBoxBase).SelectedText.Trim();
            if (text.Length == 0) // no selection, get word under mouse pointer
            {
                m_clicked_word = GetWordAtCursor();
                if (m_clicked_word == null)
                {
                    return;
                }
                text = m_clicked_word.Text;
            }

            DoFindSameText(text);
        }
    }
    private void DoFindSameText(string text)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                ClearFindMatches();

                m_client.FindPhrases(TextSearchBlockSize.Verse, text, LanguageType.RightToLeft, null, TextLocationInChapter.Anywhere, TextLocationInVerse.Anywhere, TextLocationInWord.Anywhere, TextWordness.WholeWord, false, false, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                if (m_client.FoundPhrases != null)
                {
                    int phrase_count = GetPhraseCount(m_client.FoundPhrases);
                    if (m_client.FoundVerses != null)
                    {
                        int verse_count = m_client.FoundVerses.Count;
                        m_find_result_header = phrase_count + " matches in " + verse_count + ((verse_count == 1) ? " verse" : " verses") + " with " + text + " anywhere " + " in " + m_client.SearchScope.ToString();
                        DisplayFoundVerses(true, true);

                        SearchResultTextBox.Focus();
                        SearchResultTextBox.Refresh();
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DoFindSameVerses(object sender)
    {
        if (sender is TextBoxBase)
        {
            Verse verse = GetVerseAtCursor();
            if (verse != null)
            {
                DoFindSameText(verse.Text);
            }
        }
    }
    private void DoFindSameValue(object sender)
    {
        if (sender is TextBoxBase)
        {
            if (m_client != null)
            {
                long value = 0L;
                if ((sender as TextBoxBase).SelectionLength > 0)
                {
                    try
                    {
                        value = long.Parse(ValueTextBox.Text);
                    }
                    catch
                    {
                        // leave value = 0L
                    }
                }
                else
                {
                    Verse verse = GetVerseAtCursor();
                    if (verse != null)
                    {
                        value = m_client.CalculateValue(verse);
                    }
                    else
                    {
                        // leave value = 0L
                    }
                }
                DoFindSameValue(value);
            }
        }
    }
    private void DoFindSameValue(long value)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                ClearFindMatches();

                List<Verse> verses = new List<Verse>();
                List<Phrase> phrases = new List<Phrase>();
                string text = "value" + "" + "=" + value.ToString();

                NumberQuery query = new NumberQuery();
                query.Value = value;
                query.WithinVerses = true;

                int match_count = m_client.FindWordRanges(query);
                if (match_count > 0)
                {
                    if (m_client.FoundPhrases != null)
                    {
                        phrases.InsertRange(0, new List<Phrase>(m_client.FoundPhrases));
                    }
                }

                if (m_client.FoundVerses != null)
                {
                    m_client.FoundPhrases = phrases;
                    m_find_result_header = match_count + ((match_count == 1) ? " match" : " matches") + " in " + m_client.FoundVerses.Count + ((m_client.FoundVerses.Count == 1) ? " verse" : " verses") + " with " + text + " in " + m_client.SearchScope.ToString();
                    DisplayFoundVerses(true, true);

                    SearchResultTextBox.Focus();
                    SearchResultTextBox.Refresh();
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    public static List<Verse> GetVerses(List<Phrase> phrases)
    {
        List<Verse> result = new List<Verse>();
        if (phrases != null)
        {
            foreach (Phrase phrase in phrases)
            {
                if (phrase != null)
                {
                    if (!result.Contains(phrase.Verse))
                    {
                        result.Add(phrase.Verse);
                    }
                }
            }
        }
        return result;
    }
    private void RegisterContextMenu(TextBoxBase control)
    {
        ContextMenu ContextMenu = new ContextMenu();
        if ((control != MainTextBox) && (control != SearchResultTextBox))
        {
            MenuItem EditUndoMenuItem = new MenuItem("Undo\t\tCtrl+Z");
            EditUndoMenuItem.Click += new EventHandler(MenuItem_Undo);
            ContextMenu.MenuItems.Add(EditUndoMenuItem);

            MenuItem MenuItemSeparator1 = new MenuItem("-");
            ContextMenu.MenuItems.Add(MenuItemSeparator1);

            MenuItem EditCutMenuItem = new MenuItem("Cut\t\tCtrl+X");
            EditCutMenuItem.Click += new EventHandler(MenuItem_Cut);
            ContextMenu.MenuItems.Add(EditCutMenuItem);

            MenuItem EditCopyMenuItem = new MenuItem("Copy\t\tCtrl+C");
            EditCopyMenuItem.Click += new EventHandler(MenuItem_Copy);
            ContextMenu.MenuItems.Add(EditCopyMenuItem);

            MenuItem EditPasteMenuItem = new MenuItem("Paste\t\tCtrl+V");
            EditPasteMenuItem.Click += new EventHandler(MenuItem_Paste);
            ContextMenu.MenuItems.Add(EditPasteMenuItem);

            MenuItem MenuItemSeparator2 = new MenuItem("-");
            ContextMenu.MenuItems.Add(MenuItemSeparator2);

            MenuItem EditSelectAllMenuItem = new MenuItem("Select All\tCtrl+A");
            EditSelectAllMenuItem.Click += new EventHandler(MenuItem_SelectAll);
            ContextMenu.MenuItems.Add(EditSelectAllMenuItem);
        }
        else
        {
            MenuItem EditCopyMenuItem = new MenuItem("Copy\t\tCtrl+C");
            EditCopyMenuItem.Click += new EventHandler(MenuItem_Copy);
            ContextMenu.MenuItems.Add(EditCopyMenuItem);

            MenuItem EditGenerateSentencesMenuItem = new MenuItem("Generate Sentences\t\tCtrl+G");
            EditGenerateSentencesMenuItem.Click += new EventHandler(MenuItem_GenerateSentences);
            ContextMenu.MenuItems.Add(EditGenerateSentencesMenuItem);

            MenuItem MenuItemSeparator1 = new MenuItem("-");
            ContextMenu.MenuItems.Add(MenuItemSeparator1);

            MenuItem FindRelatedWordsMenuItem = new MenuItem("Related Words\tF4");
            FindRelatedWordsMenuItem.Click += new EventHandler(MenuItem_RelatedWords);
            ContextMenu.MenuItems.Add(FindRelatedWordsMenuItem);

            MenuItem FindRelatedVersesMenuItem = new MenuItem("Related Verses\tF5");
            FindRelatedVersesMenuItem.Click += new EventHandler(MenuItem_RelatedVerses);
            ContextMenu.MenuItems.Add(FindRelatedVersesMenuItem);

            MenuItem MenuItemSeparator2 = new MenuItem("-");
            ContextMenu.MenuItems.Add(MenuItemSeparator2);

            MenuItem FindSameTextMenuItem = new MenuItem("Same Text\tF6");
            FindSameTextMenuItem.Click += new EventHandler(MenuItem_SameText);
            ContextMenu.MenuItems.Add(FindSameTextMenuItem);

            MenuItem FindSameHarakatMenuItem = new MenuItem("Same Harakat\tF7");
            FindSameHarakatMenuItem.Click += new EventHandler(MenuItem_SameHarakat);
            ContextMenu.MenuItems.Add(FindSameHarakatMenuItem);

            MenuItem FindSameVersesMenuItem = new MenuItem("Same Verses\tF8");
            FindSameVersesMenuItem.Click += new EventHandler(MenuItem_SameVerses);
            ContextMenu.MenuItems.Add(FindSameVersesMenuItem);

            MenuItem MenuItemSeparator3 = new MenuItem("-");
            ContextMenu.MenuItems.Add(MenuItemSeparator3);

            MenuItem FindSameValueMenuItem = new MenuItem("Same Value\tF9");
            FindSameValueMenuItem.Click += new EventHandler(MenuItem_SameValue);
            ContextMenu.MenuItems.Add(FindSameValueMenuItem);
        }

        ContextMenu.Popup += new EventHandler(ContextMenu_Popup);
        ContextMenu.Collapse += new EventHandler(ContextMenu_Collapse);

        control.ContextMenu = ContextMenu;
    }
    private void ContextMenu_Popup(object sender, EventArgs e)
    {
        if (m_active_textbox != null)
        {
            if (m_active_textbox.SelectionLength == 0)
            {
                m_active_textbox.ContextMenu.MenuItems[0].Text = "Copy Verse\t\tCtrl+C";
                m_active_textbox.ContextMenu.MenuItems[1].Visible = false;
            }
            else
            {
                m_active_textbox.ContextMenu.MenuItems[0].Text = "Copy\t\tCtrl+C";
                m_active_textbox.ContextMenu.MenuItems[1].Visible = true;
            }
        }
    }
    private void ContextMenu_Collapse(object sender, EventArgs e)
    {
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Research
    ///////////////////////////////////////////////////////////////////////////////
    private string m_research_assembly_name = "Research";
    private Assembly m_research_methods_assembly = null;
    private void LoadResearchMethods()
    {
        try
        {
            for (int i = 0; i < 3; i++) ResearchMethodsComboBox.SelectedIndexChanged -= new EventHandler(ResearchMethodsComboBox_SelectedIndexChanged);

            AppDomain domain = AppDomain.CurrentDomain;
            if (domain != null)
            {
                m_research_methods_assembly = domain.Load(m_research_assembly_name);
                if (m_research_methods_assembly != null)
                {
                    Type class_type = m_research_methods_assembly.GetType(m_research_assembly_name);
                    if (class_type != null)
                    {
                        MethodInfo[] method_infos = null;
                        if ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate))
                        {
                            method_infos = class_type.GetMethods(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
                        }
                        else
                        {
                            method_infos = class_type.GetMethods(BindingFlags.Static | BindingFlags.Public);
                        }

                        if (method_infos != null)
                        {
                            ResearchMethodsComboBox.Items.Clear();
                            foreach (MethodInfo method_info in method_infos)
                            {
                                string method_name = method_info.Name;

                                if (method_name.Contains("WordPart"))
                                {
                                    if ((Globals.EDITION != Edition.Grammar) && (Globals.EDITION != Edition.Ultimate))
                                    {
                                        continue; // skip WordPart methods in non-Grammar editions
                                    }
                                }
                                else if (method_name.Contains("FindSystem"))
                                {
                                    if (Globals.EDITION != Edition.Ultimate)
                                    {
                                        continue; // skip FindSystem methods in non-Ultimate editions
                                    }
                                }

                                ParameterInfo[] parameters = method_info.GetParameters();
                                if ((parameters.Length == 3) &&
                                    (parameters[0].ParameterType == typeof(Client)) &&
                                    (parameters[1].ParameterType == typeof(string)) &&
                                    (parameters[2].ParameterType == typeof(bool)))
                                {
                                    ResearchMethodsComboBox.Items.Add(method_name);
                                }
                            }
                        }
                    }

                    if (ResearchMethodsComboBox.Items.Count > 0)
                    {
                        ResearchMethodsComboBox.SelectedItem = "AllahWords";
                        ResearchMethodsComboBox_SelectedIndexChanged(null, null);
                    }
                }
            }
        }
        catch
        {
            // cannot load Research assembly, so just ignore
        }
        finally
        {
            ResearchMethodsComboBox.SelectedIndexChanged += new EventHandler(ResearchMethodsComboBox_SelectedIndexChanged);
        }
    }
    private void RunResearchMethod()
    {
        if (m_client != null)
        {
            if (m_client.Selection != null)
            {
                if (ResearchMethodsComboBox.SelectedIndex > -1)
                {
                    if (ResearchMethodsComboBox.SelectedItem != null)
                    {
                        string method_name = ResearchMethodsComboBox.SelectedItem.ToString();
                        string param = ResearchMethodParameterTextBox.Text;
                        if (!string.IsNullOrEmpty(method_name))
                        {
                            InvokeResearchMethod(method_name, m_client, param, m_found_verses_displayed);
                        }
                    }
                }
            }
        }
    }
    private void InvokeResearchMethod(string method_name, Client client, string param, bool in_search_result)
    {
        try
        {
            if (m_research_methods_assembly != null)
            {
                Type assembly_type = m_research_methods_assembly.GetType(m_research_assembly_name);
                if (assembly_type != null)
                {
                    MethodInfo method_info = assembly_type.GetMethod(method_name, BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);
                    if (method_info != null)
                    {
                        object[] parameters = { client, param, in_search_result };
                        object result = method_info.Invoke(null, parameters);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            while (ex != null)
            {
                //Console.WriteLine(ex.Message);
                MessageBox.Show(ex.Message, Application.ProductName);
                ex = ex.InnerException;
            }
        }
    }
    private void ResearchMethodsComboBox_DropDown(object sender, EventArgs e)
    {
        int height = this.Height - 100;
        if (height < 100) height = 100;
        ResearchMethodsComboBox.DropDownHeight = height;
    }
    private void ResearchMethodsComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ResearchMethodsComboBox.SelectedItem != null)
        {
            string method_name = ResearchMethodsComboBox.SelectedItem.ToString();

            ResearchMethodParameterTextBox.BringToFront();
            if (method_name == "NewResearchMethod")
            {
                ResearchMethodParameterTextBox.Text = "";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "Target");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if ((method_name.Contains("ByX")) || (method_name.Contains("WithX")))
            {
                ResearchMethodParameterTextBox.Text = "7";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "X");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if ((method_name.Contains("ByXY")) || (method_name.Contains("WithXY")))
            {
                ResearchMethodParameterTextBox.Text = "7,29";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "X,Y");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if ((method_name.Contains("ByXYZ")) || (method_name.Contains("WithXYZ")))
            {
                ResearchMethodParameterTextBox.Text = "7,29,139";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "X,Y,Z");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if (method_name.Contains("Sound"))
            {
                ResearchMethodParameterTextBox.Text = "0";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "Hz");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if (method_name.Contains("Pivot"))
            {
                ResearchMethodParameterTextBox.Text = "0";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "pivot");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if (method_name.Contains("Equals"))
            {
                ResearchMethodParameterTextBox.Text = "0";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "to within");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else if (method_name == "LetterFrequencySums")
            {
                ResearchMethodParameterTextBox.Text = "";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, "Phrase");
                ResearchMethodParameterTextBox.Visible = true;
            }
            else // method doesn't need parameters
            {
                ResearchMethodParameterTextBox.Text = "";
                ToolTip.SetToolTip(ResearchMethodParameterTextBox, null);
                ResearchMethodParameterTextBox.Visible = false;
            }

            // must be done at end so we can trim Research methods
            //ToolTip.SetToolTip(ResearchMethodsComboBox, method_name);
        }
    }
    private void ResearchMethodsComboBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            ResearchMethodsRunButton_Click(sender, e);
        }
    }
    private void ResearchMethodParameterTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            ResearchMethodsRunButton_Click(null, null);
        }
    }
    private void ResearchMethodsRunButton_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        this.Cursor = Cursors.WaitCursor;
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (ResearchMethodsComboBox.SelectedItem != null)
            {
                RunResearchMethod();
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region MainTextBox
    ///////////////////////////////////////////////////////////////////////////////
    private float m_text_zoom_factor = DEFAULT_TEXT_ZOOM_FACTOR;
    private float m_graphics_zoom_factor = DEFAULT_GRAPHICS_ZOOM_FACTOR;
    private Point m_previous_location = new Point(0, 0);
    private int m_clicked_chapter_number = 1;
    private int m_clicked_verse_number = 1;
    private int m_clicked_word_number = 1;
    private int m_clicked_letter_number = 1;
    private int m_clicked_chapter_distance = 0;
    private int m_clicked_verse_distance = 0;
    private int m_clicked_word_distance = 0;
    private int m_clicked_letter_distance = 0;
    private void DifferenceStatisticsLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    int previous_chapter_number = m_clicked_chapter_number - m_clicked_chapter_distance;
                    int previous_verse_number = m_clicked_verse_number - m_clicked_verse_distance;
                    int previous_word_number = m_clicked_word_number - m_clicked_word_distance;
                    int previous_letter_number = m_clicked_letter_number - m_clicked_letter_distance;

                    if (((previous_verse_number - 1) >= 0) && ((previous_verse_number - 1) < m_client.Book.Verses.Count))
                    {
                        Verse verse1 = m_client.Book.Verses[previous_verse_number - 1];
                        {
                            if (((m_clicked_verse_number - 1) >= 0) && ((m_clicked_verse_number - 1) < m_client.Book.Verses.Count))
                            {
                                Verse verse2 = m_client.Book.Verses[m_clicked_verse_number - 1];
                                if (verse1 != null)
                                {
                                    if (verse2 != null)
                                    {
                                        string previous_verse_text = verse1.Address + "\t" + verse1.Text;
                                        string current_verse_text = verse2.Address + "\t" + verse2.Text;

                                        StringBuilder str = new StringBuilder();
                                        str.Append(
                                            previous_verse_text +
                                            "\r\n" +
                                            current_verse_text +
                                            "\r\n" +
                                            "\r\n" +
                                            "\tChapter\tVerse\tWord\tLetter" +
                                            "\r\n" +
                                            "From\t" + previous_chapter_number + "\t" + previous_verse_number + "\t" + previous_word_number + "\t" + previous_letter_number +
                                            "\r\n" +
                                            "To\t" + m_clicked_chapter_number + "\t" + m_clicked_verse_number + "\t" + m_clicked_word_number + "\t" + m_clicked_letter_number +
                                            "\r\n" +
                                            "Diff\t" + m_clicked_chapter_distance + "\t" + m_clicked_verse_distance + "\t" + m_clicked_word_distance + "\t" + m_clicked_letter_distance
                                          );
                                        if (str.Length > 0)
                                        {
                                            string result = str.ToString();
                                            string filename = "Distance_" +
                                                            verse1.Chapter.SortedNumber.ToString("000") + verse1.NumberInChapter.ToString("000") +
                                                            "-" +
                                                            verse2.Chapter.SortedNumber.ToString("000") + verse2.NumberInChapter.ToString("000") +
                                                            Globals.OUTPUT_FILE_EXT;
                                            if (Directory.Exists(Globals.STATISTICS_FOLDER))
                                            {
                                                string path = Globals.STATISTICS_FOLDER + "/" + filename;
                                                FileHelper.SaveText(path, result);
                                                FileHelper.DisplayFile(path);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private float m_min_zoom_factor = 0.1F;
    private float m_max_zoom_factor = 2.0F;
    private float m_zoom_factor_increment = 0.1F;
    private float m_error_margin = 0.001F;
    private Font m_quran_font = null;
    private List<Font> m_quran_fonts = null;
    private void InstallFonts()
    {
        if (Directory.Exists(Globals.FONTS_FOLDER))
        {
            BuildFonts(Globals.FONTS_FOLDER);
            PopulateFontComboBox();
        }
    }
    //private void BuildFonts(Assembly resources_assembly)
    //{
    //    if (m_fonts == null)
    //    {
    //        m_fonts = new List<Font>();
    //    }

    //    if (m_fonts != null)
    //    {
    //        m_fonts.Clear();

    //        if (resources_assembly != null)
    //        {
    //            string[] resource_names = resources_assembly.GetManifestResourceNames();
    //            foreach (string resource_name in resource_names)
    //            {
    //                try
    //                {
    //                    Stream font_stream = resources_assembly.GetManifestResourceStream(resource_name);
    //                    Thread.Sleep(100); // time to refresh Windows resources
    //                    if (font_stream != null)
    //                    {
    //                        //string font_name = resource_name.Remove(resource_name.Length - 4, 4);
    //                        //int start = font_name.LastIndexOf(".");
    //                        //font_name = font_name.Substring(start + 1);
    //                        //Font font = FontBuilder.Build(font_stream, font_name, m_main_font.Size * ((font_name.Contains("Mushaf")) ? 1.33F : 1));
    //                        Font font = FontBuilder.Build(font_stream, m_main_font.Name, m_main_font.Size * ((m_main_font.Name.Contains("Mushaf")) ? 1.33F : 1));
    //                        if (font != null)
    //                        {
    //                            m_fonts.Add(font);
    //                        }
    //                    }
    //                }
    //                catch
    //                {
    //                    // skip non-conformant font
    //                }
    //            }
    //        }
    //    }
    //}
    private void BuildFonts(string fonts_folder)
    {
        if (m_quran_fonts == null)
        {
            m_quran_fonts = new List<Font>();
        }

        if (m_quran_fonts != null)
        {
            m_quran_fonts.Clear();

            DirectoryInfo folder = new DirectoryInfo(fonts_folder);
            if (folder != null)
            {
                FileInfo[] files = folder.GetFiles("*.ttf");
                if ((files != null) && (files.Length > 0))
                {
                    foreach (FileInfo file in files)
                    {
                        try
                        {
                            if (!String.IsNullOrEmpty(file.FullName))
                            {
                                Font font = FontBuilder.Build(file.FullName, DEFAULT_QURAN_FONT_SIZE * ((file.Name.Contains("Mushaf")) ? 1.33F : 1));
                                Thread.Sleep(100); // time to refresh Windows resources
                                if (font != null)
                                {
                                    m_quran_fonts.Add(font);
                                }
                            }
                        }
                        catch
                        {
                            // skip non-conformant font
                        }
                    }
                }
            }
        }
    }
    private void PopulateFontComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) FontComboBox.SelectedIndexChanged -= new EventHandler(FontComboBox_SelectedIndexChanged);
            FontComboBox.BeginUpdate();

            if (m_quran_fonts != null)
            {
                FontComboBox.Items.Clear();
                foreach (Font quran_font in m_quran_fonts)
                {
                    FontComboBox.Items.Add(quran_font.Name);
                }
            }
        }
        finally
        {
            FontComboBox.EndUpdate();
            FontComboBox.SelectedIndexChanged += new EventHandler(FontComboBox_SelectedIndexChanged);
        }
    }
    private void FontComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (FontComboBox.SelectedIndex > -1)
        {
            ApplyFont(FontComboBox.SelectedIndex);
        }
    }
    private void FontLabel_Click(object sender, EventArgs e)
    {
        FontComboBox.DroppedDown = true;
    }
    private void ApplyFont(string font_name, float font_size)
    {
        if (m_quran_fonts != null)
        {
            for (int i = 0; i < m_quran_fonts.Count; i++)
            {
                m_quran_font = m_quran_fonts[i];
                if (m_quran_font != null)
                {
                    if (m_quran_font.Name == font_name)
                    {
                        ApplyFont(i);
                        break;
                    }
                }
            }
        }
    }
    private void ApplyFont(int index)
    {
        if (m_quran_fonts != null)
        {
            if ((index >= 0) && (index < m_quran_fonts.Count))
            {
                m_quran_font = m_quran_fonts[index];
                if (m_quran_font != null)
                {
                    try
                    {
                        MainTextBox.BeginUpdate();
                        SearchResultTextBox.BeginUpdate();

                        MainTextBox.Font = m_quran_font;
                        SearchResultTextBox.Font = m_quran_font;
                        // MUST DO IT AGAIN for it to work !!!
                        MainTextBox.Font = m_quran_font;
                        SearchResultTextBox.Font = m_quran_font;
                        // MUST DO IT AGAIN for it to work !!!
                        MainTextBox.Font = m_quran_font;
                        SearchResultTextBox.Font = m_quran_font;
                        // MUST DO IT AGAIN for it to work !!!
                        MainTextBox.Font = m_quran_font;
                        SearchResultTextBox.Font = m_quran_font;
                        // MUST DO IT AGAIN for it to work !!!
                        MainTextBox.Font = m_quran_font;
                        SearchResultTextBox.Font = m_quran_font;

                        MainTextBox.AlignToStart();
                        SearchResultTextBox.AlignToStart();
                        MainTextBox.Refresh();
                        SearchResultTextBox.Refresh();
                    }
                    finally
                    {
                        MainTextBox.EndUpdate();
                        SearchResultTextBox.EndUpdate();
                    }
                }
            }
        }
    }
    private void ApplyTranslationFontAndColor()
    {
        if (m_translation_font != null)
        {
            TranslationTextBox.Font = m_translation_font;
            TranslationTextBox.ForeColor = m_translation_color;
            TranslationTextBox.Refresh();

            if (m_show_all_translations)
            {
                TranslationsTextBox.Font = new Font(DEFAULT_TRANSALTION_FONT_NAME, DEFAULT_TRANSALTION_FONT_SIZE);
                TranslationsTextBox.ForeColor = DEFAULT_TRANSALTION_FONT_COLOR;
            }
            else
            {
                TranslationsTextBox.Font = m_translation_font;
                TranslationsTextBox.ForeColor = m_translation_color;
            }
            TranslationsTextBox.Refresh();

            RelatedWordsTextBox.Font = m_translation_font;
            RelatedWordsTextBox.ForeColor = m_translation_color;
            RelatedWordsTextBox.Refresh();

            GrammarTextBox.Font = m_translation_font;
            GrammarTextBox.ForeColor = m_translation_color;
            GrammarTextBox.Refresh();

            VerbFormsTextBox.Font = m_translation_font;
            VerbFormsTextBox.ForeColor = m_translation_color;
            VerbFormsTextBox.Refresh();

            SymmetryTextBox.Font = m_translation_font;
            SymmetryTextBox.ForeColor = m_translation_color;
            SymmetryTextBox.Refresh();

            CVWLSequenceTextBox.Font = m_translation_font;
            CVWLSequenceTextBox.ForeColor = m_translation_color;
            CVWLSequenceTextBox.Refresh();

            ValuesSequenceTextBox.Font = m_translation_font;
            ValuesSequenceTextBox.ForeColor = m_translation_color;
            ValuesSequenceTextBox.Refresh();

            DNASequenceTextBox.Font = m_translation_font;
            DNASequenceTextBox.ForeColor = m_translation_color;
            DNASequenceTextBox.Refresh();

            UserTextTextBox.Font = m_translation_font;
            UserTextTextBox.ForeColor = m_translation_color;
            UserTextTextBox.Refresh();
        }
    }
    private void MainTextBox_TextChanged(object sender, EventArgs e)
    {
        if (
             ((sender != null) && (sender == m_active_textbox)) &&
             (
               (m_active_textbox.Focused) ||
               (ChaptersListBox.Focused) ||
               (ChapterComboBox.Focused) ||
               (ChapterVerseNumericUpDown.Focused) ||
               (ChapterWordNumericUpDown.Focused) ||
               (ChapterLetterNumericUpDown.Focused) ||
               (PageNumericUpDown.Focused) ||
               (StationNumericUpDown.Focused) ||
               (PartNumericUpDown.Focused) ||
               (GroupNumericUpDown.Focused) ||
               (HalfNumericUpDown.Focused) ||
               (QuarterNumericUpDown.Focused) ||
               (BowingNumericUpDown.Focused) ||
               (WordNumericUpDown.Focused) ||
               (LetterNumericUpDown.Focused)
             )
           )
        {
            if (m_client != null)
            {
                CalculateCurrentValue();

                BuildLetterFrequencies();
                DisplayLetterFrequencies();
            }
        }
    }
    private void MainTextBox_SelectionChanged(object sender, EventArgs e)
    {
        if (
             ((sender != null) && (sender == m_active_textbox)) &&
             (
               (m_active_textbox.Focused) ||
               (ChapterWordNumericUpDown.Focused) ||
               (ChapterLetterNumericUpDown.Focused) ||
               (WordNumericUpDown.Focused) ||
               (LetterNumericUpDown.Focused)
             )
           )
        {
            if (m_client != null)
            {
                m_user_text_mode = false;
                m_selection_mode = false;

                Verse previous_verse = GetCurrentVerse();
                Verse verse = GetVerseAtCursor();
                if (verse != null)
                {
                    if (verse != previous_verse)
                    {
                        CurrentVerseIndex = GetVerseIndex(verse);
                        UpdatePlayerButtons(verse);
                        UpdateHeaderLabel();
                    }

                    CalculateCurrentValue();

                    BuildLetterFrequencies();
                    DisplayLetterFrequencies();

                    DisplayCurrentPositions();

                    if (m_active_textbox.SelectionLength > 0)
                    {
                        DisplayWordFrequencies();

                        GenerateSentencesLabel.Visible = true;
                        DuplicateLettersCheckBox.Visible = true;
                        GenerateSentencesLabel.Refresh();
                        DuplicateLettersCheckBox.Refresh();
                    }
                    else
                    {
                        ToolTip.SetToolTip(ChaptersInspectLabel, "Inspect chapters");
                        WordsListBoxLabel.Visible = false;
                        WordsListBox.Visible = false;
                        WordsListBox.SendToBack();

                        GenerateSentencesLabel.Visible = false;
                        DuplicateLettersCheckBox.Visible = false;
                        GenerateSentencesLabel.Refresh();
                        DuplicateLettersCheckBox.Refresh();
                    }
                }
            }
        }
    }
    private void MainTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        try
        {
            if ((e.Control) && (e.KeyCode == Keys.C))
            {
                if (m_active_textbox != null)
                {
                    if (m_active_textbox.SelectionLength == 0)
                    {
                        List<Verse> selected_verses = GetCurrentVerses();
                        if (selected_verses != null)
                        {
                            StringBuilder str = new StringBuilder();
                            foreach (Verse verse in selected_verses)
                            {
                                str.AppendLine(verse.Chapter.Name + "\t" + verse.Address + "\t" + verse.Text);
                            }
                            Clipboard.SetText(str.ToString());
                            Thread.Sleep(100); // must give chance for Clipboard to refresh its content before Paste
                            e.Handled = true;
                        }
                    }
                    else
                    {
                        m_active_textbox.Copy();
                    }
                }
            }
            else if ((e.Control) && (e.KeyCode == Keys.V))
            {
                if (m_active_textbox != null)
                {
                    SimplifyClipboardTextBeforePaste();
                    Thread.Sleep(100); // must give chance for Clipboard to refresh its content before Paste
                    m_active_textbox.Paste();
                    RestoreClipboardTextAfterPaste();
                    e.Handled = true;
                }
            }
            else if ((e.Control) && (e.KeyCode == Keys.G))
            {
                if (m_active_textbox != null)
                {
                    if (m_active_textbox.SelectionLength > 0)
                    {
                        GenerateAnagrams();
                        Thread.Sleep(100); // must give chance for Clipboard to refresh its content before Paste
                        e.Handled = true;
                    }
                }
            }
        }
        finally
        {
            UpdateMouseCursor();
        }
    }
    private void MainTextBox_KeyUp(object sender, KeyEventArgs e)
    {
        try
        {
            bool NavigationKeys = (
            e.KeyCode == Keys.Up ||
            e.KeyCode == Keys.Right ||
            e.KeyCode == Keys.Down ||
            e.KeyCode == Keys.Left ||
            e.KeyCode == Keys.Home ||
            e.KeyCode == Keys.End);

            if (NavigationKeys)
            {
                // this code has been moved out of SelectionChanged and brought to MouseClick and KeyUp
                // to keep all verse translations visible until the user clicks a verse then show one verse translation
                if (m_active_textbox != null)
                {
                    if (m_active_textbox.SelectionLength == 0)
                    {
                        Verse verse = GetCurrentVerse();
                        if (verse != null)
                        {
                            DisplayTranslations(verse);
                            DisplayTafseer(verse);
                            DisplaySymmetry();
                            DisplayCVWLSequence();
                            DisplayValuesSequence();
                            DisplayDNASequence();
                        }
                    }
                    else
                    {
                        // selected text is dealt with by CalculateAndDisplayCounts 
                    }
                }
            }
        }
        finally
        {
            UpdateMouseCursor();
        }
    }
    private void MainTextBox_KeyPress(object sender, KeyPressEventArgs e)
    {
        if (e.KeyChar == ' ')
        {
            if ((MainTextBox.Focused) && (!m_translation_readonly)) return;
            if ((SearchResultTextBox.Focused) && (!m_translation_readonly)) return;
            if (FindByTextTextBox.Focused) return;
            if (ChapterComboBox.Focused) return;
            if (BookmarkTextBox.Focused) return;
            if (FindByFrequencyPhraseTextBox.Focused) return;

            if (m_player != null)
            {
                if ((m_player.Playing) || (m_player.Paused))
                {
                    PlayerPlayLabel_Click(null, null);
                }
            }
        }

        e.Handled = true; // stop annoying beep
    }
    private void MainTextBox_Enter(object sender, EventArgs e)
    {
        SearchGroupBox_Leave(null, null);
        this.AcceptButton = null;
        UpdateMouseCursor();
    }
    private void MainTextBox_MouseEnter(object sender, EventArgs e)
    {
    }
    private void MainTextBox_MouseLeave(object sender, EventArgs e)
    {
        // stop cursor flicker
        if (m_active_textbox != null)
        {
            if (m_active_textbox.Cursor != Cursors.Default)
            {
                m_active_textbox.Cursor = Cursors.Default;
            }
        }
    }
    private void MainTextBox_MouseDown(object sender, MouseEventArgs e)
    {
        if (e.Button == MouseButtons.Right)
        {
            // in case we come from UserTextTextBox
            if (m_active_textbox != null)
            {
                m_active_textbox.Focus();
                MainTextBox_SelectionChanged(m_active_textbox, null);

                // set cursor at mouse RIGHT-click location so we know which word to get related words for
                int start = m_active_textbox.GetCharIndexFromPosition(e.Location);
                if (
                     (start <= m_active_textbox.SelectionStart)
                     ||
                     (start > (m_active_textbox.SelectionStart + m_active_textbox.SelectionLength))
                   )
                {
                    m_active_textbox.Select(start, 0);
                }
            }
        }
    }
    private void MainTextBox_MouseMove(object sender, MouseEventArgs e)
    {
        // stop flickering
        if (
            (Math.Abs(m_previous_location.X - e.X) < 8)
            &&
            (Math.Abs(m_previous_location.Y - e.Y) < 8)
           )
        {
            return;
        }
        m_previous_location = e.Location;

        UpdateMouseCursor();

        Word word = GetWordAtPointer(e);
        if (word != null)
        {
            m_clicked_word = GetWordAtPointer(e);
            if (m_clicked_word != null)
            {
                // in all cases
                this.Text = Application.ProductName + " | " + GetSelectionSummary();
                UpdateFindMatchCaption();

                string word_info = GetWordSummary(m_clicked_word) + "\r\n";
                if (ModifierKeys == Keys.Control)
                {
                    word_info += GetWordInformation(m_clicked_word);
                    word_info += "\r\n\r\n";
                    if ((Globals.EDITION == Edition.Grammar) || (Globals.EDITION == Edition.Ultimate))
                    {
                        word_info += GetWordGrammar(m_clicked_word) + "\r\n\r\n";
                    }
                    word_info += GetWordRelatedWords(m_clicked_word);
                }
                ToolTip.SetToolTip(m_active_textbox, word_info);

                // diplay word info at application caption
                this.Text += SPACE_GAP +
                (
                    word.Verse.Chapter.Name + SPACE_GAP +
                    "verse " + word.Verse.NumberInChapter + "-" + word.Verse.Number + SPACE_GAP +
                    "word " + word.NumberInVerse + "-" + word.NumberInChapter + "-" + word.Number + SPACE_GAP +
                    word.Transliteration + SPACE_GAP +
                    word.Text + SPACE_GAP +
                    word.Meaning + SPACE_GAP +
                    word.Occurrence.ToString() + "/" + word.Frequency.ToString()
                );

                //DisplayRelatedWords(m_clicked_word);
                //DisplayWordGrammar(m_clicked_word);
                //DisplayVerbForms(m_clicked_word);
            }
        }
    }
    private void MainTextBox_MouseUp(object sender, MouseEventArgs e)
    {
        if (ModifierKeys == Keys.Control)
        {
            if (e.Button == MouseButtons.Left)
            {
                // go to related words to word under mouse pointer
                FindRelatedWords(m_clicked_word);
            }
        }
        else
        {
            DisplayRelatedWords(m_clicked_word);
            DisplayWordGrammar(m_clicked_word);
            DisplayVerbForms(m_clicked_word);

            // calculate the C V W L distances
            int chapter_number = ChapterComboBox.SelectedIndex + 1;
            int verse_number = (int)VerseNumericUpDown.Value;
            int word_number = (int)WordNumericUpDown.Value;
            int letter_number = (int)LetterNumericUpDown.Value;

            m_clicked_chapter_distance = chapter_number - m_clicked_chapter_number;
            m_clicked_verse_distance = verse_number - m_clicked_verse_number;
            m_clicked_word_distance = word_number - m_clicked_word_number;
            m_clicked_letter_distance = letter_number - m_clicked_letter_number;

            ChapterDiffTextBox.Text = m_clicked_chapter_distance.ToString();
            VerseDiffTextBox.Text = m_clicked_verse_distance.ToString();
            WordDiffTextBox.Text = m_clicked_word_distance.ToString();
            LetterDiffTextBox.Text = m_clicked_letter_distance.ToString();

            ChapterDiffTextBox.ForeColor = GetNumberTypeColor(m_clicked_chapter_distance);
            VerseDiffTextBox.ForeColor = GetNumberTypeColor(m_clicked_verse_distance);
            WordDiffTextBox.ForeColor = GetNumberTypeColor(m_clicked_word_distance);
            LetterDiffTextBox.ForeColor = GetNumberTypeColor(m_clicked_letter_distance);

            m_clicked_chapter_number = chapter_number;
            m_clicked_verse_number = verse_number;
            m_clicked_word_number = word_number;
            m_clicked_letter_number = letter_number;

            Verse verse = GetCurrentVerse();
            if (verse != null)
            {
                m_player_looping_i = 0;

                // selected verses are dealt with by CalculateAndDisplayCounts 
            }
        }
    }
    private void MainTextBox_Click(object sender, EventArgs e)
    {
        // this code has been moved out of SelectionChanged and brought to MouseClick and KeyUp
        // to keep all verse translations visible until the user clicks a verse then show one verse translation
        if (m_active_textbox != null)
        {
            if (m_active_textbox.SelectionLength == 0)
            {
                Verse verse = GetCurrentVerse();
                if (verse != null)
                {
                    DisplayTranslations(verse);
                    DisplayTafseer(verse);
                    DisplaySymmetry();
                    DisplayCVWLSequence();
                    DisplayValuesSequence();
                    DisplayDNASequence();
                }
            }
            else
            {
                // selected text is dealt with by CalculateAndDisplayCounts 
            }
        }
    }
    private void MainTextBox_DoubleClick(object sender, EventArgs e)
    {
        try
        {
            for (int i = 0; i < 3; i++) MainTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
            for (int i = 0; i < 3; i++) MainTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
            MainTextBox.BeginUpdate();

            if (ModifierKeys == Keys.None)
            {
                // double clicking search result, takes us back to Main text displaying the whole chapter of the double-clicked verse
                if (m_found_verses_displayed)
                {
                    Verse verse = GetCurrentVerse();
                    if (verse != null)
                    {
                        if (verse.Chapter != null)
                        {
                            if (m_client != null)
                            {
                                // select chapter and display it and colorize target verse
                                m_client.Selection = new Selection(m_client.Book, SelectionScope.Chapter, new List<int>() { verse.Chapter.Number - 1 });
                                if (m_client.Selection != null)
                                {
                                    SwitchToMainTextBox();

                                    BookmarkTextBox.Enabled = true;
                                    // display selection's note (if any)
                                    DisplayNote(m_client.GetBookmark(m_client.Selection));

                                    m_user_text_mode = false;
                                    m_selection_mode = false;

                                    ToolTip.SetToolTip(ChaptersInspectLabel, "Inspect chapters");
                                    WordsListBoxLabel.Visible = false;
                                    WordsListBox.Visible = false;
                                    WordsListBox.SendToBack();

                                    this.Text = Application.ProductName + " | " + GetSelectionSummary();
                                    UpdateSearchScope();

                                    DisplaySelectionText();

                                    MainTextBox.ClearHighlight();
                                    MainTextBox.AlignToStart();
                                    HighlightVerse(verse);
                                    UpdateHeaderLabel();

                                    CalculateCurrentValue();

                                    UpdateVersePositions(verse);

                                    BuildLetterFrequencies();
                                    DisplayLetterFrequencies();

                                    DisplayTranslations(verse);
                                    DisplayTafseer(verse);
                                    DisplaySymmetry();
                                    DisplayCVWLSequence();
                                    DisplayValuesSequence();
                                    DisplayDNASequence();

                                    //if (add_to_history)
                                    {
                                        AddSearchHistoryItem();
                                    }

                                    // change focus to MainTextBox control insead of SearchTextBox
                                    MainTextBox.Focus();

                                    ToolTip.SetToolTip(ChaptersInspectLabel, "Inspect chapters");
                                    WordsListBoxLabel.Visible = false;
                                    WordsListBox.Visible = false;
                                    WordsListBox.SendToBack();

                                    GenerateSentencesLabel.Visible = false;
                                    DuplicateLettersCheckBox.Visible = false;
                                    GenerateSentencesLabel.Refresh();
                                    DuplicateLettersCheckBox.Refresh();
                                }
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            MainTextBox.EndUpdate();
            MainTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
            MainTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
        }
    }
    private void MainTextBox_MouseWheel(object sender, MouseEventArgs e)
    {
        if (ModifierKeys == Keys.Control)
        {
            if (PictureBox.Visible)
            {
                RedrawImage();
            }
            else
            {
                if (m_active_textbox != null)
                {
                    ZoomInLabel.Enabled = true;
                    ZoomOutLabel.Enabled = true;

                    m_text_zoom_factor = m_active_textbox.ZoomFactor;
                    if (m_active_textbox.ZoomFactor <= (m_min_zoom_factor + m_error_margin))
                    {
                        MainTextBox.ZoomFactor = m_min_zoom_factor;
                        SearchResultTextBox.ZoomFactor = m_min_zoom_factor;
                        ZoomInLabel.Enabled = true;
                        ZoomOutLabel.Enabled = false;
                    }
                    else if (m_active_textbox.ZoomFactor >= (m_max_zoom_factor - m_error_margin))
                    {
                        MainTextBox.ZoomFactor = m_max_zoom_factor;
                        SearchResultTextBox.ZoomFactor = m_max_zoom_factor;
                        ZoomInLabel.Enabled = false;
                        ZoomOutLabel.Enabled = true;
                    }

                    MainTextBox.ZoomFactor = m_text_zoom_factor;
                    SearchResultTextBox.ZoomFactor = m_text_zoom_factor;
                }
            }
        }
    }
    private void ZoomInLabel_Click(object sender, EventArgs e)
    {
        if (PictureBox.Visible)
        {
            return;
            if (m_drawing_shape == DrawingShape.Lines) return;

            if (m_graphics_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin))
            {
                PictureBox.ZoomIn();
                m_graphics_zoom_factor = PictureBox.ZoomFactor;
            }
            // re-check same condition after zoom_factor update
            ZoomInLabel.Enabled = (m_graphics_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
            ZoomOutLabel.Enabled = true;

            RedrawImage();
        }
        else
        {
            if (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin))
            {
                m_text_zoom_factor += m_zoom_factor_increment;

                MainTextBox.ZoomFactor = m_text_zoom_factor;
                SearchResultTextBox.ZoomFactor = m_text_zoom_factor;
            }
            // re-check same condition after zoom_factor update
            ZoomInLabel.Enabled = (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
            ZoomOutLabel.Enabled = true;
        }
    }
    private void ZoomOutLabel_Click(object sender, EventArgs e)
    {
        if (PictureBox.Visible)
        {
            return;
            if (m_drawing_shape == DrawingShape.Lines) return;

            if (m_graphics_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin))
            {
                PictureBox.ZoomOut();
                m_graphics_zoom_factor = PictureBox.ZoomFactor;
            }
            // re-check same condition after zoom_factor update
            ZoomOutLabel.Enabled = (m_graphics_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));
            ZoomInLabel.Enabled = true;
            RedrawImage();
        }
        else
        {
            if (m_text_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin))
            {
                m_text_zoom_factor -= m_zoom_factor_increment;

                MainTextBox.ZoomFactor = m_text_zoom_factor;
                SearchResultTextBox.ZoomFactor = m_text_zoom_factor;
            }
            // re-check same condition after zoom_factor update
            ZoomOutLabel.Enabled = (m_text_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));
            ZoomInLabel.Enabled = true;
        }
    }
    private void GenerateSentencesLabel_Click(object sender, EventArgs e)
    {
        GenerateAnagrams();
    }
    private void GenerateAnagrams()
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (!String.IsNullOrEmpty(m_current_text))
            {
                string filename = Globals.DATA_FOLDER + "/" + "dictionary.txt";
                if (File.Exists(filename))
                {
                    string text = m_current_text.SimplifyTo(m_client.NumerologySystem.TextMode);
                    if (!DuplicateLettersCheckBox.Checked)
                    {
                        text = text.RemoveDuplicateLetters();
                    }
                    List<string> sentences = Anagrams.GenerateAnagrams(filename, text);
                    sentences.Sort();

                    if (Directory.Exists(Globals.STATISTICS_FOLDER))
                    {
                        filename = Globals.STATISTICS_FOLDER + "/" + text + ".txt";
                        if (sentences != null)
                        {
                            using (StreamWriter writer = new StreamWriter(filename, false, Encoding.Unicode))
                            {
                                writer.WriteLine("{0} sentences from {1}", sentences.Count, m_current_text);
                                writer.WriteLine("---------------------");
                                foreach (string sentence in sentences)
                                {
                                    writer.WriteLine(sentence);
                                }
                            }

                            // show file content after save
                            if (File.Exists(filename))
                            {
                                System.Diagnostics.Process.Start("Notepad.exe", filename);
                            }
                        }
                    }
                }
            }
        }
        catch
        {
            // silence IO error in case running from read-only media (CD/DVD)
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    // wordwrap mode
    private bool m_word_wrap_main_textbox = false;
    private bool m_word_wrap_search_textbox = false;
    private void ApplyWordWrapSettings()
    {
        try
        {
            MainTextBox.BeginUpdate();
            SearchResultTextBox.BeginUpdate();

            UpdateWordWrapLabel(m_word_wrap_main_textbox);
            MainTextBox.WordWrap = m_word_wrap_main_textbox;
            SearchResultTextBox.WordWrap = m_word_wrap_search_textbox;

            Verse.IncludeNumber = m_word_wrap_main_textbox;
        }
        finally
        {
            MainTextBox.EndUpdate();
            SearchResultTextBox.EndUpdate();
        }
    }
    private void UpdateWordWrapLabel(bool word_wrap)
    {
        if (word_wrap)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "text_wrap.png"))
            {
                WordWrapLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "text_wrap.png");
            }
            ToolTip.SetToolTip(WordWrapLabel, "Wrapped");
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "text_unwrap.png"))
            {
                WordWrapLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "text_unwrap.png");
            }
            ToolTip.SetToolTip(WordWrapLabel, "Unwrapped");
        }
        WordWrapLabel.Refresh();
    }
    private void WordWrapLabel_Click(object sender, EventArgs e)
    {
        ToggleWordWrap();
    }
    // add/remove Verse.EndMark, wrap/unwrap and redisplay
    private void ToggleWordWrap() // F11
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_active_textbox != null)
            {
                m_active_textbox.BeginUpdate();

                Verse current_verse = null;
                if (m_selection_mode == false)
                {
                    current_verse = GetCurrentVerse();
                }

                m_active_textbox.WordWrap = !m_active_textbox.WordWrap;
                if (m_found_verses_displayed)
                {
                    m_word_wrap_search_textbox = m_active_textbox.WordWrap;
                    Verse.IncludeNumber = false;

                    UpdateWordWrapLabel(m_word_wrap_search_textbox);
                    CVWLSequenceTextBox.WordWrap = m_word_wrap_search_textbox;
                    ValuesSequenceTextBox.WordWrap = m_word_wrap_search_textbox;
                    DNASequenceTextBox.WordWrap = m_word_wrap_search_textbox;

                    // no text is changed so no need to redisplay and recolorize
                    //DisplayFoundVerses(false);
                }
                else
                {
                    m_word_wrap_main_textbox = m_active_textbox.WordWrap;
                    Verse.IncludeNumber = m_word_wrap_main_textbox;

                    UpdateWordWrapLabel(m_word_wrap_main_textbox);
                    CVWLSequenceTextBox.WordWrap = m_word_wrap_main_textbox;
                    ValuesSequenceTextBox.WordWrap = m_word_wrap_main_textbox;
                    DNASequenceTextBox.WordWrap = m_word_wrap_main_textbox;

                    // re-display as verse changed IncludeNumber
                    DisplaySelection(false);
                }

                if (current_verse != null)
                {
                    HighlightVerse(current_verse);
                }
            }
        }
        finally
        {
            m_active_textbox.EndUpdate();
            this.Cursor = Cursors.Default;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Verses
    ///////////////////////////////////////////////////////////////////////////////
    // navigation
    private int m_current_selection_verse_index = 0;
    private int m_current_found_verse_index = 0;
    private int CurrentVerseIndex
    {
        get
        {
            if (m_found_verses_displayed)
            {
                return m_current_found_verse_index;
            }
            else
            {
                return m_current_selection_verse_index;
            }
        }
        set
        {
            if (m_client != null)
            {
                if (m_found_verses_displayed)
                {
                    if (m_client.FoundVerses != null)
                    {
                        if ((value >= 0) && (value < m_client.FoundVerses.Count))
                        {
                            m_current_found_verse_index = value;
                        }
                    }
                }
                else
                {
                    if (m_client.Selection != null)
                    {
                        if (m_client.Selection.Verses != null)
                        {
                            if ((value >= 0) && (value < m_client.Selection.Verses.Count))
                            {
                                m_current_selection_verse_index = value;
                            }
                        }
                    }
                }
            }
        }
    }
    private Verse GetCurrentVerse()
    {
        return GetVerse(CurrentVerseIndex);
    }
    private List<Verse> GetCurrentVerses()
    {
        List<Verse> result = new List<Verse>();
        char[] separators = { '\n', Constants.OPEN_BRACKET[0] };
        string[] lines = m_current_text.Split(separators);
        int current_verse_index = CurrentVerseIndex;
        for (int i = current_verse_index; i < current_verse_index + lines.Length; i++)
        {
            result.Add(GetVerse(i));
        }
        return result;
    }
    private Verse GetVerse(int verse_index)
    {
        if (m_client != null)
        {
            List<Verse> verses = null;
            if (m_found_verses_displayed)
            {
                verses = m_client.FoundVerses;
            }
            else // m_curent_verses displayed
            {
                if (m_client.Selection != null)
                {
                    verses = m_client.Selection.Verses;
                }
            }

            if (verses != null)
            {
                if ((verse_index >= 0) && (verse_index < verses.Count))
                {
                    return verses[verse_index];
                }
            }
        }
        return null;
    }
    private int GetVerseDisplayStart(Verse verse)
    {
        int start = 0;
        if (m_client != null)
        {
            if (verse != null)
            {
                List<Verse> verses = null;
                if (m_found_verses_displayed)
                {
                    verses = m_client.FoundVerses;
                }
                else
                {
                    if (m_client.Selection != null)
                    {
                        verses = m_client.Selection.Verses;
                    }
                }

                if (verses != null)
                {
                    foreach (Verse v in verses)
                    {
                        if (v == verse) break;

                        if (m_found_verses_displayed)
                        {//                            \t                  \n
                            start += v.Address.Length + 1 + v.Text.Length + 1;
                        }
                        else
                        {
                            start += v.Text.Length + v.Endmark.Length;
                        }
                    }
                }
            }
        }
        return start;
    }
    private int GetVerseDisplayLength(Verse verse)
    {
        int length = 0;
        if (verse != null)
        {
            if (m_found_verses_displayed)
            {//                                \t                       \n
                length = verse.Address.Length + 1 + verse.Text.Length + 1;
            }
            else
            {//                                 { # }  or  \n
                length = verse.Text.Length + verse.Endmark.Length;
            }
        }
        return length;
    }
    private int GetWordDisplayStart(Word word) //??? should be int word_index in RichTextBox
    {
        int start = 0;
        if (word != null)
        {
            if (m_client != null)
            {
                List<Verse> verses = null;
                if (m_found_verses_displayed)
                {
                    verses = m_client.FoundVerses;
                }
                else
                {
                    if (m_client.Selection != null)
                    {
                        verses = m_client.Selection.Verses;
                    }
                }

                foreach (Verse verse in verses)
                {
                    if (verse == word.Verse)  //??? this will bring first matching word only
                    {
                        start += word.Position;
                        break;
                    }
                    start += GetVerseDisplayLength(verse);
                }
            }
        }
        return start;
    }
    private int GetWordDisplayLength(Word word)
    {
        if (word != null)
        {
            if (word.Text != null)
            {
                return word.Text.Length + 1;
            }
        }
        return 0;
    }
    // highlighting verse/word
    private Verse m_previous_highlighted_verse = null;
    private void HighlightVerse(Verse verse)
    {
        if (m_active_textbox != null)
        {
            try
            {
                for (int i = 0; i < 3; i++) m_active_textbox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
                for (int i = 0; i < 3; i++) m_active_textbox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
                m_active_textbox.BeginUpdate();

                // de-highlight previous verse
                if (m_previous_highlighted_verse != null)
                {
                    int start = GetVerseDisplayStart(m_previous_highlighted_verse);
                    int length = GetVerseDisplayLength(m_previous_highlighted_verse);
                    if (m_found_verses_displayed)
                    {
                        if (m_found_verse_backcolors.ContainsKey(m_previous_highlighted_verse))
                        {
                            m_active_textbox.Highlight(start, length - 1, m_found_verse_backcolors[m_previous_highlighted_verse]);
                        }
                        else
                        {
                            m_active_textbox.ClearHighlight(start, length - 1);
                        }
                    }
                    else
                    {
                        m_active_textbox.ClearHighlight(start, length - 1);
                    }
                }

                // highlight this verse
                if (verse != null)
                {
                    int start = GetVerseDisplayStart(verse);
                    int length = GetVerseDisplayLength(verse);
                    m_active_textbox.Highlight(start, length - 1, Color.Lavender);

                    // ####### re-wire MainTextBox_SelectionChanged event
                    m_active_textbox.EndUpdate();
                    m_active_textbox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
                    m_active_textbox.TextChanged += new EventHandler(MainTextBox_TextChanged);
                    CalculateCurrentValue(); // will update translation too !!!

                    // move cursor to verse start
                    m_active_textbox.Select(start, 0);

                    // updates verse position and value when cursor goes to start of verse
                    CurrentVerseIndex = GetVerseIndex(verse);
                    UpdatePlayerButtons(verse);
                    UpdateVersePositions(verse);

                    // backup highlighted verse
                    m_previous_highlighted_verse = verse;
                }
                else
                {
                    m_active_textbox.EndUpdate();
                    m_active_textbox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
                    m_active_textbox.TextChanged += new EventHandler(MainTextBox_TextChanged);
                }
            }
            finally
            {
                //// ####### already re-wired above
                //m_active_textbox.EndUpdate();
                //m_active_textbox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
                //m_active_textbox.TextChanged += new EventHandler(MainTextBox_TextChanged);
            }
        }
    }
    private Word m_previous_highlighted_word = null;
    private void HighlightWord(Word word)
    {
        if (m_active_textbox != null)
        {
            int backup_selection_start = m_active_textbox.SelectionStart;
            int backup_selection_length = m_active_textbox.SelectionLength;

            // de-highlight previous word
            if (m_previous_highlighted_word != null)
            {
                int start = GetWordDisplayStart(m_previous_highlighted_word);
                int length = GetWordDisplayLength(m_previous_highlighted_word);
                m_active_textbox.ClearHighlight(start, length);
            }

            // highlight this word
            if (word != null)
            {
                int start = GetWordDisplayStart(word);
                int length = GetWordDisplayLength(word);
                m_active_textbox.Highlight(start, length, Color.Lavender);

                // backup highlighted word
                m_previous_highlighted_word = word;
            }

            //??? BAD DESIGN: if backup_selection is outside visible area, then this line will scroll to it and loses highlight above
            m_active_textbox.Select(backup_selection_start, backup_selection_length);
        }
    }
    private GoldenRatioType m_golden_ratio_type = GoldenRatioType.Text;
    private GoldenRatioScope m_golden_ratio_scope = GoldenRatioScope.None;
    private GoldenRatioOrder m_golden_ratio_order = GoldenRatioOrder.LongShort;
    private double m_golden_ratio_tolerance = 0.05D;
    private void GoldenRatioScopeLabel_Click(object sender, EventArgs e)
    {
        if (ModifierKeys == Keys.Shift)
        {
            switch (m_golden_ratio_scope)
            {
                case GoldenRatioScope.None:
                    {
                        m_golden_ratio_scope = GoldenRatioScope.Sentence;
                        if (File.Exists("Images/golden_sentence.png"))
                        {
                            GoldenRatioScopeLabel.Image = new Bitmap("Images/golden_sentence.png");
                            ToolTip.SetToolTip(GoldenRatioScopeLabel, "Sentence-level golden ratio");
                        }
                    }
                    break;
                case GoldenRatioScope.Letter:
                    {
                        m_golden_ratio_scope = GoldenRatioScope.None;
                        if (File.Exists("Images/golden_none.png"))
                        {
                            GoldenRatioScopeLabel.Image = new Bitmap("Images/golden_none.png");
                            ToolTip.SetToolTip(GoldenRatioScopeLabel, "Golden ratio colorization");
                        }
                    }
                    break;
                case GoldenRatioScope.Word:
                    {
                        m_golden_ratio_scope = GoldenRatioScope.Letter;
                        if (File.Exists("Images/golden_letter.png"))
                        {
                            GoldenRatioScopeLabel.Image = new Bitmap("Images/golden_letter.png");
                            ToolTip.SetToolTip(GoldenRatioScopeLabel, "Letter-level golden ratio");
                        }
                    }
                    break;
                case GoldenRatioScope.Sentence:
                    {
                        m_golden_ratio_scope = GoldenRatioScope.Word;
                        if (File.Exists("Images/golden_word.png"))
                        {
                            GoldenRatioScopeLabel.Image = new Bitmap("Images/golden_word.png");
                            ToolTip.SetToolTip(GoldenRatioScopeLabel, "Word-level golden ratio");
                        }
                    }
                    break;
            }
        }
        else
        {
            switch (m_golden_ratio_scope)
            {
                case GoldenRatioScope.None:
                    {
                        m_golden_ratio_scope = GoldenRatioScope.Letter;
                        if (File.Exists("Images/golden_letter.png"))
                        {
                            GoldenRatioScopeLabel.Image = new Bitmap("Images/golden_letter.png");
                            ToolTip.SetToolTip(GoldenRatioScopeLabel, "Letter-level golden ratio");
                        }
                    }
                    break;
                case GoldenRatioScope.Letter:
                    {
                        m_golden_ratio_scope = GoldenRatioScope.Word;
                        if (File.Exists("Images/golden_word.png"))
                        {
                            GoldenRatioScopeLabel.Image = new Bitmap("Images/golden_word.png");
                            ToolTip.SetToolTip(GoldenRatioScopeLabel, "Word-level golden ratio");
                        }
                    }
                    break;
                case GoldenRatioScope.Word:
                    {
                        m_golden_ratio_scope = GoldenRatioScope.Sentence;
                        if (File.Exists("Images/golden_sentence.png"))
                        {
                            GoldenRatioScopeLabel.Image = new Bitmap("Images/golden_sentence.png");
                            ToolTip.SetToolTip(GoldenRatioScopeLabel, "Sentence-level golden ratio");
                        }
                    }
                    break;
                case GoldenRatioScope.Sentence:
                    {
                        m_golden_ratio_scope = GoldenRatioScope.None;
                        if (File.Exists("Images/golden_none.png"))
                        {
                            GoldenRatioScopeLabel.Image = new Bitmap("Images/golden_none.png");
                            ToolTip.SetToolTip(GoldenRatioScopeLabel, "Golden ratio colorization");
                        }
                    }
                    break;
            }
        }

        GoldenRatioOrderLabel.Enabled = (m_golden_ratio_scope != GoldenRatioScope.None);

        DisplaySelectionText();
    }
    private void GoldenRatioOrderLabel_Click(object sender, EventArgs e)
    {
        switch (m_golden_ratio_order)
        {
            case GoldenRatioOrder.LongShort:
                {
                    m_golden_ratio_order = GoldenRatioOrder.ShortLong;
                    if (File.Exists("Images/golden_sl.png"))
                    {
                        GoldenRatioOrderLabel.Image = new Bitmap("Images/golden_sl.png");
                        ToolTip.SetToolTip(GoldenRatioOrderLabel, "Golden ratio ~= 1 + 0.618");
                    }
                }
                break;
            case GoldenRatioOrder.ShortLong:
                {
                    m_golden_ratio_order = GoldenRatioOrder.LongShort;
                    if (File.Exists("Images/golden_ls.png"))
                    {
                        GoldenRatioOrderLabel.Image = new Bitmap("Images/golden_ls.png");
                        ToolTip.SetToolTip(GoldenRatioOrderLabel, "Golden ratio ~= 0.618 + 1");
                    }
                }
                break;
        }

        DisplaySelectionText();
    }
    private void GoldenRatioTypeLabel_Click(object sender, EventArgs e)
    {
        switch (m_golden_ratio_type)
        {
            case GoldenRatioType.Text:
                {
                    m_golden_ratio_type = GoldenRatioType.Value;
                    if (File.Exists("Images/golden_value.png"))
                    {
                        GoldenRatioTypeLabel.Image = new Bitmap("Images/golden_value.png");
                        ToolTip.SetToolTip(GoldenRatioTypeLabel, "Value-based golden ratio");
                    }
                }
                break;
            case GoldenRatioType.Value:
                {
                    m_golden_ratio_type = GoldenRatioType.Text;
                    if (File.Exists("Images/golden_text.png"))
                    {
                        GoldenRatioTypeLabel.Image = new Bitmap("Images/golden_text.png");
                        ToolTip.SetToolTip(GoldenRatioTypeLabel, "Text-based golden ratio");
                    }
                }
                break;
        }

        DisplaySelectionText();
    }
    private void ColorizeGoldenRatios()
    {
        if (m_golden_ratio_scope != GoldenRatioScope.None)
        {
            if (m_selection_mode)
            {
                if (m_client != null)
                {
                    if ((m_client.NumerologySystem != null) && (m_client.NumerologySystem.TextMode == "Original"))
                    {
                        ColorizeGoldenRatiosInOriginalText();
                    }
                    else
                    {
                        ColorizeGoldenRatiosInSimplifiedText();
                    }
                }
            }
        }
    }
    private void ColorizeGoldenRatiosInOriginalText()
    {
        if (m_selection_mode)
        {
            this.Cursor = Cursors.WaitCursor;
            try
            {
                for (int i = 0; i < 3; i++) MainTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
                for (int i = 0; i < 3; i++) MainTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
                MainTextBox.BeginUpdate();

                if (m_client != null)
                {
                    if (m_client.Selection != null)
                    {
                        foreach (Verse verse in m_client.Selection.Verses)
                        {
                            if (verse != null)
                            {
                                int length = GetVerseDisplayLength(verse);
                                int start = GetVerseDisplayStart(verse);

                                if (m_client.NumerologySystem != null)
                                {
                                    int verse_letter_count = verse.LetterCount;

                                    int golden_letters = 0;
                                    switch (m_golden_ratio_type)
                                    {
                                        case GoldenRatioType.Text:
                                            {
                                                switch (m_golden_ratio_order)
                                                {
                                                    case GoldenRatioOrder.LongShort:
                                                        {
                                                            golden_letters = verse_letter_count - (int)Math.Round(((double)verse_letter_count / Numbers.PHI));
                                                        }
                                                        break;
                                                    case GoldenRatioOrder.ShortLong:
                                                        {
                                                            golden_letters = (int)Math.Round(((double)verse_letter_count / Numbers.PHI));
                                                        }
                                                        break;
                                                }
                                            }
                                            break;
                                        case GoldenRatioType.Value:
                                            {
                                                long golden_value = 0L;
                                                long verse_value = m_client.CalculateValue(verse);

                                                switch (m_golden_ratio_order)
                                                {
                                                    case GoldenRatioOrder.LongShort:
                                                        {
                                                            golden_value = verse_value - (long)Math.Round(((double)verse_value / Numbers.PHI));
                                                        }
                                                        break;
                                                    case GoldenRatioOrder.ShortLong:
                                                        {
                                                            golden_value = (long)Math.Round(((double)verse_value / Numbers.PHI));
                                                        }
                                                        break;
                                                }

                                                long sum = 0L;
                                                long diff_1 = 0;
                                                long diff_2 = 0;
                                                bool done = false;
                                                foreach (Word word in verse.Words)
                                                {
                                                    foreach (Letter letter in word.Letters)
                                                    {
                                                        diff_1 = sum - golden_value;
                                                        if (diff_1 == 0) { done = true; break; }

                                                        golden_letters++;

                                                        sum += m_client.CalculateValue(letter);
                                                        diff_2 = sum - golden_value;
                                                        if (diff_2 == 0) { done = true; break; }

                                                        // we've skipped the golden limit so go back and
                                                        // check which diff is nearer to the golden limit
                                                        // and is it within the tolerance level or not !!!
                                                        if ((diff_1 < 0) && (diff_2 > 0))
                                                        {
                                                            if (Math.Abs(diff_1) < diff_2)
                                                            {
                                                                if ((Math.Abs(diff_1) / golden_letters) <= m_golden_ratio_tolerance)
                                                                {
                                                                    golden_letters--;
                                                                    done = true; break;
                                                                }
                                                            }
                                                            else
                                                            {
                                                                if ((diff_2 / golden_letters) <= m_golden_ratio_tolerance)
                                                                {
                                                                    done = true; break;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if (done)
                                                    {
                                                        break;
                                                    }
                                                }
                                            }
                                            break;
                                    }

                                    int golden_space_stopmarks_diacritics = 0;
                                    bool colorize = false;
                                    int letter_count = 0;
                                    for (int i = 0; i < verse.Text.Length; i++)
                                    {
                                        if (Constants.ARABIC_LETTERS.Contains(verse.Text[i]))
                                        {
                                            letter_count++;
                                            if (letter_count == golden_letters)
                                            {
                                                switch (m_golden_ratio_scope)
                                                {
                                                    case GoldenRatioScope.None:
                                                        {
                                                            colorize = false;
                                                        }
                                                        break;
                                                    case GoldenRatioScope.Letter:
                                                        {
                                                            colorize = true;
                                                        }
                                                        break;
                                                    case GoldenRatioScope.Word:
                                                        {
                                                            for (int j = 1; j < verse.Text.Length - i; j++)
                                                            {
                                                                if (Constants.ARABIC_LETTERS.Contains(verse.Text[i + j]))
                                                                {
                                                                    break;
                                                                }
                                                                if (verse.Text[i + j] == ' ')
                                                                {
                                                                    colorize = true;
                                                                }
                                                            }
                                                        }
                                                        break;
                                                    case GoldenRatioScope.Sentence:
                                                        {
                                                            for (int j = 1; j < verse.Text.Length - i; j++)
                                                            {
                                                                if (Constants.ARABIC_LETTERS.Contains(verse.Text[i + j]))
                                                                {
                                                                    break;
                                                                }
                                                                else if (Constants.STOPMARKS.Contains(verse.Text[i + j]))
                                                                {
                                                                    colorize = true;
                                                                }
                                                                else
                                                                {
                                                                    continue; // skip space, harakaat, or QURANMARKS 
                                                                }
                                                            }
                                                        }
                                                        break;
                                                }

                                                // in all cases
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            golden_space_stopmarks_diacritics++;
                                        }
                                    }

                                    if (colorize)
                                    {
                                        int golden_length = golden_letters + golden_space_stopmarks_diacritics;

                                        MainTextBox.Colorize(start, golden_length, Color.Navy);
                                        MainTextBox.Colorize(start + golden_length, verse.Text.Length - golden_length, Color.Red);

                                        // reset color back to Navy for subsequent display
                                        if (MainTextBox.Text.Length > 0)
                                        {
                                            MainTextBox.Colorize(0, 1, Color.Navy);
                                        }

                                        MainTextBox.AlignToStart();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            finally
            {
                MainTextBox.EndUpdate();
                MainTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
                MainTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
                this.Cursor = Cursors.Default;
            }
        }
    }
    private void ColorizeGoldenRatiosInSimplifiedText()
    {
        if (m_selection_mode)
        {
            this.Cursor = Cursors.WaitCursor;
            try
            {
                for (int i = 0; i < 3; i++) MainTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
                for (int i = 0; i < 3; i++) MainTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
                MainTextBox.BeginUpdate();

                if (m_client != null)
                {
                    if (m_client.Selection != null)
                    {
                        foreach (Verse verse in m_client.Selection.Verses)
                        {
                            if (verse != null)
                            {
                                bool colorize = false;
                                bool word_end = false;
                                bool sentence_end = false;
                                int golden_letters = 0;
                                int golden_spaces = 0;

                                int length = GetVerseDisplayLength(verse);
                                int start = GetVerseDisplayStart(verse);

                                switch (m_golden_ratio_type)
                                {
                                    case GoldenRatioType.Text:
                                        {
                                            switch (m_golden_ratio_order)
                                            {
                                                case GoldenRatioOrder.LongShort:
                                                    {
                                                        golden_letters = verse.LetterCount - (int)Math.Round(((double)verse.LetterCount / Numbers.PHI));   // e.g.  16 - 16/phi = 6
                                                    }
                                                    break;
                                                case GoldenRatioOrder.ShortLong:
                                                    {
                                                        golden_letters = (int)Math.Round(((double)verse.LetterCount / Numbers.PHI));                        // e.g.       16/phi = 10
                                                    }
                                                    break;
                                            }

                                            bool done = false;
                                            int letter_count = 0;
                                            foreach (Word word in verse.Words)
                                            {
                                                foreach (Letter letter in word.Letters)
                                                {
                                                    word_end = (letter.NumberInWord == word.Letters.Count);
                                                    sentence_end = word_end && (word.Stopmark != Stopmark.None);

                                                    letter_count++;
                                                    if (letter_count == golden_letters)
                                                    {
                                                        done = true;
                                                        break;
                                                    }
                                                }
                                                if (done)
                                                {
                                                    break;
                                                }

                                                golden_spaces++;
                                            }
                                        }
                                        break;
                                    case GoldenRatioType.Value:
                                        {
                                            long golden_value = 0;
                                            long verse_value = m_client.CalculateValue(verse);

                                            switch (m_golden_ratio_order)
                                            {
                                                case GoldenRatioOrder.LongShort:
                                                    {
                                                        golden_value = verse_value - (long)Math.Round(((double)verse_value / Numbers.PHI));   // e.g. 1034 - 1034/phi = 394.94 = 395
                                                    }
                                                    break;
                                                case GoldenRatioOrder.ShortLong:
                                                    {
                                                        golden_value = (long)Math.Round(((double)verse_value / Numbers.PHI));                  // e.g.        1034/phi = 639.06 = 639
                                                    }
                                                    break;
                                            }

                                            long sum = 0L;
                                            long diff_1 = 0;
                                            long diff_2 = 0;
                                            bool done = false;
                                            foreach (Word word in verse.Words)
                                            {
                                                foreach (Letter letter in word.Letters)
                                                {
                                                    word_end = (letter.NumberInWord == word.Letters.Count);
                                                    sentence_end = word_end && (word.Stopmark != Stopmark.None);

                                                    diff_1 = sum - golden_value;
                                                    if (diff_1 == 0) { done = true; break; }

                                                    golden_letters++;

                                                    sum += m_client.CalculateValue(letter);
                                                    diff_2 = sum - golden_value;
                                                    if (diff_2 == 0) { done = true; break; }

                                                    // we've skipped the golden limit so go back and
                                                    // check which diff is nearer to the golden limit
                                                    // and is it within the tolerance level or not !!!
                                                    if ((diff_1 < 0) && (diff_2 > 0))
                                                    {
                                                        if (Math.Abs(diff_1) < diff_2)
                                                        {
                                                            if ((Math.Abs(diff_1) / golden_letters) <= m_golden_ratio_tolerance)
                                                            {
                                                                golden_letters--;
                                                                word_end = (letter.NumberInWord == 1);
                                                                sentence_end = word_end && (word.Stopmark != Stopmark.None);
                                                                done = true; break;
                                                            }
                                                        }
                                                        else
                                                        {
                                                            if ((diff_2 / golden_letters) <= m_golden_ratio_tolerance)
                                                            {
                                                                done = true; break;
                                                            }
                                                        }
                                                    }
                                                }
                                                if (done)
                                                {
                                                    break;
                                                }

                                                golden_spaces++;
                                            }
                                        }
                                        break;
                                }

                                switch (m_golden_ratio_scope)
                                {
                                    case GoldenRatioScope.None:
                                        {
                                            colorize = false;
                                        }
                                        break;
                                    case GoldenRatioScope.Letter:
                                        {
                                            colorize = true;
                                        }
                                        break;
                                    case GoldenRatioScope.Word:
                                        {
                                            if (word_end)
                                            {
                                                colorize = true;
                                            }
                                        }
                                        break;
                                    case GoldenRatioScope.Sentence:
                                        {
                                            if (sentence_end)
                                            {
                                                colorize = true;
                                            }
                                        }
                                        break;
                                }

                                if (colorize)
                                {
                                    int golden_length = golden_letters + golden_spaces;

                                    MainTextBox.Colorize(start, golden_length, Color.Navy);
                                    MainTextBox.Colorize(start + golden_length, verse.Text.Length - golden_length, Color.Red);

                                    // reset color back to Navy for subsequent display
                                    if (MainTextBox.Text.Length > 0)
                                    {
                                        MainTextBox.Colorize(0, 1, Color.Navy);
                                    }

                                    MainTextBox.AlignToStart();
                                }
                            }
                        }
                    }
                }
            }
            finally
            {
                MainTextBox.EndUpdate();
                MainTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
                MainTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
                this.Cursor = Cursors.Default;
            }
        }
    }
    // helpers
    private Verse GetVerseAtCursor()
    {
        if (m_active_textbox != null)
        {
            int start = m_active_textbox.SelectionStart;
            return GetVerseAtChar(start);
        }
        return null;
    }
    private Word GetWordAtCursor()
    {
        if (m_active_textbox != null)
        {
            int char_index = m_active_textbox.SelectionStart;
            if (char_index > 0)
            {
                return GetWordAtChar(char_index);
            }
        }
        return null;
    }
    private Letter GetLetterAtCursor()
    {
        if (m_active_textbox != null)
        {
            int char_index = m_active_textbox.SelectionStart;
            if (char_index > 0)
            {
                return GetLetterAtChar(char_index);
            }
        }
        return null;
    }
    private Verse GetVerseAtPointer(MouseEventArgs e)
    {
        return GetVerseAtLocation(e.Location);
    }
    private Word GetWordAtPointer(MouseEventArgs e)
    {
        return GetWordAtLocation(e.Location);
    }
    private Letter GetLetterAtPointer(MouseEventArgs e)
    {
        return GetLetterAtLocation(e.Location);
    }
    private Verse GetVerseAtLocation(Point mouse_location)
    {
        if (m_active_textbox != null)
        {
            int char_index = m_active_textbox.GetCharIndexFromPosition(mouse_location);
            if (char_index > 0)
            {
                return GetVerseAtChar(char_index);
            }
        }
        return null;
    }
    private Word GetWordAtLocation(Point mouse_location)
    {
        if (m_active_textbox != null)
        {
            int char_index = m_active_textbox.GetCharIndexFromPosition(mouse_location);
            if (char_index > 0)
            {
                return GetWordAtChar(char_index);
            }
        }
        return null;
    }
    private Letter GetLetterAtLocation(Point mouse_location)
    {
        if (m_active_textbox != null)
        {
            int char_index = m_active_textbox.GetCharIndexFromPosition(mouse_location);
            if (char_index > 0)
            {
                return GetLetterAtChar(char_index);
            }
        }
        return null;
    }
    // helper helpers
    private Verse GetVerseAtChar(int char_index)
    {
        if (m_client != null)
        {
            List<Verse> verses = null;
            if (m_found_verses_displayed)
            {
                verses = m_client.FoundVerses;
            }
            else
            {
                if (m_client.Selection != null)
                {
                    verses = m_client.Selection.Verses;
                }
            }

            if (verses != null)
            {
                Verse scanned_verse = null;
                foreach (Verse verse in verses)
                {
                    int start = GetVerseDisplayStart(verse);
                    if (char_index < start)
                    {
                        return scanned_verse;
                    }
                    scanned_verse = verse;
                }
                return scanned_verse;
            }
        }
        return null;
    }
    private Word GetWordAtChar(int char_index)
    {
        Word word = null;
        if (m_client != null)
        {
            if (m_found_verses_displayed)
            {
                List<Verse> verses = m_client.FoundVerses;
                if (verses != null)
                {
                    foreach (Verse verse in verses)
                    {
                        int length = GetVerseDisplayLength(verse);
                        if (char_index >= length)
                        {
                            char_index -= length;
                        }
                        else
                        {
                            // verse found, remove verse address
                            char_index -= verse.Address.Length + 1; // \t

                            int word_index = CalculateWordIndex(verse, char_index);
                            if ((word_index >= 0) && (word_index < verse.Words.Count))
                            {
                                word = verse.Words[word_index];
                                break;
                            }
                        }
                    }
                }
            }
            else
            {
                if (m_client.Selection != null)
                {
                    List<Verse> verses = m_client.Selection.Verses;
                    if (verses != null)
                    {
                        foreach (Verse verse in verses)
                        {
                            if ((char_index >= verse.Text.Length) && (char_index < (verse.Text.Length + verse.Endmark.Length - 1)))
                            {
                                return null; // don't return a word at verse Endmark
                            }

                            int length = GetVerseDisplayLength(verse);
                            if (char_index >= length)
                            {
                                char_index -= length;
                            }
                            else
                            {
                                int word_index = CalculateWordIndex(verse, char_index);
                                if ((word_index >= 0) && (word_index < verse.Words.Count))
                                {
                                    word = verse.Words[word_index];
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        return word;
    }
    private Letter GetLetterAtChar(int char_index)
    {
        if (m_client != null)
        {
            if (m_found_verses_displayed)
            {
                List<Verse> verses = m_client.FoundVerses;
                if (verses != null)
                {
                    foreach (Verse verse in verses)
                    {
                        int length = GetVerseDisplayLength(verse);
                        if (char_index >= length)
                        {
                            char_index -= length;
                        }
                        else
                        {
                            // remove verse address
                            char_index -= verse.Address.Length + 1; // \t

                            int letter_index = CalculateLetterIndex(verse, char_index);
                            if ((letter_index >= 0) && (letter_index < verse.LetterCount))
                            {
                                return verse.GetLetter(letter_index);
                            }
                        }
                    }
                }
            }
            else
            {
                if (m_client.Selection != null)
                {
                    List<Verse> verses = m_client.Selection.Verses;
                    if (verses != null)
                    {
                        foreach (Verse verse in verses)
                        {
                            int length = GetVerseDisplayLength(verse);
                            if (char_index >= length)
                            {
                                char_index -= length;
                            }
                            else
                            {
                                int letter_index = CalculateLetterIndex(verse, char_index);
                                if ((letter_index >= 0) && (letter_index < verse.LetterCount))
                                {
                                    return verse.GetLetter(letter_index);
                                }
                            }
                        }
                    }
                }
            }
        }
        return null;
    }
    // helper helper helpers
    /// <summary>
    /// Use only when no duplicate verses are displayed like with VerseRanges or ChapterRanges
    /// </summary>
    /// <param name="verse"></param>
    /// <returns>index of first matching verse</returns>
    private int GetVerseIndex(Verse verse)
    {
        if (m_client != null)
        {
            List<Verse> verses = null;
            if (m_found_verses_displayed)
            {
                verses = m_client.FoundVerses;
            }
            else
            {
                if (m_client.Selection != null)
                {
                    verses = m_client.Selection.Verses;
                }
            }

            if (verses != null)
            {
                int verse_index = -1;
                foreach (Verse v in verses)
                {
                    verse_index++;
                    if (v == verse)
                    {
                        return verse_index;
                    }
                }
            }
        }
        return -1;
    }
    private int CalculateWordIndex(Verse verse, int char_index)
    {
        int word_index = -1;
        if (verse != null)
        {
            string[] word_texts = verse.Text.Split();
            foreach (string word_text in word_texts)
            {
                // skip stopmarks (1-letter words), except real Quranic 1-letter words
                if (
                     (word_text.Length == 1)
                     &&
                     !((word_text == "_") || (word_text == "ص") || (word_text == "ق") || (word_text == "ن") || (word_text == "و"))
                   )
                {
                    // skip stopmark words
                    char_index -= word_text.Length + 1; // 1 for stopmark
                }
                else
                {
                    word_index++;

                    if (char_index <= word_text.Length)
                    {
                        break;
                    }
                    char_index -= word_text.Length + 1; // 1 for space
                }
            }
        }
        return word_index;
    }
    private int CalculateLetterIndex(Verse verse, int char_index)
    {
        int letter_index = -1;
        if (verse != null)
        {
            // before verse start
            if (char_index < 0)
            {
                char_index = 0;
            }
            // after verse end
            else if (char_index >= verse.Text.Length)
            {
                char_index = verse.Text.Length - 1;
            }

            for (int i = 0; i <= char_index; i++)
            {
                if ((Globals.EDITION == Edition.Standard) || (Globals.EDITION == Edition.Grammar))
                {
                    if (Constants.ARABIC_LETTERS.Contains(verse.Text[i]))
                    {
                        letter_index++;
                    }
                }
                else // Research and Ultimate Editions
                {
                    if ((Constants.ARABIC_LETTERS.Contains(verse.Text[i])) || (Constants.DIACRITICS.Contains(verse.Text[i])))
                    {
                        letter_index++;
                    }
                }
            }
        }
        return letter_index;
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Chapters
    ///////////////////////////////////////////////////////////////////////////////
    private void PopulateChapterSortComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) ChapterSortComboBox.SelectedIndexChanged -= new EventHandler(ChapterSortComboBox_SelectedIndexChanged);
            ChapterSortComboBox.BeginUpdate();

            ChapterSortComboBox.Items.Clear();
            ChapterSortComboBox.Items.Add("By Compilation");
            ChapterSortComboBox.Items.Add("By Revelation");
            ChapterSortComboBox.Items.Add("By Verses");
            ChapterSortComboBox.Items.Add("By Words");
            ChapterSortComboBox.Items.Add("By Letters");
            ChapterSortComboBox.Items.Add("By Value");

            ChapterSortComboBox.SelectedIndex = 0;
        }
        finally
        {
            ChapterSortComboBox.EndUpdate();
            ChapterSortComboBox.SelectedIndexChanged += new EventHandler(ChapterSortComboBox_SelectedIndexChanged);
        }
    }
    private void PopulateChapterComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) ChapterComboBox.SelectedIndexChanged -= new EventHandler(ChapterComboBox_SelectedIndexChanged);
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    ChapterComboBox.BeginUpdate();
                    ChapterComboBox.Items.Clear();
                    if (m_client.Book.Chapters != null)
                    {
                        foreach (Chapter chapter in m_client.Book.Chapters)
                        {
                            ChapterComboBox.Items.Add(chapter.SortedNumber + " - " + chapter.Name);
                        }
                    }
                }
            }
        }
        finally
        {
            ChapterComboBox.EndUpdate();
            ChapterComboBox.SelectedIndexChanged += new EventHandler(ChapterComboBox_SelectedIndexChanged);
        }
    }
    private void PopulateChaptersListBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) ChaptersListBox.SelectedIndexChanged -= new EventHandler(ChaptersListBox_SelectedIndexChanged);
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    ChaptersListBox.BeginUpdate();

                    ChaptersListBox.Items.Clear();
                    ChaptersListBox.ClearItemColors(); // cannot override Items.Clear cos not virtual so use this wrapper method
                    if (m_client.Book.Chapters != null)
                    {
                        if (m_found_verses_displayed)
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                ChaptersListBox.Items.Add(String.Format("{0,-3} {2,-3}  {1}", chapter.SortedNumber, chapter.Name, chapter.Verses.Count));

                                int match_count = 0;
                                if (m_matches_per_chapter != null)
                                {
                                    match_count = m_matches_per_chapter[chapter.SortedNumber - 1];
                                }

                                // use color shading to represent match_count visually
                                Color color = ChaptersListBox.BackColor;
                                if (match_count > 0)
                                {
                                    int red = 224;
                                    int green = 224;
                                    int blue = 255;
                                    green -= (match_count * 16);
                                    if (green < 0)
                                    {
                                        red += green;
                                        green = 0;
                                    }
                                    if (red < 0)
                                    {
                                        blue += red;
                                        red = 0;
                                    }
                                    if (blue < 0)
                                    {
                                        blue = 0;
                                    }
                                    color = Color.FromArgb(red, green, blue);
                                }
                                ChaptersListBox.SetItemColor(chapter.SortedNumber - 1, color);

                                int matching_chapters = 0;
                                if (m_matches_per_chapter != null)
                                {
                                    foreach (int chapter_match_count in m_matches_per_chapter)
                                    {
                                        if (chapter_match_count > 0)
                                        {
                                            matching_chapters++;
                                        }
                                    }
                                }
                                ChapterGroupBox.ForeColor = Color.Black;
                                ChapterGroupBox.Text = ((matching_chapters > 99) ? "" : ((matching_chapters > 9) ? " " : "  ")) + matching_chapters + " Chapters        ";
                                this.ToolTip.SetToolTip(this.ChapterGroupBox, "Found chapters");
                            }
                        }
                        else // selection displayed
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                ChaptersListBox.Items.Add(String.Format("{0,-3} {2,-3}  {1}", chapter.SortedNumber, chapter.Name, chapter.Verses.Count));
                                ChaptersListBox.SetItemColor(chapter.SortedNumber - 1, CHAPTER_INITIALIZATION_COLORS[(int)chapter.InitializationType]);
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            ChaptersListBox.EndUpdate();
            ChaptersListBox.SelectedIndexChanged += new EventHandler(ChaptersListBox_SelectedIndexChanged);
        }
    }
    private void PopulateChapterSelectionComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) ChapterSelectionComboBox.SelectedIndexChanged -= new EventHandler(ChapterSelectionComboBox_SelectedIndexChanged);

            ChapterSelectionComboBox.BeginUpdate();
            ChapterSelectionComboBox.Items.Clear();
            foreach (ChapterSelection item in Enum.GetValues(typeof(ChapterSelection)))
            {
                ChapterSelectionComboBox.Items.Add(item + " chapter" + ((((item.ToString() == "Any") || (item.ToString() == "Key")) ? "" : "s")));
                //ChapterSelectionComboBox.Items.Add(item);
            }
            if (ChapterSelectionComboBox.Items.Count > 0)
            {
                ChapterSelectionComboBox.SelectedIndex = 0;
            }
        }
        finally
        {
            ChapterSelectionComboBox.EndUpdate();
            ChapterSelectionComboBox.SelectedIndexChanged += new EventHandler(ChapterSelectionComboBox_SelectedIndexChanged);
        }
    }
    private Chapter GetCurrentChapter()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                Verse verse = GetCurrentVerse();
                if (verse != null)
                {
                    return verse.Chapter;
                }
            }
        }
        return null;
    }
    private List<Chapter> GetCurrentChapters()
    {
        List<Chapter> result = new List<Chapter>();
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                List<Verse> verses = GetCurrentVerses();
                if (verses != null)
                {
                    result = m_client.Book.GetChapters(verses);
                }
            }
        }
        return result;
    }

    private ChapterSelection m_chapter_selection = ChapterSelection.Any;
    private void ChapterSelectionComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        m_chapter_selection = (ChapterSelection)(ChapterSelectionComboBox.SelectedIndex);
        DisplayChapterSelection();
        ChapterSelectionComboBox.Focus();
    }
    private void DisplayChapterSelection()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                SelectionScope scope = SelectionScope.Chapter;
                List<int> indexes = new List<int>();
                switch (m_chapter_selection)
                {
                    case ChapterSelection.Any:
                        {
                            // keep current selection
                            indexes = m_client.Selection.Indexes;
                        }
                        break;
                    case ChapterSelection.Key:
                        {
                            indexes.Add(0);
                        }
                        break;
                    case ChapterSelection.Makkah:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (chapter.RevelationPlace == RevelationPlace.Makkah)
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Medina:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (chapter.RevelationPlace == RevelationPlace.Medina)
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Initialized:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if ((chapter.InitializationType == InitializationType.PartiallyInitialized) ||
                                    (chapter.InitializationType == InitializationType.FullyInitialized) ||
                                    (chapter.InitializationType == InitializationType.DoublyInitialized))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.NonInitialized:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if ((chapter.InitializationType == InitializationType.NonInitialized) ||
                                    (chapter.InitializationType == InitializationType.Key))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Even:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsEven(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Odd:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsOdd(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_E:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsEven(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_O:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsOdd(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.E_E:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsEven(chapter.SortedNumber) && Numbers.IsEven(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.E_O:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsEven(chapter.SortedNumber) && Numbers.IsOdd(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.O_O:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsOdd(chapter.SortedNumber) && Numbers.IsOdd(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.O_E:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsOdd(chapter.SortedNumber) && Numbers.IsEven(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.E_E_and_O_O:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsEven(chapter.SortedNumber) && Numbers.IsEven(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsOdd(chapter.SortedNumber) && Numbers.IsOdd(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.E_O_and_O_E:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsEven(chapter.SortedNumber) && Numbers.IsOdd(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsOdd(chapter.SortedNumber) && Numbers.IsEven(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Composite:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsComposite(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Prime:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsPrime(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_C:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_P:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsPrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.C_C:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsComposite(chapter.SortedNumber) && Numbers.IsComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.C_P:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsComposite(chapter.SortedNumber) && Numbers.IsPrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.P_P:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsPrime(chapter.SortedNumber) && Numbers.IsPrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.P_C:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsPrime(chapter.SortedNumber) && Numbers.IsComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.C_C_and_P_P:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsComposite(chapter.SortedNumber) && Numbers.IsComposite(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsPrime(chapter.SortedNumber) && Numbers.IsPrime(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.C_P_and_P_C:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsComposite(chapter.SortedNumber) && Numbers.IsPrime(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsPrime(chapter.SortedNumber) && Numbers.IsComposite(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AdditiveComposite:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditiveComposite(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AdditivePrime:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditivePrime(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_AC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditiveComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_AP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditivePrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AC_AC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditiveComposite(chapter.SortedNumber) && Numbers.IsAdditiveComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AC_AP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditiveComposite(chapter.SortedNumber) && Numbers.IsAdditivePrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AP_AP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditivePrime(chapter.SortedNumber) && Numbers.IsAdditivePrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AP_AC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsAdditivePrime(chapter.SortedNumber) && Numbers.IsAdditiveComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AC_AC_and_AP_AP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsAdditiveComposite(chapter.SortedNumber) && Numbers.IsAdditiveComposite(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsAdditivePrime(chapter.SortedNumber) && Numbers.IsAdditivePrime(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.AC_AP_and_AP_AC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsAdditiveComposite(chapter.SortedNumber) && Numbers.IsAdditivePrime(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsAdditivePrime(chapter.SortedNumber) && Numbers.IsAdditiveComposite(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.NonAdditiveComposite:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditiveComposite(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.NonAdditivePrime:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditivePrime(chapter.SortedNumber))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_XC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditiveComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Any_XP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditivePrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.XC_XC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditiveComposite(chapter.SortedNumber) && Numbers.IsNonAdditiveComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.XC_XP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditiveComposite(chapter.SortedNumber) && Numbers.IsNonAdditivePrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.XP_XP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditivePrime(chapter.SortedNumber) && Numbers.IsNonAdditivePrime(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.XP_XC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (Numbers.IsNonAdditivePrime(chapter.SortedNumber) && Numbers.IsNonAdditiveComposite(chapter.Verses.Count))
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.XC_XC_and_XP_XP:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsNonAdditiveComposite(chapter.SortedNumber) && Numbers.IsNonAdditiveComposite(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsNonAdditivePrime(chapter.SortedNumber) && Numbers.IsNonAdditivePrime(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.XC_XP_and_XP_XC:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (
                                    (Numbers.IsNonAdditiveComposite(chapter.SortedNumber) && Numbers.IsNonAdditivePrime(chapter.Verses.Count))
                                    ||
                                    (Numbers.IsNonAdditivePrime(chapter.SortedNumber) && Numbers.IsNonAdditiveComposite(chapter.Verses.Count))
                                   )
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Heavy:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (chapter.SortedNumber <= chapter.Verses.Count)
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.Light:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                if (chapter.SortedNumber > chapter.Verses.Count)
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                        break;
                    case ChapterSelection.All:
                        {
                            foreach (Chapter chapter in m_client.Book.Chapters)
                            {
                                indexes.Add(chapter.Number - 1);
                            }
                        }
                        break;
                }
                m_client.Selection = new Selection(m_client.Book, scope, indexes);

                UpdateChaptersListBox();
                UpdateSelection(); // needed again, otherwise hangs. Why?

                DisplaySelection(true);

                ChaptersListBox.Focus();
            }
        }
    }

    private void DisplayChapterRevelationInfo()
    {
        if (m_found_verses_displayed) return;

        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (ChapterComboBox.SelectedIndex > -1)
                {
                    int index = ChapterComboBox.SelectedIndex;
                    if (m_client.Book.Chapters != null)
                    {
                        Chapter chapter = m_client.Book.Chapters[index];
                        if (chapter != null)
                        {
                            string arabic_revelation_place = null;
                            switch (chapter.RevelationPlace)
                            {
                                case RevelationPlace.Makkah:
                                    arabic_revelation_place = "مكّية";
                                    break;
                                case RevelationPlace.Medina:
                                    arabic_revelation_place = "مدنيّة";
                                    break;
                                default:
                                    arabic_revelation_place = "";
                                    break;
                            }
                            ChapterGroupBox.Text = "     " + chapter.RevelationOrder.ToString() + " - " + arabic_revelation_place + "        ";
                            //ChapterGroupBox.Text = "     " + chapter.RevelationOrder.ToString().ToNth() + " - " + arabic_revelation_place + "        ";
                        }
                    }
                }
                else
                {
                    ChapterGroupBox.Text = "";
                }
                this.ToolTip.SetToolTip(this.ChapterGroupBox, "Revelation التنزيل");

                UpdateChapterGroupBoxTextColor();
            }
        }
    }
    private void UpdateSelection()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (ChaptersListBox.SelectedIndices.Count > 0)
                {
                    SelectionScope scope = SelectionScope.Chapter;
                    List<int> indexes = new List<int>();
                    for (int i = 0; i < ChaptersListBox.SelectedIndices.Count; i++)
                    {
                        int selected_index = ChaptersListBox.SelectedIndices[i];
                        if (m_client.Book.Chapters != null)
                        {
                            if ((selected_index >= 0) && (selected_index < m_client.Book.Chapters.Count))
                            {
                                Chapter chapter = m_client.Book.Chapters[selected_index];
                                if (chapter != null)
                                {
                                    indexes.Add(chapter.Number - 1);
                                }
                            }
                        }
                    }
                    m_client.Selection = new Selection(m_client.Book, scope, indexes);
                }
            }
        }
    }
    private void UpdateChaptersListBox()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Selection != null)
                {
                    try
                    {
                        for (int i = 0; i < 3; i++) ChaptersListBox.SelectedIndexChanged -= new EventHandler(ChaptersListBox_SelectedIndexChanged);
                        if (m_found_verses_displayed)
                        {
                            //??? wrongly removes selections of FindChapters result
                            //??? selects found chapters losing all color-shade information
                            //if (m_client.FoundVerses != null)
                            //{
                            //    List<Chapter> chapters = m_client.Book.GetChapters(m_client.FoundVerses);
                            //    ChaptersListBox.SelectedIndices.Clear();
                            //    foreach (Chapter chapter in chapters)
                            //    {
                            //        ChaptersListBox.SelectedIndices.Add(chapter.Number - 1);
                            //    }
                            //}
                        }
                        else
                        {
                            if (m_client.Selection.Chapters != null)
                            {
                                ChaptersListBox.SelectedIndices.Clear();
                                foreach (Chapter chapter in m_client.Selection.Chapters)
                                {
                                    ChaptersListBox.SelectedIndices.Add(chapter.SortedNumber - 1);
                                }
                            }
                        }
                    }
                    finally
                    {
                        ChaptersListBox.SelectedIndexChanged += new EventHandler(ChaptersListBox_SelectedIndexChanged);
                    }
                }
            }
        }
    }
    private void UpdateMinMaxChapterVerseWordLetter(int chapter_index)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Book.Chapters != null)
                {
                    if ((chapter_index >= 0) && (chapter_index < m_client.Book.Chapters.Count))
                    {
                        Chapter chapter = m_client.Book.Chapters[chapter_index];
                        if (chapter != null)
                        {
                            try
                            {
                                for (int i = 0; i < 3; i++) ChapterVerseNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                                for (int i = 0; i < 3; i++) ChapterWordNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                                for (int i = 0; i < 3; i++) ChapterLetterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);

                                ChapterVerseNumericUpDown.Minimum = 1;
                                ChapterVerseNumericUpDown.Maximum = chapter.Verses.Count;

                                ChapterWordNumericUpDown.Minimum = 1;
                                ChapterWordNumericUpDown.Maximum = chapter.WordCount;

                                ChapterLetterNumericUpDown.Minimum = 1;
                                ChapterLetterNumericUpDown.Maximum = chapter.LetterCount;
                            }
                            finally
                            {
                                ChapterVerseNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                                ChapterWordNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                                ChapterLetterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                            }
                        }
                    }
                }
            }
        }
    }
    private void UpdateChapterGroupBoxTextColor()
    {
        Verse verse = GetCurrentVerse();
        if (verse != null)
        {
            ChapterGroupBox.ForeColor = CHAPTER_INITIALIZATION_COLORS[(int)verse.Chapter.InitializationType];
            ChapterGroupBox.Refresh();
        }
    }

    private void ChapterComboBox_KeyDown(object sender, KeyEventArgs e)
    {
        bool SeparatorKeys = (
            ((e.KeyCode == Keys.Subtract) && (e.Modifiers != Keys.Shift))           // HYPHEN
            || ((e.KeyCode == Keys.OemMinus) && (e.Modifiers != Keys.Shift))        // HYPHEN
            || ((e.KeyCode == Keys.Oemcomma) && (e.Modifiers != Keys.Shift))        // COMMA
            || ((e.KeyCode == Keys.OemSemicolon) && (e.Modifiers == Keys.Shift))    // COLON
            );

        bool NumericKeys = (
            ((e.KeyCode >= Keys.D0 && e.KeyCode <= Keys.D9) || (e.KeyCode >= Keys.NumPad0 && e.KeyCode <= Keys.NumPad9))
            && e.Modifiers != Keys.Shift);

        bool EditKeys = (
            (e.KeyCode == Keys.A && e.Modifiers == Keys.Control) ||
            (e.KeyCode == Keys.Z && e.Modifiers == Keys.Control) ||
            (e.KeyCode == Keys.X && e.Modifiers == Keys.Control) ||
            (e.KeyCode == Keys.C && e.Modifiers == Keys.Control) ||
            (e.KeyCode == Keys.V && e.Modifiers == Keys.Control) ||
            e.KeyCode == Keys.Delete ||
            e.KeyCode == Keys.Back);

        bool NavigationKeys = (
            e.KeyCode == Keys.Up ||
            e.KeyCode == Keys.Right ||
            e.KeyCode == Keys.Down ||
            e.KeyCode == Keys.Left ||
            e.KeyCode == Keys.Home ||
            e.KeyCode == Keys.End);

        bool ExecuteKeys = (e.KeyCode == Keys.Enter);

        if (ExecuteKeys)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    try
                    {
                        string text = ChapterComboBox.Text;
                        if (!String.IsNullOrEmpty(text))
                        {
                            // 1, 3-4, 5:55, 3-4:19, 6:19-23, 24:35-27:62
                            SelectionScope scope = SelectionScope.Verse;
                            List<int> indexes = new List<int>();

                            foreach (string part in text.Split(','))
                            {
                                string[] range_parts = part.Split('-');
                                if (range_parts.Length == 1) // 1 | 5:55
                                {
                                    string[] sub_range_parts = part.Split(':');
                                    if (sub_range_parts.Length == 1) // 1
                                    {
                                        int chapter_number;
                                        if (int.TryParse(sub_range_parts[0], out chapter_number))
                                        {
                                            Chapter chapter = null;
                                            if (m_client.Book.Chapters != null)
                                            {
                                                foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                {
                                                    if (book_chapter.SortedNumber == chapter_number)
                                                    {
                                                        chapter = book_chapter;
                                                        break;
                                                    }
                                                }

                                                if (chapter != null)
                                                {
                                                    foreach (Verse verse in chapter.Verses)
                                                    {
                                                        if (!indexes.Contains(verse.Number - 1))
                                                        {
                                                            indexes.Add(verse.Number - 1);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else if (sub_range_parts.Length == 2) // 5:55
                                    {
                                        int chapter_number;
                                        if (int.TryParse(sub_range_parts[0], out chapter_number)) // 5:55
                                        {
                                            int verse_number_in_chapter;
                                            if (int.TryParse(sub_range_parts[1], out verse_number_in_chapter))
                                            {
                                                Chapter chapter = null;
                                                if (m_client.Book.Chapters != null)
                                                {
                                                    foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                    {
                                                        if (book_chapter.SortedNumber == chapter_number)
                                                        {
                                                            chapter = book_chapter;
                                                            break;
                                                        }
                                                    }

                                                    if (chapter != null)
                                                    {
                                                        if (((verse_number_in_chapter - 1 >= 0) && ((verse_number_in_chapter - 1) < chapter.Verses.Count)))
                                                        {
                                                            int from_verse_index = chapter.Verses[verse_number_in_chapter - 1].Number - 1;
                                                            if (!indexes.Contains(from_verse_index))
                                                            {
                                                                indexes.Add(from_verse_index);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (range_parts.Length == 2) // 3-4, 3-4:19, 6:19-23, 24:35-27:62
                                {
                                    int from_chapter_number;
                                    int to_chapter_number;
                                    if (int.TryParse(range_parts[0], out from_chapter_number))
                                    {
                                        if (int.TryParse(range_parts[1], out to_chapter_number)) // 3-4
                                        {
                                            if (from_chapter_number <= to_chapter_number)
                                            {
                                                for (int number = from_chapter_number; number <= to_chapter_number; number++)
                                                {
                                                    Chapter chapter = null;
                                                    if (m_client.Book.Chapters != null)
                                                    {
                                                        foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                        {
                                                            if (book_chapter.SortedNumber == number)
                                                            {
                                                                chapter = book_chapter;
                                                                break;
                                                            }
                                                        }

                                                        if (chapter != null)
                                                        {
                                                            foreach (Verse verse in chapter.Verses)
                                                            {
                                                                if (!indexes.Contains(verse.Number - 1))
                                                                {
                                                                    indexes.Add(verse.Number - 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            else // backward 4-3
                                            {
                                                for (int number = from_chapter_number; number >= to_chapter_number; number--)
                                                {
                                                    Chapter chapter = null;
                                                    if (m_client.Book.Chapters != null)
                                                    {
                                                        foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                        {
                                                            if (book_chapter.SortedNumber == number)
                                                            {
                                                                chapter = book_chapter;
                                                                break;
                                                            }
                                                        }

                                                        if (chapter != null)
                                                        {
                                                            foreach (Verse verse in chapter.Verses)
                                                            {
                                                                if (!indexes.Contains(verse.Number - 1))
                                                                {
                                                                    indexes.Add(verse.Number - 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        else // 3-4:19
                                        {
                                            // range_parts[0] == 3
                                            // range_parts[1] == 4:19
                                            string[] to_range_parts = range_parts[1].Split(':'); // 4:19
                                            if (to_range_parts.Length == 2)
                                            {
                                                if (int.TryParse(to_range_parts[0], out to_chapter_number))  // 4
                                                {
                                                    int from_verse_number_in_chapter;
                                                    int to_verse_number_in_chapter;
                                                    if (int.TryParse(to_range_parts[1], out to_verse_number_in_chapter)) // 19
                                                    {
                                                        Chapter from_chapter = null;
                                                        if (m_client.Book.Chapters != null)
                                                        {
                                                            foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                            {
                                                                if (book_chapter.SortedNumber == from_chapter_number)
                                                                {
                                                                    from_chapter = book_chapter;
                                                                    break;
                                                                }
                                                            }

                                                            if (from_chapter != null)
                                                            {
                                                                if (from_chapter_number <= to_chapter_number)
                                                                {
                                                                    from_verse_number_in_chapter = 1; // start from first verse in chapter
                                                                }
                                                                else
                                                                {
                                                                    from_verse_number_in_chapter = from_chapter.Verses.Count; // start from last verse in chapter
                                                                }

                                                                if (((from_verse_number_in_chapter - 1 >= 0) && ((from_verse_number_in_chapter - 1) < from_chapter.Verses.Count)))
                                                                {
                                                                    int from_verse_index = from_chapter.Verses[from_verse_number_in_chapter - 1].Number - 1;

                                                                    Chapter to_chapter = null;
                                                                    foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                                    {
                                                                        if (book_chapter.SortedNumber == to_chapter_number)
                                                                        {
                                                                            to_chapter = book_chapter;
                                                                            break;
                                                                        }
                                                                    }
                                                                    if (to_chapter != null)
                                                                    {
                                                                        if (((to_verse_number_in_chapter - 1 >= 0) && ((to_verse_number_in_chapter - 1) < to_chapter.Verses.Count)))
                                                                        {
                                                                            int to_verse_index = to_chapter.Verses[to_verse_number_in_chapter - 1].Number - 1;

                                                                            if (from_verse_index <= to_verse_index)  // XX:19-23
                                                                            {
                                                                                for (int i = from_verse_index; i <= to_verse_index; i++)
                                                                                {
                                                                                    if (!indexes.Contains(i))
                                                                                    {
                                                                                        indexes.Add(i);
                                                                                    }
                                                                                }
                                                                            }
                                                                            else // backward XX:32-19
                                                                            {
                                                                                for (int i = from_verse_index; i >= to_verse_index; i--)
                                                                                {
                                                                                    if (!indexes.Contains(i))
                                                                                    {
                                                                                        indexes.Add(i);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    else // "range_parts[0]" contains a colon ':'  // "6:19"-23, "24:35"-27:62
                                    {
                                        //int from_chapter_number;
                                        //int to_chapter_number;
                                        string[] from_parts = range_parts[0].Split(':');
                                        if (from_parts.Length == 2)
                                        {
                                            int from_verse_number_in_chapter;
                                            if (int.TryParse(from_parts[0], out from_chapter_number))
                                            {
                                                if (int.TryParse(from_parts[1], out from_verse_number_in_chapter))
                                                {
                                                    string[] to_parts = range_parts[1].Split(':'); // "range_parts[1]" may or may not contain a colon ':'  // 6:19-"23", 24:35-"27:62"
                                                    if (to_parts.Length == 1) // 6:19-"23"
                                                    {
                                                        int to_verse_number_in_chapter;
                                                        if (int.TryParse(to_parts[0], out to_verse_number_in_chapter))
                                                        {
                                                            if (from_verse_number_in_chapter <= to_verse_number_in_chapter)  // XX:19-23
                                                            {
                                                                Chapter from_chapter = null;
                                                                if (m_client.Book.Chapters != null)
                                                                {
                                                                    foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                                    {
                                                                        if (book_chapter.SortedNumber == from_chapter_number)
                                                                        {
                                                                            from_chapter = book_chapter;
                                                                            break;
                                                                        }
                                                                    }

                                                                    if (from_chapter != null)
                                                                    {
                                                                        if (((from_verse_number_in_chapter - 1 >= 0) && ((from_verse_number_in_chapter - 1) < from_chapter.Verses.Count)))
                                                                        {
                                                                            if (((to_verse_number_in_chapter - 1 >= 0) && ((to_verse_number_in_chapter - 1) < from_chapter.Verses.Count)))
                                                                            {
                                                                                int from_verse_index = from_chapter.Verses[from_verse_number_in_chapter - 1].Number - 1;
                                                                                int to_verse_index = from_chapter.Verses[to_verse_number_in_chapter - 1].Number - 1;
                                                                                for (int i = from_verse_index; i <= to_verse_index; i++)
                                                                                {
                                                                                    if (!indexes.Contains(i))
                                                                                    {
                                                                                        indexes.Add(i);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else // backward 1:7-5
                                                            {
                                                                Chapter from_chapter = null;
                                                                if (m_client.Book.Chapters != null)
                                                                {
                                                                    foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                                    {
                                                                        if (book_chapter.SortedNumber == from_chapter_number)
                                                                        {
                                                                            from_chapter = book_chapter;
                                                                            break;
                                                                        }
                                                                    }

                                                                    if (from_chapter != null)
                                                                    {
                                                                        if (((from_verse_number_in_chapter - 1 >= 0) && ((from_verse_number_in_chapter - 1) < from_chapter.Verses.Count)))
                                                                        {
                                                                            if (((to_verse_number_in_chapter - 1 >= 0) && ((to_verse_number_in_chapter - 1) < from_chapter.Verses.Count)))
                                                                            {
                                                                                int from_verse_index = from_chapter.Verses[from_verse_number_in_chapter - 1].Number - 1;
                                                                                int to_verse_index = from_chapter.Verses[to_verse_number_in_chapter - 1].Number - 1;
                                                                                for (int i = from_verse_index; i >= to_verse_index; i--)
                                                                                {
                                                                                    if (!indexes.Contains(i))
                                                                                    {
                                                                                        indexes.Add(i);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else if (to_parts.Length == 2) // 24:35-"27:62"
                                                    {
                                                        int to_verse_number_in_chapter;
                                                        if (int.TryParse(to_parts[0], out to_chapter_number))
                                                        {
                                                            if (int.TryParse(to_parts[1], out to_verse_number_in_chapter))
                                                            {
                                                                if (from_chapter_number <= to_chapter_number)  // 24:XX-27:XX // only worry about chapters
                                                                {
                                                                    Chapter from_chapter = null;
                                                                    if (m_client.Book.Chapters != null)
                                                                    {
                                                                        foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                                        {
                                                                            if (book_chapter.SortedNumber == from_chapter_number)
                                                                            {
                                                                                from_chapter = book_chapter;
                                                                                break;
                                                                            }
                                                                        }

                                                                        if (from_chapter != null)
                                                                        {
                                                                            if (((from_verse_number_in_chapter - 1 >= 0) && ((from_verse_number_in_chapter - 1) < from_chapter.Verses.Count)))
                                                                            {
                                                                                int from_verse_index = from_chapter.Verses[from_verse_number_in_chapter - 1].Number - 1;
                                                                                Chapter to_chapter = null;
                                                                                foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                                                {
                                                                                    if (book_chapter.SortedNumber == to_chapter_number)
                                                                                    {
                                                                                        to_chapter = book_chapter;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                if (to_chapter != null)
                                                                                {
                                                                                    if (((to_verse_number_in_chapter - 1 >= 0) && ((to_verse_number_in_chapter - 1) < to_chapter.Verses.Count)))
                                                                                    {
                                                                                        int to_verse_index = to_chapter.Verses[to_verse_number_in_chapter - 1].Number - 1;
                                                                                        for (int i = from_verse_index; i <= to_verse_index; i++)
                                                                                        {
                                                                                            if (!indexes.Contains(i))
                                                                                            {
                                                                                                indexes.Add(i);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else // backward   // 27:XX-24:XX // only worry about chapters
                                                                {
                                                                    Chapter from_chapter = null;
                                                                    if (m_client.Book.Chapters != null)
                                                                    {
                                                                        foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                                        {
                                                                            if (book_chapter.SortedNumber == from_chapter_number)
                                                                            {
                                                                                from_chapter = book_chapter;
                                                                                break;
                                                                            }
                                                                        }

                                                                        if (from_chapter != null)
                                                                        {
                                                                            if (((from_verse_number_in_chapter - 1 >= 0) && ((from_verse_number_in_chapter - 1) < from_chapter.Verses.Count)))
                                                                            {
                                                                                int from_verse_index = from_chapter.Verses[from_verse_number_in_chapter - 1].Number - 1;
                                                                                Chapter to_chapter = null;
                                                                                foreach (Chapter book_chapter in m_client.Book.Chapters)
                                                                                {
                                                                                    if (book_chapter.SortedNumber == to_chapter_number)
                                                                                    {
                                                                                        to_chapter = book_chapter;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                if (to_chapter != null)
                                                                                {
                                                                                    if (((to_verse_number_in_chapter - 1 >= 0) && ((to_verse_number_in_chapter - 1) < to_chapter.Verses.Count)))
                                                                                    {
                                                                                        int to_verse_index = to_chapter.Verses[to_verse_number_in_chapter - 1].Number - 1;
                                                                                        for (int i = from_verse_index; i >= to_verse_index; i--)
                                                                                        {
                                                                                            if (!indexes.Contains(i))
                                                                                            {
                                                                                                indexes.Add(i);
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if (indexes.Count > 0)
                            {
                                m_client.Selection = new Selection(m_client.Book, scope, indexes);

                                PlayerStopLabel_Click(null, null);

                                DisplaySelection(true);
                            }
                            else
                            {
                                e.Handled = false;
                            }
                        }
                    }
                    catch
                    {
                        // log exception
                    }
                }
            }
        }

        // reject all other keys
        if (!(SeparatorKeys || NumericKeys || EditKeys || NavigationKeys))
        {
            e.SuppressKeyPress = true;
            e.Handled = true;
        }
    }
    private void ChapterComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                List<Chapter> chapters = m_client.Book.Chapters;
                int index = ChapterComboBox.SelectedIndex;
                if ((index >= 0) && (index < chapters.Count))
                {
                    int chapter_index = chapters[index].Number - 1;

                    if (
                         ChapterComboBox.Focused ||
                         ChapterVerseNumericUpDown.Focused ||
                         ChapterWordNumericUpDown.Focused ||
                         ChapterLetterNumericUpDown.Focused ||
                         PageNumericUpDown.Focused ||
                         StationNumericUpDown.Focused ||
                         PartNumericUpDown.Focused ||
                         GroupNumericUpDown.Focused ||
                         HalfNumericUpDown.Focused ||
                         QuarterNumericUpDown.Focused ||
                         BowingNumericUpDown.Focused ||
                         VerseNumericUpDown.Focused ||
                         WordNumericUpDown.Focused ||
                         LetterNumericUpDown.Focused
                     )
                    {
                        UpdateSelection();
                    }
                    else if ((sender == PreviousBookmarkButton) || (sender == NextBookmarkButton))
                    {
                    }
                    else if ((sender == SelectionHistoryBackwardButton) || (sender == SelectionHistoryForwardButton))
                    {
                    }
                    else
                    {
                    }

                    PlayerStopLabel_Click(null, null);

                    DisplaySelection(false);
                }
            }
        }
    }

    private int m_previous_index = -1;
    private void ChaptersListBox_MouseMove(object sender, MouseEventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                int index = ChaptersListBox.IndexFromPoint(e.Location);
                if (index != m_previous_index)
                {
                    m_previous_index = index;
                    if ((index >= 0) && (index < m_client.Book.Chapters.Count))
                    {
                        Chapter chapter = m_client.Book.Chapters[index];
                        if (chapter != null)
                        {
                            int match_count = 0;
                            if (m_matches_per_chapter != null)
                            {
                                if ((index >= 0) && (index < m_matches_per_chapter.Length))
                                {
                                    match_count = m_matches_per_chapter[index];
                                }
                            }

                            if (chapter.Verses != null)
                            {
                                if (chapter.Verses.Count > 2)
                                {
                                    ToolTip.SetToolTip(ChaptersListBox,
                                        chapter.SortedNumber.ToString() + " - " + chapter.TransliteratedName + " - " + chapter.EnglishName + "\r\n" +
                                        chapter.RevelationPlace.ToString() + " - " + chapter.RevelationOrder.ToString() + " \t " + chapter.Number.ToString() + "\r\n" +
                                        "Verses  \t\t " + chapter.Verses.Count.ToString() + "\r\n" +
                                        "Words   \t\t " + chapter.WordCount.ToString() + "\r\n" +
                                        "Letters \t\t " + chapter.LetterCount.ToString() + "\r\n" +
                                        "Unique Letters \t " + chapter.UniqueLetters.Count.ToString() + "\r\n" +
                                        (m_found_verses_displayed ? ("Matches" + "\t\t" + match_count.ToString() + "\r\n") : "") +
                                        "\r\n" +
                                        chapter.Verses[0].Text + ((index == 41) ? ("\r\n" + chapter.Verses[1].Text) : "")
                                    );
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    private void ChaptersListBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (sender == ChaptersListBox)
        {
            PlayerStopLabel_Click(null, null);

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_found_verses_displayed)
                    {
                        // set chapter filter
                        List<Chapter> chapters = new List<Chapter>();
                        foreach (int index in ChaptersListBox.SelectedIndices)
                        {
                            chapters.Add(m_client.Book.Chapters[index]);
                        }
                        m_client.FilterChapters = chapters;

                        int pos = m_find_result_header.IndexOf(" of ");
                        if (pos > -1)
                        {
                            m_find_result_header = m_find_result_header.Substring(pos + 4);
                        }
                        int selected_chapters_match_count = 0;
                        foreach (int index in ChaptersListBox.SelectedIndices)
                        {
                            if (m_matches_per_chapter != null)
                            {
                                if ((index >= 0) && (index < m_matches_per_chapter.Length))
                                {
                                    selected_chapters_match_count += m_matches_per_chapter[index];
                                }
                            }
                        }
                        m_find_result_header = selected_chapters_match_count + " of " + m_find_result_header;

                        ClearFindMatches(); // clear m_find_matches for F3 to work correctly in filtered result
                        if (m_search_type == SearchType.Numbers)
                        {
                            switch (m_numbers_result_type)
                            {
                                case NumbersResultType.VerseRanges:
                                    DisplayFoundVerseRanges(false, false);
                                    break;
                                case NumbersResultType.VerseSets:
                                    DisplayFoundVerseSets(false, false);
                                    break;
                                case NumbersResultType.Chapters:
                                    DisplayFoundChapters(false, false);
                                    break;
                                case NumbersResultType.ChapterRanges:
                                    DisplayFoundChapterRanges(false, false);
                                    break;
                                case NumbersResultType.ChapterSets:
                                    DisplayFoundChapterSets(false, false);
                                    break;
                                default:
                                    DisplayFoundVerses(false, false);
                                    break;
                            }
                        }
                        else
                        {
                            DisplayFoundVerses(false, false);

                            SearchResultTextBox.Focus();
                            SearchResultTextBox.Refresh();
                        }
                    }
                    else
                    {
                        UpdateSelection();
                        DisplaySelection(true);
                        if (ChapterSelectionComboBox.Items.Count > 0)
                        {
                            ChapterSelectionComboBox.SelectedIndex = 0;
                        }
                    }

                    ChaptersListBox.Focus();
                }
            }
        }
    }

    private bool m_pin_chapter1 = false;
    private ChapterSortMethod m_chapter_sort_method = ChapterSortMethod.ByCompilation;
    private ChapterSortOrder m_chapter_sort_order = ChapterSortOrder.Ascending;
    private void PinChapter1CheckBox_CheckStateChanged(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Selection != null)
                    {
                        // backup selection verses
                        List<Verse> backup_verses = new List<Verse>();
                        if (m_client.Selection.Scope == SelectionScope.Verse)
                        {
                            if (m_client.Selection.Indexes != null)
                            {
                                foreach (int index in m_client.Selection.Indexes)
                                {
                                    backup_verses.Add(m_client.Book.Verses[index]);
                                }
                            }
                        }

                        m_pin_chapter1 = PinChapter1CheckBox.Checked;
                        m_client.Book.SortChapters(m_chapter_sort_method, m_chapter_sort_order, m_pin_chapter1);

                        // restore selection verses
                        if (m_client.Selection.Scope == SelectionScope.Verse)
                        {
                            if (m_client.Selection.Indexes != null)
                            {
                                List<int> verse_indexes = new List<int>();
                                foreach (Verse verse in backup_verses)
                                {
                                    verse_indexes.Add(verse.Number - 1);
                                }
                                m_client.Selection = new Selection(m_client.Book, SelectionScope.Verse, verse_indexes);
                            }
                        }

                        // display chapters in new order
                        DisplaySortedChapters();
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void ChapterSortComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Selection != null)
                    {
                        // backup selection
                        List<Verse> backup_verses = new List<Verse>();
                        if (m_client.Selection.Scope == SelectionScope.Verse)
                        {
                            if (m_client.Selection.Indexes != null)
                            {
                                foreach (int index in m_client.Selection.Indexes)
                                {
                                    backup_verses.Add(m_client.Book.Verses[index]);
                                }
                            }
                        }

                        // do chapter sorting
                        switch (ChapterSortComboBox.SelectedIndex)
                        {
                            case 0:
                                {
                                    m_chapter_sort_method = ChapterSortMethod.ByCompilation;
                                    ToolTip.SetToolTip(ChapterSortComboBox, "حسب الورود في الكتاب");
                                    PinChapter1CheckBox.Visible = false;
                                }
                                break;
                            case 1:
                                {
                                    m_chapter_sort_method = ChapterSortMethod.ByRevelation;
                                    ToolTip.SetToolTip(ChapterSortComboBox, "حسب نزول السور");
                                    PinChapter1CheckBox.Visible = false;
                                }
                                break;
                            case 2:
                                {
                                    m_chapter_sort_method = ChapterSortMethod.ByVerses;
                                    ToolTip.SetToolTip(ChapterSortComboBox, "حسب عدد ءايات السور");
                                    PinChapter1CheckBox.Visible = true;
                                }
                                break;
                            case 3:
                                {
                                    m_chapter_sort_method = ChapterSortMethod.ByWords;
                                    ToolTip.SetToolTip(ChapterSortComboBox, "حسب عدد كلمات السور");
                                    PinChapter1CheckBox.Visible = true;
                                }
                                break;
                            case 4:
                                {
                                    m_chapter_sort_method = ChapterSortMethod.ByLetters;
                                    ToolTip.SetToolTip(ChapterSortComboBox, "حسب عدد حروف السور");
                                    PinChapter1CheckBox.Visible = true;
                                }
                                break;
                            case 5:
                                {
                                    m_chapter_sort_method = ChapterSortMethod.ByValue;
                                    ToolTip.SetToolTip(ChapterSortComboBox, "حسب قيم السور");
                                    PinChapter1CheckBox.Visible = true;
                                }
                                break;
                        }
                        m_client.Book.SortChapters(m_chapter_sort_method, m_chapter_sort_order, m_pin_chapter1);

                        // restore selection
                        if (m_client.Selection.Scope == SelectionScope.Verse)
                        {
                            if (m_client.Selection.Indexes != null)
                            {
                                List<int> verse_indexes = new List<int>();
                                foreach (Verse verse in backup_verses)
                                {
                                    verse_indexes.Add(verse.Number - 1);
                                }
                                m_client.Selection = new Selection(m_client.Book, SelectionScope.Verse, verse_indexes);
                            }
                        }

                        // display chapters in new order
                        DisplaySortedChapters();
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void ChapterSortLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Selection != null)
                    {
                        // backup selection verses
                        List<Verse> backup_verses = new List<Verse>();
                        if (m_client.Selection.Scope == SelectionScope.Verse)
                        {
                            if (m_client.Selection.Indexes != null)
                            {
                                foreach (int index in m_client.Selection.Indexes)
                                {
                                    backup_verses.Add(m_client.Book.Verses[index]);
                                }
                            }
                        }

                        if (Chapter.SortOrder == ChapterSortOrder.Ascending)
                        {
                            m_chapter_sort_order = ChapterSortOrder.Descending;
                            if (File.Exists("Images/arrow_down.png"))
                            {
                                ChapterSortLabel.Image = new Bitmap("Images/arrow_down.png");
                                ToolTip.SetToolTip(ChapterSortLabel, "ترتيب تنازلي Descending");
                            }
                        }
                        else
                        {
                            m_chapter_sort_order = ChapterSortOrder.Ascending;
                            if (File.Exists("Images/arrow_up.png"))
                            {
                                ChapterSortLabel.Image = new Bitmap("Images/arrow_up.png");
                                ToolTip.SetToolTip(ChapterSortLabel, "ترتيب نصاعدي Ascending");
                            }
                        }
                        m_client.Book.SortChapters(m_chapter_sort_method, m_chapter_sort_order, m_pin_chapter1);

                        // restore selection verses
                        if (m_client.Selection.Scope == SelectionScope.Verse)
                        {
                            if (m_client.Selection.Indexes != null)
                            {
                                List<int> verse_indexes = new List<int>();
                                foreach (Verse verse in backup_verses)
                                {
                                    verse_indexes.Add(verse.Number - 1);
                                }
                                m_client.Selection = new Selection(m_client.Book, SelectionScope.Verse, verse_indexes);
                            }
                        }

                        // display chapters in new order
                        DisplaySortedChapters();
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void UpdateChapterSortControls()
    {
        try
        {
            for (int i = 0; i < 3; i++) PinChapter1CheckBox.CheckStateChanged -= new EventHandler(PinChapter1CheckBox_CheckStateChanged);
            for (int i = 0; i < 3; i++) ChapterSortComboBox.SelectedIndexChanged -= new EventHandler(ChapterSortComboBox_SelectedIndexChanged);
            for (int i = 0; i < 3; i++) ChapterSortLabel.Click -= new EventHandler(ChapterSortLabel_Click);

            //////////////////////////////////////////////////////////
            PinChapter1CheckBox.Checked = Chapter.PinChapter1;
            //////////////////////////////////////////////////////////

            //////////////////////////////////////////////////////////
            if (ChapterSortComboBox.Items.Count == 6)
            {
                switch (Chapter.SortMethod)
                {
                    case ChapterSortMethod.ByCompilation:
                        {
                            ChapterSortComboBox.SelectedIndex = 0;
                            ToolTip.SetToolTip(ChapterSortComboBox, "حسب الورود في الكتاب");
                            PinChapter1CheckBox.Visible = false;
                        }
                        break;
                    case ChapterSortMethod.ByRevelation:
                        {
                            ChapterSortComboBox.SelectedIndex = 1;
                            ToolTip.SetToolTip(ChapterSortComboBox, "حسب نزول السور");
                            PinChapter1CheckBox.Visible = false;
                        }
                        break;
                    case ChapterSortMethod.ByVerses:
                        {
                            ChapterSortComboBox.SelectedIndex = 2;
                            ToolTip.SetToolTip(ChapterSortComboBox, "حسب عدد ءايات السور");
                            PinChapter1CheckBox.Visible = true;
                        }
                        break;
                    case ChapterSortMethod.ByWords:
                        {
                            ChapterSortComboBox.SelectedIndex = 3;
                            ToolTip.SetToolTip(ChapterSortComboBox, "حسب عدد كلمات السور");
                            PinChapter1CheckBox.Visible = true;
                        }
                        break;
                    case ChapterSortMethod.ByLetters:
                        {
                            ChapterSortComboBox.SelectedIndex = 4;
                            ToolTip.SetToolTip(ChapterSortComboBox, "حسب عدد حروف السور");
                            PinChapter1CheckBox.Visible = true;
                        }
                        break;
                    case ChapterSortMethod.ByValue:
                        {
                            ChapterSortComboBox.SelectedIndex = 5;
                            ToolTip.SetToolTip(ChapterSortComboBox, "حسب قيم السور");
                            PinChapter1CheckBox.Visible = true;
                        }
                        break;
                }
            }
            //////////////////////////////////////////////////////////

            //////////////////////////////////////////////////////////
            if (Chapter.SortOrder == ChapterSortOrder.Ascending)
            {
                if (File.Exists("Images/arrow_up.png"))
                {
                    ChapterSortLabel.Image = new Bitmap("Images/arrow_up.png");
                    ToolTip.SetToolTip(ChapterSortLabel, "ترتيب نصاعدي Ascending");
                }
            }
            else
            {
                if (File.Exists("Images/arrow_down.png"))
                {
                    ChapterSortLabel.Image = new Bitmap("Images/arrow_down.png");
                    ToolTip.SetToolTip(ChapterSortLabel, "ترتيب تنازلي Descending");
                }
            }
            //////////////////////////////////////////////////////////
        }
        finally
        {
            ChapterSortLabel.Click += new EventHandler(ChapterSortLabel_Click);
            PinChapter1CheckBox.CheckStateChanged += new EventHandler(PinChapter1CheckBox_CheckStateChanged);
            ChapterSortComboBox.SelectedIndexChanged += new EventHandler(ChapterSortComboBox_SelectedIndexChanged);
        }
    }
    private void DisplaySortedChapters()
    {
        // repopulate chapter lists with new order
        PopulateChapterComboBox();
        PopulateChaptersListBox();

        // select selected chapters
        UpdateChaptersListBox();

        // save new order of selected chapters
        UpdateSelection();

        DisplaySelection(false);
    }
    private void ChaptersInspectLabel_Click(object sender, EventArgs e)
    {
        if (m_client == null) return;
        if (m_client.Book == null) return;
        if (m_client.Selection == null) return;

        if (WordsListBox.Visible)
        {
            InspectWordFrequencies();
        }
        else
        {
            List<Chapter> chapters = null;
            if (m_found_verses_displayed)
            {
                chapters = m_client.Book.GetChapters(m_client.FoundVerses);
            }
            else
            {
                chapters = m_client.Selection.Chapters;
            }
            string result = null;
            if (chapters != null)
            {
                result = DisplayChapterInformation(chapters);
            }

            StringBuilder str = new StringBuilder();
            foreach (Chapter chapter in chapters)
            {
                str.Append("." + chapter.SortedNumber);
            }
            if (str.Length > 100)
            {
                str.Remove(100, str.Length - 100);
                int pos = str.ToString().LastIndexOf('.');
                if (pos > -1)
                {
                    str.Remove(pos, str.Length - pos);
                }

                if (str[str.Length - 1] == '.')
                {
                    str.Append("..");
                }
                else
                {
                    str.Append("...");
                }
            }

            string filename = m_client.NumerologySystem.Name + "_" + "Chapters" + m_chapter_sort_method.ToString() + m_chapter_sort_order.ToString() + str.ToString() + Globals.OUTPUT_FILE_EXT;
            if (Directory.Exists(Globals.STATISTICS_FOLDER))
            {
                string path = Globals.STATISTICS_FOLDER + "/" + filename;
                FileHelper.SaveText(path, result);
                FileHelper.DisplayFile(path);
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Selection
    ///////////////////////////////////////////////////////////////////////////////
    private bool m_selection_mode = false;
    private int m_word_number_in_verse = -1;
    private int m_letter_number_in_verse = -1;
    private int m_word_number_in_chapter = -1;
    private int m_letter_number_in_chapter = -1;
    private void NumericUpDown_Enter(object sender, EventArgs e)
    {
        SearchGroupBox_Leave(null, null);
        this.AcceptButton = null;

        // Ctrl+Click factorizes number
        if (ModifierKeys == Keys.Control)
        {
            long value = 0L;
            if (sender == ChapterComboBox)
            {
                if (ChapterComboBox.SelectedIndex != -1)
                {
                    string[] parts = ChapterComboBox.Text.Split('-');
                    if (parts.Length > 0)
                    {
                        value = long.Parse(parts[0]);
                    }
                }
            }
            else if (sender is NumericUpDown)
            {
                try
                {
                    value = (int)(sender as NumericUpDown).Value;
                }
                catch
                {
                    value = -1L; // error
                }
            }
            else if ((sender is TextBox) || (sender is Label))
            {
                try
                {
                    string[] parts = (sender as Control).Text.Split(' ');
                    if (parts.Length > 0)
                    {
                        value = (long)double.Parse(parts[0]);
                    }
                }
                catch
                {
                    value = -1L; // error
                }
            }
            else
            {
                value = -1L; // error
            }

            FactorizeValue(value, "User", false);
        }
    }
    private void NumericUpDown_Leave(object sender, EventArgs e)
    {
        this.AcceptButton = null;
    }
    private void NumericUpDown_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            if (sender is NumericUpDown)
            {
                Control control = (sender as NumericUpDown);
                if (control != null)
                {
                    try
                    {
                        for (int i = 0; i < 3; i++) ChapterVerseNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) ChapterWordNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) ChapterLetterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) PageNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) StationNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) PartNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) GroupNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) HalfNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) QuarterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) BowingNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) VerseNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) WordNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                        for (int i = 0; i < 3; i++) LetterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);

                        SelectionScope scope = SelectionScope.Book;
                        if ((control == ChapterVerseNumericUpDown) || (control == VerseNumericUpDown))
                        {
                            scope = SelectionScope.Verse;
                        }
                        else if ((control == ChapterWordNumericUpDown) || (control == WordNumericUpDown))
                        {
                            scope = SelectionScope.Word;
                        }
                        else if ((control == ChapterLetterNumericUpDown) || (control == LetterNumericUpDown))
                        {
                            scope = SelectionScope.Letter;
                        }
                        else if (control == PageNumericUpDown)
                        {
                            scope = SelectionScope.Page;
                        }
                        else if (control == StationNumericUpDown)
                        {
                            scope = SelectionScope.Station;
                        }
                        else if (control == PartNumericUpDown)
                        {
                            scope = SelectionScope.Part;
                        }
                        else if (control == GroupNumericUpDown)
                        {
                            scope = SelectionScope.Group;
                        }
                        else if (control == HalfNumericUpDown)
                        {
                            scope = SelectionScope.Half;
                        }
                        else if (control == QuarterNumericUpDown)
                        {
                            scope = SelectionScope.Quarter;
                        }
                        else if (control == BowingNumericUpDown)
                        {
                            scope = SelectionScope.Bowing;
                        }
                        else
                        {
                            scope = SelectionScope.Book;
                        }

                        if (m_client != null)
                        {
                            if (m_client.Book != null)
                            {
                                if (m_client.Selection != null)
                                {
                                    // varaibles for word/letter highlight
                                    int highlight_word_number = 0;
                                    int highlight_letter_number = 0;

                                    // XXXs before chapter for ChapterXXXNumericUpDown
                                    Chapter chapter = null;
                                    int verses_before_chapter = 0;
                                    int words_before_chapter = 0;
                                    int letters_before_chapter = 0;
                                    if (m_client.Selection.Chapters.Count > 0)
                                    {
                                        chapter = m_client.Selection.Chapters[0];
                                        if (chapter != null)
                                        {
                                            if (chapter.Verses.Count > 0)
                                            {
                                                verses_before_chapter += chapter.Verses[0].Number - 1;
                                                if (chapter.Verses[0].Words.Count > 0)
                                                {
                                                    words_before_chapter += chapter.Verses[0].Words[0].Number - 1;
                                                    if (chapter.Verses[0].Words[0].Letters.Count > 0)
                                                    {
                                                        letters_before_chapter += chapter.Verses[0].Words[0].Letters[0].Number - 1;
                                                    }
                                                }
                                            }

                                            // split by , then by -
                                            List<int> indexes = new List<int>();
                                            string text = (sender as NumericUpDown).Text;
                                            string[] parts = text.Split(',');
                                            foreach (string part in parts)
                                            {
                                                string[] sub_parts = part.Split('-');
                                                if (sub_parts.Length == 1)
                                                {
                                                    int number;
                                                    if (int.TryParse(sub_parts[0], out number))
                                                    {
                                                        if (scope == SelectionScope.Verse)
                                                        {
                                                            if (control == ChapterVerseNumericUpDown)
                                                            {
                                                                if (chapter.Verses != null)
                                                                {
                                                                    if (number > chapter.Verses.Count)
                                                                    {
                                                                        number = chapter.Verses.Count;
                                                                    }
                                                                    number += verses_before_chapter;
                                                                }
                                                            }
                                                        }
                                                        else if (scope == SelectionScope.Word)
                                                        {
                                                            if (control == ChapterWordNumericUpDown)
                                                            {
                                                                if (number > chapter.WordCount)
                                                                {
                                                                    number = chapter.WordCount;
                                                                }
                                                                number += words_before_chapter;
                                                            }

                                                            // number = number of verse containing the word
                                                            if (m_client.Book != null)
                                                            {
                                                                Word word = m_client.Book.GetWord(number - 1);
                                                                if (word != null)
                                                                {
                                                                    if (highlight_word_number == 0)
                                                                    {
                                                                        highlight_word_number = word.Number;
                                                                    }

                                                                    if (word.Verse != null)
                                                                    {
                                                                        number = word.Verse.Number;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        else if (scope == SelectionScope.Letter)
                                                        {
                                                            if (control == ChapterLetterNumericUpDown)
                                                            {
                                                                if (number > chapter.LetterCount)
                                                                {
                                                                    number = chapter.LetterCount;
                                                                }
                                                                number += letters_before_chapter;
                                                            }

                                                            // number = number of verse containing the letter
                                                            Letter letter = m_client.Book.GetLetter(number - 1);
                                                            if (letter != null)
                                                            {
                                                                if (highlight_letter_number == 0)
                                                                {
                                                                    highlight_letter_number = letter.Number;
                                                                }

                                                                if (letter.Word != null)
                                                                {
                                                                    if (letter.Word.Verse != null)
                                                                    {
                                                                        number = letter.Word.Verse.Number;
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        // add number to indexes
                                                        if (!indexes.Contains(number - 1))
                                                        {
                                                            indexes.Add(number - 1);
                                                        }
                                                    }
                                                }
                                                else if (sub_parts.Length == 2)
                                                {
                                                    int number;
                                                    int min, max;
                                                    if (int.TryParse(sub_parts[0], out min))
                                                    {
                                                        if (int.TryParse(sub_parts[1], out max))
                                                        {
                                                            int temp = -1;
                                                            if (min > max) // reverse range, e.g. min-max: 100-90
                                                            {
                                                                temp = max;
                                                                max = min;
                                                                min = temp;
                                                            }
                                                            for (int i = min; i <= max; i++)
                                                            {
                                                                if (temp == -1)
                                                                {
                                                                    number = i;
                                                                }
                                                                else // reversed min-max: 90-100
                                                                {
                                                                    // from 100 to 90 i--
                                                                    number = max - (i - min);
                                                                }

                                                                if (scope == SelectionScope.Verse)
                                                                {
                                                                    if (control == ChapterVerseNumericUpDown)
                                                                    {
                                                                        if (chapter.Verses != null)
                                                                        {
                                                                            if (number > chapter.Verses.Count)
                                                                            {
                                                                                number = chapter.Verses.Count;
                                                                            }
                                                                            number += verses_before_chapter;
                                                                        }
                                                                    }
                                                                }
                                                                else if (scope == SelectionScope.Word)
                                                                {
                                                                    if (control == ChapterWordNumericUpDown)
                                                                    {
                                                                        if (number > chapter.WordCount)
                                                                        {
                                                                            number = chapter.WordCount;
                                                                        }
                                                                        number += words_before_chapter;
                                                                    }

                                                                    // number = number of verse containing the word
                                                                    if (m_client.Book != null)
                                                                    {
                                                                        Word word = m_client.Book.GetWord(number - 1);
                                                                        if (word != null)
                                                                        {
                                                                            if (highlight_word_number == 0)
                                                                            {
                                                                                highlight_word_number = word.Number;
                                                                            }

                                                                            if (word.Verse != null)
                                                                            {
                                                                                number = word.Verse.Number;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                else if (scope == SelectionScope.Letter)
                                                                {
                                                                    if (control == ChapterLetterNumericUpDown)
                                                                    {
                                                                        if (number > chapter.LetterCount)
                                                                        {
                                                                            number = chapter.LetterCount;
                                                                        }
                                                                        number += letters_before_chapter;
                                                                    }

                                                                    // number = number of verse containing the letter
                                                                    Letter letter = m_client.Book.GetLetter(number - 1);
                                                                    if (letter != null)
                                                                    {
                                                                        if (highlight_letter_number == 0)
                                                                        {
                                                                            highlight_letter_number = letter.Number;
                                                                        }

                                                                        if (letter.Word != null)
                                                                        {
                                                                            if (letter.Word.Verse != null)
                                                                            {
                                                                                number = letter.Word.Verse.Number;
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                                if (!indexes.Contains(number - 1))
                                                                {
                                                                    indexes.Add(number - 1);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    // do nothing
                                                }
                                            }

                                            // always display selection
                                            if (indexes.Count > 0)
                                            {
                                                if ((scope == SelectionScope.Word) || (scope == SelectionScope.Letter))
                                                {
                                                    scope = SelectionScope.Verse;
                                                }
                                                m_client.Selection = new Selection(m_client.Book, scope, indexes);

                                                PlayerStopLabel_Click(null, null);

                                                DisplaySelection(true);

                                                // highlight first word/letter only
                                                if ((control == WordNumericUpDown) || (control == ChapterWordNumericUpDown))
                                                {
                                                    HighlightWord(highlight_word_number);
                                                }
                                                else if ((control == LetterNumericUpDown) || (control == ChapterLetterNumericUpDown))
                                                {
                                                    HighlightLetter(highlight_letter_number);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    finally
                    {
                        ChapterVerseNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        ChapterWordNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        ChapterLetterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        PageNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        StationNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        PartNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        GroupNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        HalfNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        QuarterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        BowingNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        VerseNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        WordNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                        LetterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    }
                }
            }
        }
    }
    private void NumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        Control control = sender as NumericUpDown;
        if (control != null)
        {
            if (control.Focused)
            {
                DisplayNumericSelection(control);

                if (ChapterSelectionComboBox.Items.Count > 0)
                {
                    ChapterSelectionComboBox.SelectedIndex = 0;
                }
            }
        }
    }
    private void DisplayNumericSelection(Control control)
    {
        if (control is NumericUpDown)
        {
            if (control.Focused)
            {
                try
                {
                    for (int i = 0; i < 3; i++) ChapterVerseNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) ChapterWordNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) ChapterLetterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) PageNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) StationNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) PartNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) GroupNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) HalfNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) QuarterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) BowingNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) VerseNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) WordNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) LetterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);

                    int number = (int)((control as NumericUpDown).Value);

                    // backup number before as it will be overwritten with verse.Number
                    // if control is WordNumericUpDown OR LetterNumericUpDown or
                    // if control is ChapterWordNumericUpDown OR ChapterLetterNumericUpDown 
                    int word_number = 0;
                    int letter_number = 0;
                    if ((control == WordNumericUpDown) || (control == ChapterLetterNumericUpDown))
                    {
                        word_number = number;
                    }
                    else if ((control == LetterNumericUpDown) || (control == ChapterLetterNumericUpDown))
                    {
                        letter_number = number;
                    }

                    if (m_client != null)
                    {
                        if (m_client.Book != null)
                        {
                            if (m_client.Book.Verses != null)
                            {
                                SelectionScope scope = SelectionScope.Book;

                                if (control == ChapterVerseNumericUpDown)
                                {
                                    scope = SelectionScope.Verse;

                                    if (m_client.Book.Chapters != null)
                                    {
                                        int verse_number_in_chapter = (int)ChapterVerseNumericUpDown.Value;

                                        int selected_index = ChapterComboBox.SelectedIndex;
                                        if ((selected_index >= 0) && (selected_index < m_client.Book.Chapters.Count))
                                        {
                                            Chapter chapter = m_client.Book.Chapters[selected_index];
                                            if (chapter != null)
                                            {
                                                if (chapter.Verses != null)
                                                {
                                                    if (chapter.Verses != null)
                                                    {
                                                        if (chapter.Verses.Count > verse_number_in_chapter - 1)
                                                        {
                                                            Verse verse = chapter.Verses[verse_number_in_chapter - 1];
                                                            if (verse != null)
                                                            {
                                                                number = verse.Number;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else if ((control == ChapterWordNumericUpDown) || (control == ChapterLetterNumericUpDown))
                                {
                                    scope = SelectionScope.Verse;

                                    if (m_client.Book.Chapters != null)
                                    {
                                        int selected_index = ChapterComboBox.SelectedIndex;
                                        if ((selected_index >= 0) && (selected_index < m_client.Book.Chapters.Count))
                                        {
                                            Chapter chapter = m_client.Book.Chapters[selected_index];
                                            if (chapter != null)
                                            {
                                                if (chapter.Verses != null)
                                                {
                                                    Verse verse = null;
                                                    if (control == ChapterWordNumericUpDown)
                                                    {
                                                        word_number = number + chapter.Verses[0].Words[0].Number - 1;
                                                        verse = m_client.Book.GetVerseByWordNumber(word_number);
                                                    }
                                                    else if (control == ChapterLetterNumericUpDown)
                                                    {
                                                        letter_number = number + chapter.Verses[0].Words[0].Letters[0].Number - 1;
                                                        verse = m_client.Book.GetVerseByLetterNumber(letter_number);
                                                    }

                                                    if (verse != null)
                                                    {
                                                        number = verse.Number;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else if (control == PageNumericUpDown)
                                {
                                    if (m_client.Book.Pages != null)
                                    {
                                        scope = SelectionScope.Page;
                                    }
                                }
                                else if (control == StationNumericUpDown)
                                {
                                    if (m_client.Book.Stations != null)
                                    {
                                        scope = SelectionScope.Station;
                                    }
                                }
                                else if (control == PartNumericUpDown)
                                {
                                    if (m_client.Book.Parts != null)
                                    {
                                        scope = SelectionScope.Part;
                                    }
                                }
                                else if (control == GroupNumericUpDown)
                                {
                                    if (m_client.Book.Groups != null)
                                    {
                                        scope = SelectionScope.Group;
                                    }
                                }
                                else if (control == HalfNumericUpDown)
                                {
                                    if (m_client.Book.Halfs != null)
                                    {
                                        scope = SelectionScope.Half;
                                    }
                                }
                                else if (control == QuarterNumericUpDown)
                                {
                                    if (m_client.Book.Quarters != null)
                                    {
                                        scope = SelectionScope.Quarter;
                                    }
                                }
                                else if (control == BowingNumericUpDown)
                                {
                                    if (m_client.Book.Bowings != null)
                                    {
                                        scope = SelectionScope.Bowing;
                                    }
                                }
                                else if (control == VerseNumericUpDown)
                                {
                                    if (m_client.Book.Verses != null)
                                    {
                                        scope = SelectionScope.Verse;
                                    }
                                }
                                else if (control == WordNumericUpDown)
                                {
                                    Verse verse = m_client.Book.GetVerseByWordNumber(word_number);
                                    if (verse != null)
                                    {
                                        scope = SelectionScope.Verse;
                                        number = verse.Number;
                                    }
                                }
                                else if (control == LetterNumericUpDown)
                                {
                                    Verse verse = m_client.Book.GetVerseByLetterNumber(letter_number);
                                    if (verse != null)
                                    {
                                        scope = SelectionScope.Verse;
                                        number = verse.Number;
                                    }
                                }
                                else
                                {
                                    // do nothing
                                }

                                // if selection has changed
                                if (m_client.Selection != null)
                                {
                                    if (
                                        (m_client.Selection.Scope != scope)
                                        ||
                                        ((m_client.Selection.Indexes.Count > 0) && (m_client.Selection.Indexes[0] != (number - 1)))
                                       )
                                    {
                                        List<int> indexes = new List<int>() { number - 1 };
                                        m_client.Selection = new Selection(m_client.Book, scope, indexes);

                                        PlayerStopLabel_Click(null, null);

                                        DisplaySelection(true);
                                    }
                                }

                                if ((control == WordNumericUpDown) || (control == ChapterWordNumericUpDown))
                                {
                                    HighlightWord(word_number);
                                }
                                else if ((control == LetterNumericUpDown) || (control == ChapterLetterNumericUpDown))
                                {
                                    HighlightLetter(letter_number);
                                }
                            }
                        }
                    }
                }
                finally
                {
                    ChapterVerseNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    ChapterWordNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    ChapterLetterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    PageNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    StationNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    PartNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    GroupNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    HalfNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    QuarterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    BowingNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    VerseNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    WordNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    LetterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                }
            }
        }
    }
    private void DisplaySelection(bool add_to_history)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            SwitchToMainTextBox();

            for (int i = 0; i < 3; i++) MainTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
            for (int i = 0; i < 3; i++) MainTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
            MainTextBox.BeginUpdate();

            BookmarkTextBox.Enabled = true;

            m_user_text_mode = false;
            m_selection_mode = true;

            ToolTip.SetToolTip(ChaptersInspectLabel, "Inspect chapters");
            WordsListBoxLabel.Visible = false;
            WordsListBox.Visible = false;
            WordsListBox.SendToBack();

            this.Text = Application.ProductName + " | " + GetSelectionSummary();
            UpdateSearchScope();

            DisplaySelectionText();

            CalculateCurrentValue();

            DisplaySelectionPositions();

            BuildLetterFrequencies();
            DisplayLetterFrequencies();

            MainTextBox.ClearHighlight();
            MainTextBox.AlignToStart();

            m_current_selection_verse_index = 0;
            CurrentVerseIndex = 0;
            UpdateHeaderLabel();

            if (m_client != null)
            {
                if (m_client.Selection != null)
                {
                    DisplayTranslations(m_client.Selection.Verses);
                    DisplayTafseer(m_client.Selection.Verses);
                    DisplaySymmetry();
                    DisplayCVWLSequence();
                    DisplayValuesSequence();
                    DisplayDNASequence();

                    if (m_client.Selection.Verses.Count > 0)
                    {
                        Verse verse = m_client.Selection.Verses[0];
                        UpdatePlayerButtons(verse);
                    }

                    if (add_to_history)
                    {
                        AddSelectionHistoryItem();
                    }

                    // display selection's note (if any)
                    DisplayNote(m_client.GetBookmark(m_client.Selection));
                }
            }

            if (PictureBox.Visible)
            {
                RedrawImage();
            }

            // update nofity icon text
            UpdateNotifyIconText();
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            MainTextBox.EndUpdate();
            MainTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
            MainTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
            this.Cursor = Cursors.Default;
        }
    }
    private void UpdateNotifyIconText()
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                NotifyIcon.Text = Application.ProductName + " | " + m_client.NumerologySystem.TextMode + " | " + GetSelectionSummary();
            }
        }
    }
    private string GetSelectionSummary()
    {
        string result = null;
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Selection != null)
                {
                    if (m_client.Book.Verses != null)
                    {
                        if (m_client.Selection.Indexes != null)
                        {
                            if ((m_client.Selection.Scope == SelectionScope.Word) || (m_client.Selection.Scope == SelectionScope.Letter))
                            {
                                int verse_number = (int)VerseNumericUpDown.Value;
                                result = "Verse" + " " + m_client.Book.Verses[verse_number - 1].Address;
                            }
                            else // if scope is Chapter, Page, Station, Part, Group, Half, Quarter, Bowing, Verse
                            {
                                StringBuilder str = new StringBuilder();

                                List<int> selection_indexes = new List<int>();
                                if (m_client.Selection.Scope == SelectionScope.Chapter)
                                {
                                    foreach (Chapter chapter in m_client.Selection.Chapters)
                                    {
                                        selection_indexes.Add(chapter.SortedNumber - 1);
                                    }
                                }
                                else
                                {
                                    selection_indexes = m_client.Selection.Indexes;
                                }

                                if (Numbers.AreConsecutive(selection_indexes))
                                {
                                    if (m_client.Selection.Indexes.Count > 1)
                                    {
                                        int first_index = m_client.Selection.Indexes[0];
                                        int last_index = m_client.Selection.Indexes[m_client.Selection.Indexes.Count - 1];

                                        if (m_client.Selection.Scope == SelectionScope.Verse)
                                        {
                                            str.Append(m_client.Book.Verses[first_index].Address + " - ");
                                            str.Append(m_client.Book.Verses[last_index].Address);
                                        }
                                        else if (m_client.Selection.Scope == SelectionScope.Chapter)
                                        {
                                            int from_chapter_sorted_number = -1;
                                            int to_chapter_sorted_number = -1;
                                            int from_chapter_number = first_index + 1;
                                            int to_chapter_number = last_index + 1;
                                            if (m_client.Book.Chapters != null)
                                            {
                                                foreach (Chapter chapter in m_client.Book.Chapters)
                                                {
                                                    if (chapter.Number == from_chapter_number)
                                                    {
                                                        from_chapter_sorted_number = chapter.SortedNumber;
                                                        break;
                                                    }
                                                }
                                                foreach (Chapter chapter in m_client.Book.Chapters)
                                                {
                                                    if (chapter.Number == to_chapter_number)
                                                    {
                                                        to_chapter_sorted_number = chapter.SortedNumber;
                                                        break;
                                                    }
                                                }
                                                str.Append(from_chapter_sorted_number.ToString() + " - ");
                                                str.Append(to_chapter_sorted_number.ToString());
                                            }
                                        }
                                        else
                                        {
                                            str.Append((first_index + 1).ToString() + "-");
                                            str.Append((last_index + 1).ToString());
                                        }
                                    }
                                    else if (m_client.Selection.Indexes.Count == 1)
                                    {
                                        int index = m_client.Selection.Indexes[0];
                                        if (m_client.Selection.Scope == SelectionScope.Verse)
                                        {
                                            str.Append(m_client.Book.Verses[index].Address);
                                        }
                                        else if (m_client.Selection.Scope == SelectionScope.Chapter)
                                        {
                                            int chapter_sorted_number = 0;
                                            int chapter_number = index + 1;
                                            if (m_client.Book.Chapters != null)
                                            {
                                                foreach (Chapter chapter in m_client.Book.Chapters)
                                                {
                                                    if (chapter.Number == chapter_number)
                                                    {
                                                        chapter_sorted_number = chapter.SortedNumber;
                                                        break;
                                                    }
                                                }
                                                str.Append(chapter_sorted_number.ToString());
                                            }
                                        }
                                        else
                                        {
                                            str.Append((index + 1).ToString());
                                        }
                                    }
                                    else
                                    {
                                        // do nothing
                                    }
                                }
                                else
                                {
                                    if (m_client.Selection.Indexes.Count > 0)
                                    {
                                        foreach (int index in m_client.Selection.Indexes)
                                        {
                                            if (m_client.Selection.Scope == SelectionScope.Verse)
                                            {
                                                str.Append(m_client.Book.Verses[index].Address + " ");
                                            }
                                            else if (m_client.Selection.Scope == SelectionScope.Chapter)
                                            {
                                                int chapter_sorted_number = 0;
                                                int chapter_number = index + 1;
                                                if (m_client.Book.Chapters != null)
                                                {
                                                    foreach (Chapter chapter in m_client.Book.Chapters)
                                                    {
                                                        if (chapter.Number == chapter_number)
                                                        {
                                                            chapter_sorted_number = chapter.SortedNumber;
                                                            break;
                                                        }
                                                    }
                                                    str.Append(chapter_sorted_number.ToString() + " ");
                                                }
                                            }
                                            else
                                            {
                                                str.Append((index + 1).ToString() + " ");
                                            }
                                        }
                                        if (str.Length > 1)
                                        {
                                            str.Remove(str.Length - 1, 1);
                                        }
                                    }

                                    if (m_client.Selection.Scope == SelectionScope.Verse)
                                    {
                                    }
                                    else if (m_client.Selection.Scope == SelectionScope.Chapter)
                                    {
                                    }
                                    else
                                    {
                                    }
                                }

                                if (m_client.Selection.Indexes.Count == 1)
                                {
                                    result = m_client.Selection.Scope.ToString() + " " + str.ToString();
                                }
                                else if (m_client.Selection.Indexes.Count > 1)
                                {
                                    result = m_client.Selection.Scope.ToString() + "s" + " " + str.ToString();
                                }
                            }
                        }
                    }
                }
            }

            if (result != null)
            {
                // trim if too long
                if (result.Length > SELECTON_SCOPE_TEXT_MAX_LENGTH)
                {
                    result = result.Substring(0, SELECTON_SCOPE_TEXT_MAX_LENGTH) + " ...";
                }
            }
        }
        return result;
    }
    private void DisplaySelectionText()
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.QuranOnly)
           )
        {
            if (m_client != null)
            {
                if (m_client.Selection != null)
                {
                    List<Verse> verses = m_client.Selection.Verses;
                    if (verses != null)
                    {
                        if (verses.Count > 0)
                        {
                            StringBuilder str = new StringBuilder();
                            foreach (Verse verse in verses)
                            {
                                if (verse != null)
                                {
                                    str.Append(verse.Text + verse.Endmark);
                                }
                            }
                            if (str.Length > 1)
                            {
                                str.Remove(str.Length - 1, 1); // last space in " {###} "   OR  \n
                            }
                            m_current_text = str.ToString();
                        }
                    }

                    MainTextBox.Text = m_current_text;
                    MainTextBox.Refresh();
                    GenerateSentencesLabel.Visible = false;
                    DuplicateLettersCheckBox.Visible = false;

                    ColorizeGoldenRatios();
                }
            }
        }
    }
    private void UpdateLanguageType(string text)
    {
        if (text.IsArabic())
        {
            SetLanguageType(LanguageType.RightToLeft);
        }
        else
        {
            SetLanguageType(LanguageType.LeftToRight);
        }
        EnableFindByTextControls();
    }
    private void DisplaySelectionPositions()
    {
        if (m_client != null)
        {
            if (m_client.Selection != null)
            {
                List<Verse> verses = m_client.Selection.Verses;
                if (verses != null)
                {
                    if (verses.Count > 0)
                    {
                        Verse verse = verses[0];
                        if (verse != null)
                        {
                            // show postion of selection in the Quran visually
                            UpdateProgressBar(verse);

                            if (verse.Chapter != null)
                            {
                                UpdateMinMaxChapterVerseWordLetter(verse.Chapter.SortedNumber - 1);
                            }

                            if (ChapterComboBox.Items.Count > 0)
                            {
                                // without this guard, we cannot select more than 1 chapter in ChaptersListBox and
                                // we cannot move backward/forward inside the ChaptersListBox using Backspace
                                if (!ChaptersListBox.Focused)
                                {
                                    UpdateChaptersListBox();
                                }
                            }
                            UpdateVersePositions(verse);

                            Bookmark bookmark = m_client.GotoBookmark(m_client.Selection.Scope, m_client.Selection.Indexes);
                            if (bookmark != null)
                            {
                                BookmarkTextBox.ForeColor = m_note_view_color;
                                BookmarkTextBox.Text = bookmark.Note;
                                string hint = "Creation Time" + "\t" + bookmark.CreatedTime + "\r\n"
                                            + "Last Modified" + "\t" + bookmark.LastModifiedTime;
                                ToolTip.SetToolTip(BookmarkTextBox, hint);
                                UpdateBookmarkButtons();
                            }
                            else
                            {
                                DisplayNoteWritingInstruction();
                            }
                        }
                    }
                }
            }
        }
    }
    private Chapter m_old_chapter = null;
    private Verse m_old_verse = null;
    private void DisplayCurrentPositions()
    {
        if (m_active_textbox != null)
        {
            if (m_active_textbox.Lines != null)
            {
                if (m_active_textbox.Lines.Length > 0)
                {
                    Verse verse = GetCurrentVerse();
                    if (verse != null)
                    {
                        if (m_old_verse != verse)
                        {
                            m_old_verse = verse;

                            // show postion of verse in the Quran visually
                            ProgressBar.Minimum = 1;
                            ProgressBar.Maximum = verse.Book.Pages.Count;
                            ProgressBar.Value = verse.Page.Number;
                            ProgressBar.Refresh();

                            if (verse.Chapter != null)
                            {
                                if (m_old_chapter != verse.Chapter)
                                {
                                    m_old_chapter = verse.Chapter;
                                    UpdateMinMaxChapterVerseWordLetter(verse.Chapter.SortedNumber - 1);
                                }
                            }

                            if (ChapterComboBox.Items.Count > 0)
                            {
                                // without this guard, we cannot select more than 1 chapter in ChaptersListBox and
                                // we cannot move backward/forward inside the ChaptersListBox using Backspace
                                if (!ChaptersListBox.Focused)
                                {
                                    UpdateChaptersListBox();
                                }
                            }
                        }
                        UpdateVersePositions(verse);
                    }
                }
            }
        }
    }
    private void UpdateVersePositions(Verse verse)
    {
        if (m_active_textbox != null)
        {
            if (verse != null)
            {
                try
                {
                    for (int i = 0; i < 3; i++) ChapterComboBox.SelectedIndexChanged -= new EventHandler(ChapterComboBox_SelectedIndexChanged);
                    for (int i = 0; i < 3; i++) ChapterVerseNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) ChapterWordNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) ChapterLetterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) PageNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) StationNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) PartNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) GroupNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) HalfNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) QuarterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) BowingNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) VerseNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) WordNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);
                    for (int i = 0; i < 3; i++) LetterNumericUpDown.ValueChanged -= new EventHandler(NumericUpDown_ValueChanged);

                    if (verse.Chapter != null)
                    {
                        if (ChapterComboBox.SelectedIndex != verse.Chapter.SortedNumber - 1)
                        {
                            ChapterComboBox.SelectedIndex = verse.Chapter.SortedNumber - 1;
                            DisplayChapterRevelationInfo();
                        }
                    }

                    if ((verse.NumberInChapter >= 1) && (verse.NumberInChapter <= verse.Chapter.Verses.Count))
                    {
                        if (verse.Chapter != null)
                        {
                            if (ChapterVerseNumericUpDown.Value != verse.NumberInChapter)
                            {
                                ChapterVerseNumericUpDown.Value = (verse.NumberInChapter > ChapterVerseNumericUpDown.Maximum) ? ChapterVerseNumericUpDown.Maximum : verse.NumberInChapter;
                            }
                        }
                    }

                    if (verse.Page != null)
                    {
                        if (PageNumericUpDown.Value != verse.Page.Number)
                        {
                            PageNumericUpDown.Value = verse.Page.Number;
                        }
                    }
                    if (verse.Station != null)
                    {
                        if (StationNumericUpDown.Value != verse.Station.Number)
                        {
                            StationNumericUpDown.Value = verse.Station.Number;
                        }
                    }
                    if (verse.Part != null)
                    {
                        if (PartNumericUpDown.Value != verse.Part.Number)
                        {
                            PartNumericUpDown.Value = verse.Part.Number;
                        }
                    }
                    if (verse.Group != null)
                    {
                        if (GroupNumericUpDown.Value != verse.Group.Number)
                        {
                            GroupNumericUpDown.Value = verse.Group.Number;
                        }
                    }
                    if (verse.Half != null)
                    {
                        if (HalfNumericUpDown.Value != verse.Half.Number)
                        {
                            HalfNumericUpDown.Value = verse.Half.Number;
                        }
                    }
                    if (verse.Quarter != null)
                    {
                        if (QuarterNumericUpDown.Value != verse.Quarter.Number)
                        {
                            QuarterNumericUpDown.Value = verse.Quarter.Number;
                        }
                    }
                    if (verse.Bowing != null)
                    {
                        if (BowingNumericUpDown.Value != verse.Bowing.Number)
                        {
                            BowingNumericUpDown.Value = verse.Bowing.Number;
                        }
                    }
                    if (VerseNumericUpDown.Value != verse.Number)
                    {
                        VerseNumericUpDown.Value = verse.Number;
                    }

                    int char_index = m_active_textbox.SelectionStart;
                    int line_index = m_active_textbox.GetLineFromCharIndex(char_index);

                    Word word = GetWordAtChar(char_index);
                    if (word != null)
                    {
                        int word_index_in_verse = word.NumberInVerse - 1;
                        Letter letter = GetLetterAtChar(char_index);
                        if (letter == null) letter = GetLetterAtChar(char_index - 1); // (Ctrl_End)
                        if (letter != null)
                        {
                            int letter_index_in_verse = letter.NumberInVerse - 1;
                            int word_number = verse.Words[0].Number + word_index_in_verse;
                            if (word_number > WordNumericUpDown.Maximum)
                            {
                                WordNumericUpDown.Value = WordNumericUpDown.Maximum;
                            }
                            else if (word_number < WordNumericUpDown.Minimum)
                            {
                                WordNumericUpDown.Value = WordNumericUpDown.Minimum;
                            }
                            else
                            {
                                if (WordNumericUpDown.Value != word_number)
                                {
                                    WordNumericUpDown.Value = word_number;
                                }
                            }

                            if (verse.Words.Count > 0)
                            {
                                if (verse.Words[0].Letters.Count > 0)
                                {
                                    int letter_number = verse.Words[0].Letters[0].Number + letter_index_in_verse;
                                    if (letter_number > LetterNumericUpDown.Maximum)
                                    {
                                        LetterNumericUpDown.Value = LetterNumericUpDown.Maximum;
                                    }
                                    else if (letter_number < LetterNumericUpDown.Minimum)
                                    {
                                        LetterNumericUpDown.Value = LetterNumericUpDown.Minimum;
                                    }
                                    else
                                    {
                                        if (LetterNumericUpDown.Value != letter_number)
                                        {
                                            LetterNumericUpDown.Value = letter_number;
                                        }
                                    }
                                }
                            }

                            m_word_number_in_verse = word_index_in_verse + 1;
                            m_letter_number_in_verse = letter_index_in_verse + 1;
                            int word_count = 0;
                            int letter_count = 0;
                            if (verse.Chapter != null)
                            {
                                foreach (Verse chapter_verse in verse.Chapter.Verses)
                                {
                                    if (chapter_verse.NumberInChapter < verse.NumberInChapter)
                                    {
                                        word_count += chapter_verse.Words.Count;
                                        letter_count += chapter_verse.LetterCount;
                                    }
                                }
                            }
                            m_word_number_in_chapter = word_count + m_word_number_in_verse;
                            m_letter_number_in_chapter = letter_count + m_letter_number_in_verse;

                            if (m_word_number_in_chapter > ChapterWordNumericUpDown.Maximum)
                            {
                                ChapterWordNumericUpDown.Value = ChapterWordNumericUpDown.Maximum;
                            }
                            else if (m_word_number_in_chapter < ChapterWordNumericUpDown.Minimum)
                            {
                                ChapterWordNumericUpDown.Value = ChapterWordNumericUpDown.Minimum;
                            }
                            else
                            {
                                if (ChapterWordNumericUpDown.Value != m_word_number_in_chapter)
                                {
                                    ChapterWordNumericUpDown.Value = m_word_number_in_chapter;
                                }
                            }

                            if (m_letter_number_in_chapter > ChapterLetterNumericUpDown.Maximum)
                            {
                                ChapterLetterNumericUpDown.Value = ChapterLetterNumericUpDown.Maximum;
                            }
                            else if (m_letter_number_in_chapter < ChapterLetterNumericUpDown.Minimum)
                            {
                                ChapterLetterNumericUpDown.Value = ChapterLetterNumericUpDown.Minimum;
                            }
                            else
                            {
                                if (ChapterLetterNumericUpDown.Value != m_letter_number_in_chapter)
                                {
                                    ChapterLetterNumericUpDown.Value = m_letter_number_in_chapter;
                                }
                            }

                            ColorizePositionNumbers();
                            ColorizePositionControls();

                            UpdateVerseDistances(verse);

                            UpdatePlayerButtons(verse);
                        }
                    }
                }
                catch
                {
                    // ignore poosible error due to non-Arabic search result
                    // showing verses with more words than the words in the Arabic verse
                    // and throwing exception when assigned to WordNumericUpDown.Value or LetterNumericUpDown.Value
                }
                finally
                {
                    ChapterComboBox.SelectedIndexChanged += new EventHandler(ChapterComboBox_SelectedIndexChanged);
                    ChapterVerseNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    ChapterWordNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    ChapterLetterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    PageNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    StationNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    PartNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    GroupNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    HalfNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    QuarterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    BowingNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    VerseNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    WordNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                    LetterNumericUpDown.ValueChanged += new EventHandler(NumericUpDown_ValueChanged);
                }
            }
        }
    }
    private void ColorizePositionNumbers()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if ((ChapterComboBox.SelectedIndex >= 0) && (ChapterComboBox.SelectedIndex < m_client.Book.Chapters.Count))
                {
                    int chapter_number = m_client.Book.Chapters[ChapterComboBox.SelectedIndex].SortedNumber;
                    //ChapterComboBox.ForeColor = ChaptersListBox.GetItemColor(chapter_number - 1);
                    ChapterComboBox.ForeColor = GetNumberTypeColor(chapter_number);
                    ChapterComboBox.BackColor = (Numbers.Compare(chapter_number, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                }
            }
        }

        ChapterVerseNumericUpDown.ForeColor = GetNumberTypeColor((int)ChapterVerseNumericUpDown.Value);
        ChapterWordNumericUpDown.ForeColor = GetNumberTypeColor((int)ChapterWordNumericUpDown.Value);
        ChapterLetterNumericUpDown.ForeColor = GetNumberTypeColor((int)ChapterLetterNumericUpDown.Value);
        PageNumericUpDown.ForeColor = GetNumberTypeColor((int)PageNumericUpDown.Value);
        StationNumericUpDown.ForeColor = GetNumberTypeColor((int)StationNumericUpDown.Value);
        PartNumericUpDown.ForeColor = GetNumberTypeColor((int)PartNumericUpDown.Value);
        GroupNumericUpDown.ForeColor = GetNumberTypeColor((int)GroupNumericUpDown.Value);
        HalfNumericUpDown.ForeColor = GetNumberTypeColor((int)HalfNumericUpDown.Value);
        QuarterNumericUpDown.ForeColor = GetNumberTypeColor((int)QuarterNumericUpDown.Value);
        BowingNumericUpDown.ForeColor = GetNumberTypeColor((int)BowingNumericUpDown.Value);
        VerseNumericUpDown.ForeColor = GetNumberTypeColor((int)VerseNumericUpDown.Value);
        WordNumericUpDown.ForeColor = GetNumberTypeColor((int)WordNumericUpDown.Value);
        LetterNumericUpDown.ForeColor = GetNumberTypeColor((int)LetterNumericUpDown.Value);

        ChapterVerseNumericUpDown.BackColor = (Numbers.Compare((int)ChapterVerseNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        ChapterWordNumericUpDown.BackColor = (Numbers.Compare((int)ChapterWordNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        ChapterLetterNumericUpDown.BackColor = (Numbers.Compare((int)ChapterLetterNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        PageNumericUpDown.BackColor = (Numbers.Compare((int)PageNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        StationNumericUpDown.BackColor = (Numbers.Compare((int)StationNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        PartNumericUpDown.BackColor = (Numbers.Compare((int)PartNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        GroupNumericUpDown.BackColor = (Numbers.Compare((int)GroupNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        HalfNumericUpDown.BackColor = (Numbers.Compare((int)HalfNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        QuarterNumericUpDown.BackColor = (Numbers.Compare((int)QuarterNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        BowingNumericUpDown.BackColor = (Numbers.Compare((int)BowingNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        VerseNumericUpDown.BackColor = (Numbers.Compare((int)VerseNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        WordNumericUpDown.BackColor = (Numbers.Compare((int)WordNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
        LetterNumericUpDown.BackColor = (Numbers.Compare((int)LetterNumericUpDown.Value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;

        ChapterComboBox.Refresh();
        ChapterVerseNumericUpDown.Refresh();
        ChapterWordNumericUpDown.Refresh();
        ChapterLetterNumericUpDown.Refresh();
        PageNumericUpDown.Refresh();
        StationNumericUpDown.Refresh();
        PartNumericUpDown.Refresh();
        GroupNumericUpDown.Refresh();
        HalfNumericUpDown.Refresh();
        QuarterNumericUpDown.Refresh();
        BowingNumericUpDown.Refresh();
        VerseNumericUpDown.Refresh();
        WordNumericUpDown.Refresh();
        LetterNumericUpDown.Refresh();
    }
    private void ColorizePositionControls()
    {
        if (m_client != null)
        {
            // reset colors
            ChapterPositionLabel.ForeColor = Color.CornflowerBlue;
            ChapterVerseWordLetterPositionLabel.ForeColor = Color.CornflowerBlue;
            PagePositionLabel.ForeColor = Color.LightSteelBlue;
            StationPositionLabel.ForeColor = Color.LightSteelBlue;
            PartPositionLabel.ForeColor = Color.LightSteelBlue;
            GroupPositionLabel.ForeColor = Color.LightSteelBlue;
            HalfPositionLabel.ForeColor = Color.LightSteelBlue;
            QuarterPositionLabel.ForeColor = Color.LightSteelBlue;
            BowingPositionLabel.ForeColor = Color.LightSteelBlue;
            VerseWordLetterPositionLabel.ForeColor = Color.LightSteelBlue;

            // set selected color
            if (m_client.Selection != null)
            {
                switch (m_client.Selection.Scope)
                {
                    case SelectionScope.Book:
                        {
                        }
                        break;
                    case SelectionScope.Station:
                        {
                            StationPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Part:
                        {
                            PartPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Group:
                        {
                            GroupPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Half:
                        {
                            HalfPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Quarter:
                        {
                            QuarterPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Bowing:
                        {
                            BowingPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Chapter:
                        {
                            ChapterPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Verse:
                    case SelectionScope.Word:
                    case SelectionScope.Letter:
                        {
                            ChapterVerseWordLetterPositionLabel.ForeColor = Color.LightCoral;
                            VerseWordLetterPositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    case SelectionScope.Page:
                        {
                            PagePositionLabel.ForeColor = Color.LightCoral;
                        }
                        break;
                    default: // Unknown
                        break;
                }
            }
        }
    }
    private void UpdateProgressBar(Verse verse)
    {
        if (m_client != null)
        {
            if (m_client.Selection != null)
            {
                switch (m_client.Selection.Scope)
                {
                    case SelectionScope.Book:
                        {
                        }
                        break;
                    case SelectionScope.Station:
                        {
                        }
                        break;
                    case SelectionScope.Part:
                        {
                        }
                        break;
                    case SelectionScope.Group:
                        {
                        }
                        break;
                    case SelectionScope.Half:
                        {
                        }
                        break;
                    case SelectionScope.Quarter:
                        {
                        }
                        break;
                    case SelectionScope.Bowing:
                        {
                        }
                        break;
                    case SelectionScope.Chapter:
                        {
                        }
                        break;
                    case SelectionScope.Verse:
                    case SelectionScope.Word:
                    case SelectionScope.Letter:
                        {
                        }
                        break;
                    case SelectionScope.Page:
                        {
                        }
                        break;
                }

                // show postion of verse in the Quran visually
                ProgressBar.Minimum = 1;
                ProgressBar.Maximum = verse.Book.Pages.Count;
                ProgressBar.Value = verse.Page.Number;
                ProgressBar.Refresh();
            }
        }
    }
    private void HighlightWord(int word_number)
    {
        if (m_active_textbox != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    Verse verse = m_client.Book.GetVerseByWordNumber(word_number);
                    if (verse != null)
                    {
                        word_number -= verse.Words[0].Number;
                        if ((word_number >= 0) && (word_number < verse.Words.Count))
                        {
                            Word word = verse.Words[word_number];
                            m_active_textbox.Select(word.Position, word.Text.Length);
                        }
                    }
                }
            }
        }
    }
    private void HighlightLetter(int letter_number)
    {
        if (m_active_textbox != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    Word word = m_client.Book.GetWordByLetterNumber(letter_number);
                    if (word != null)
                    {
                        letter_number -= word.Letters[0].Number;
                        if ((letter_number >= 0) && (letter_number < word.Letters.Count))
                        {
                            int letter_position = word.Position + letter_number;
                            int letter_length = 1;
                            m_active_textbox.Select(letter_position, letter_length);
                        }
                    }
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Bookmarks/Notes
    ///////////////////////////////////////////////////////////////////////////////
    private string m_note_writing_instruction = "write a note";
    private Color m_note_writing_instruction_color = Color.Gray;
    private Color m_note_edit_color = Color.Black;
    private Color m_note_view_color = Color.Blue;
    private void BookmarkTextBox_Enter(object sender, EventArgs e)
    {
        SearchGroupBox_Leave(null, null);

        BookmarkTextBox.ForeColor = m_note_edit_color;
        if (!String.IsNullOrEmpty(BookmarkTextBox.Text))
        {
            if (BookmarkTextBox.Text.StartsWith(m_note_writing_instruction))
            {
                BookmarkTextBox.Text = null;
            }
        }
    }
    private void BookmarkTextBox_Leave(object sender, EventArgs e)
    {
        AddBookmarkButton_Click(null, null);
        this.AcceptButton = null;
    }
    private void BookmarkTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            if (!String.IsNullOrEmpty(BookmarkTextBox.Text))
            {
                if (BookmarkTextBox.Text.Length > 0)
                {
                    AddBookmarkButton_Click(null, null);
                }
                else
                {
                    DeleteBookmarkLabel_Click(null, null);
                }
            }
        }
        else
        {
            BookmarkTextBox.ForeColor = m_note_edit_color;
        }
        UpdateBookmarkButtons();
    }
    private void DisplayNoteWritingInstruction()
    {
        DeleteBookmarkLabel.Enabled = false;
        ClearBookmarksLabel.Enabled = false;

        BookmarkTextBox.ForeColor = m_note_writing_instruction_color;
        if (BookmarkTextBox.Focused)
        {
            BookmarkTextBox.Text = null;
        }
        else
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Selection != null)
                    {
                        if (m_client.Selection.Scope == SelectionScope.Book)
                        {
                            BookmarkTextBox.Text = m_note_writing_instruction + " for "
                                + m_client.Selection.Scope.ToString();
                        }
                        else if ((m_client.Selection.Scope == SelectionScope.Verse) || (m_client.Selection.Scope == SelectionScope.Word) || (m_client.Selection.Scope == SelectionScope.Letter))
                        {
                            BookmarkTextBox.Text = m_note_writing_instruction + " for Chapter "
                                + (ChapterComboBox.SelectedIndex + 1).ToString() + " Verse "
                                + (ChapterVerseNumericUpDown.Value).ToString();
                        }
                        else
                        {
                            StringBuilder str = new StringBuilder();
                            if (m_client.Selection.Indexes.Count > 0)
                            {
                                foreach (int index in m_client.Selection.Indexes)
                                {
                                    str.Append((index + 1).ToString() + "+");
                                }
                                if (str.Length > 1)
                                {
                                    str.Remove(str.Length - 1, 1);
                                }
                            }

                            BookmarkTextBox.Text = m_note_writing_instruction + " for "
                                         + m_client.Selection.Scope.ToString() + " "
                                         + str.ToString();
                        }
                    }
                }
            }
        }

        BookmarkTextBox.Refresh();
        ToolTip.SetToolTip(BookmarkTextBox, null);

        UpdateBookmarkButtons();
    }
    private void DisplayNote(Bookmark bookmark)
    {
        if (bookmark != null)
        {
            if (bookmark.Selection != null)
            {
                BookmarkTextBox.Text = bookmark.Note;
                BookmarkTextBox.ForeColor = m_note_view_color;

                string hint = "Creation Time" + "\t" + bookmark.CreatedTime + "\r\n"
                     + "Last Modified" + "\t" + bookmark.LastModifiedTime;
                ToolTip.SetToolTip(BookmarkTextBox, hint);
            }
        }
        else
        {
            DisplayNoteWritingInstruction();
        }
    }
    private void DisplayBookmark(Bookmark bookmark)
    {
        if (bookmark != null)
        {
            if (bookmark.Selection != null)
            {
                if (m_client != null)
                {
                    m_client.Selection = new Selection(m_client.Book, bookmark.Selection.Scope, bookmark.Selection.Indexes);
                    if (m_client.Selection != null)
                    {
                        PlayerStopLabel_Click(null, null);

                        DisplaySelection(false);

                        BookmarkTextBox.Text = bookmark.Note;
                        BookmarkTextBox.ForeColor = m_note_view_color;
                        string hint = "Creation Time" + "\t" + bookmark.CreatedTime + "\r\n"
                             + "Last Modified" + "\t" + bookmark.LastModifiedTime;
                        ToolTip.SetToolTip(BookmarkTextBox, hint);
                        MainTextBox.Focus();

                        UpdateBookmarkButtons();
                    }
                }
            }
        }
    }
    private void AddBookmarkButton_Click(object sender, EventArgs e)
    {
        if (!String.IsNullOrEmpty(BookmarkTextBox.Text))
        {
            if (BookmarkTextBox.Text.StartsWith(m_note_writing_instruction))
            {
                // ignore it
            }
            else if (BookmarkTextBox.Text.Length == 0)
            {
                DeleteBookmarkLabel_Click(null, null);
            }
            else //if (!BookmarkTextBox.Text.StartsWith(m_note_writing_instruction))
            {
                if (m_client != null)
                {
                    if (m_client.Book != null)
                    {
                        if (m_client.Selection != null)
                        {
                            Selection selection = new Selection(m_client.Book, m_client.Selection.Scope, m_client.Selection.Indexes);
                            Bookmark bookmark = m_client.CreateBookmark(selection, BookmarkTextBox.Text);

                            BookmarkTextBox.ForeColor = m_note_view_color;
                            UpdateBookmarkButtons();
                        }
                    }
                }
            }
        }
    }
    private void PreviousBookmarkButton_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            Bookmark bookmark = m_client.GotoPreviousBookmark();
            if (bookmark != null)
            {
                DisplayBookmark(bookmark);
            }
        }
    }
    private void NextBookmarkButton_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            Bookmark bookmark = m_client.GotoNextBookmark();
            if (bookmark != null)
            {
                DisplayBookmark(bookmark);
            }
        }
    }
    private void BookmarkCounterLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.Bookmarks != null)
            {
                if (m_client.Bookmarks.Count > 0)
                {
                    DisplayBookmark(m_client.CurrentBookmark);

                    // call again so the chapter is selected in ChapterListBox
                    DisplayBookmark(m_client.CurrentBookmark);
                }
            }
        }
    }
    private void DeleteBookmarkLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            PlayerStopLabel_Click(null, null);

            // remove existing bookmark (if any)
            m_client.DeleteCurrentBookmark();

            Bookmark bookmark = m_client.CurrentBookmark;
            if (bookmark != null)
            {
                DisplayBookmark(bookmark);
            }
            else
            {
                DisplaySelection(false);
            }
        }
    }
    private void ClearBookmarksLabel_Click(object sender, EventArgs e)
    {
        if (MessageBox.Show(
            "Delete all bookmarks and notes?",
            Application.ProductName,
            MessageBoxButtons.YesNo,
            MessageBoxIcon.Question) == DialogResult.Yes)
        {
            if (m_client != null)
            {
                m_client.ClearBookmarks();

                PlayerStopLabel_Click(null, null);

                DisplaySelection(false);
            }
        }
    }
    private void UpdateBookmarkButtons()
    {
        if (m_client != null)
        {
            if (m_client.Bookmarks != null)
            {
                PreviousBookmarkButton.Enabled = (m_client.Bookmarks.Count > 0) && (m_client.CurrentBookmarkIndex > 0);
                NextBookmarkButton.Enabled = (m_client.Bookmarks.Count > 0) && (m_client.CurrentBookmarkIndex < m_client.Bookmarks.Count - 1);
                BookmarkCounterLabel.Text = (m_client.CurrentBookmarkIndex + 1).ToString() + " / " + m_client.Bookmarks.Count.ToString();
                DeleteBookmarkLabel.Enabled = (!BookmarkTextBox.Text.StartsWith(m_note_writing_instruction)) && (!m_found_verses_displayed) && (m_client.Bookmarks.Count > 0);
                ClearBookmarksLabel.Enabled = (!BookmarkTextBox.Text.StartsWith(m_note_writing_instruction)) && (!m_found_verses_displayed) && (m_client.Bookmarks.Count > 0);
                ClearBookmarksLabel.BackColor = (!BookmarkTextBox.Text.StartsWith(m_note_writing_instruction)) && (!m_found_verses_displayed) && (m_client.Bookmarks.Count > 0) ? Color.LightCoral : SystemColors.ControlLight;
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Audio Player
    ///////////////////////////////////////////////////////////////////////////////
    private MP3Player m_player = new MP3Player();
    private int m_audio_volume = DEFAULT_AUDIO_VOLUME;
    private string m_downloaded_audio_filename = null;
    private bool m_first_play = true;
    private float m_silence_between_verses = 0.0F; // in verse lengths
    private int m_silence_between_selections = 0;  // in milliseconds
    private int m_silence_time_between_verses = 0;
    private int m_silence_time_between_selections = 0;
    private bool m_break_playing = false;
    private bool m_player_looping = false;
    private bool m_player_looping_all = false;
    private int m_player_looping_count = int.MaxValue;        // unlimited verse repetitions
    private int m_player_looping_all_count = int.MaxValue;    // unlimited selection repetitions
    private int m_player_looping_i = 0;
    private int m_player_looping_all_i = 0;
    private void PlayVerse(int index)
    {
        Verse verse = GetVerse(index);
        if (verse != null)
        {
            HighlightVerse(verse);
            PlayVerse(verse);
        }
    }
    private void PlayVerse(Verse verse)
    {
        if (m_active_textbox != null)
        {
            if (verse != null)
            {
                if (m_player != null)
                {
                    // open verse mp3 file
                    if (m_player.Closed)
                    {
                        PlayerOpenAudioFile(verse);
                    }

                    if (m_player.Opened)
                    {
                        if (m_player.MuteAll)
                        {
                            m_player.VolumeAll = 0;
                        }
                        else
                        {
                            m_player.VolumeAll = m_audio_volume;
                        }

                        // play verse
                        m_player.Play();

                        // wait till finish
                        WaitForPlayToFinish();

                        // get verse time length before stop
                        int verse_time_length = (int)m_player.Length;

                        // stop verse
                        if (m_player.Opened)
                        {
                            m_player.Stop();
                            m_player.Close();
                        }

                        // and go into silence if needed
                        m_silence_time_between_verses = (int)(verse_time_length * m_silence_between_verses);
                        if (m_silence_time_between_verses > 0)
                        {
                            WaitFor(m_silence_time_between_verses);
                        }
                        else
                        {
                            // go into silence if last verse in chapter (on last repeat only)
                            if (verse.NumberInChapter == verse.Chapter.Verses.Count)
                            {
                                if (m_player_looping)
                                {
                                    if (m_player_looping_i == m_player_looping_count - 1)
                                    {
                                        WaitFor(3000);
                                    }
                                }
                                else
                                {
                                    WaitFor(3000);
                                }
                            }
                        }

                        // sleep in case of Prostration (Sijood)
                        switch (verse.ProstrationType)
                        {
                            case ProstrationType.None:
                                {
                                    // do nothing
                                }
                                break;
                            case ProstrationType.Obligatory:
                                {
                                    WaitFor(10000);
                                }
                                break;
                            case ProstrationType.Recommended:
                                {
                                    WaitFor(5000);
                                }
                                break;
                        }
                    }
                }

                // simulate mouse click to continue playing next verse and not restart from 1
                m_active_textbox.Focus();
                m_user_text_mode = false;
                m_selection_mode = false;
            }
            else // invalid verse
            {
                PlayerStopLabel_Click(null, null);
                MessageBox.Show("No verse available.", Application.ProductName);
            }
        }
    }
    private void WaitForPlayToFinish()
    {
        if (m_player != null)
        {
            while ((m_player.Length - m_player.Position) > 50UL)
            {
                // stop immediately if requested
                if (m_break_playing)
                {
                    break;
                }

                Application.DoEvents();
                Thread.Sleep(50);
            }
        }
    }
    private void WaitFor(int milliseconds)
    {
        DateTime end = DateTime.Now.AddMilliseconds(milliseconds);
        while (DateTime.Now < end)
        {
            Application.DoEvents();
            Thread.Sleep(50);
        }
    }
    private void PlayerPlayAudhuBillah()
    {
        try
        {
            if (m_player != null)
            {
                if (Directory.Exists(Globals.AUDIO_FOLDER))
                {
                    m_player.Open(Globals.AUDIO_FOLDER + "/" + "audhubillah.mp3");
                    if (m_player.Opened)
                    {
                        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_pause.png"))
                        {
                            PlayerPlayLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_pause.png");
                        }
                        ToolTip.SetToolTip(PlayerPlayLabel, "Pause");
                        PlayerPlayLabel.Refresh();

                        m_player.VolumeAll = m_audio_volume;

                        m_player.Play();
                        WaitForPlayToFinish();
                    }
                    else
                    {
                        PlayerStopLabel_Click(null, null);
                        AskUserToDownloadAudioFilesManually();
                    }
                }
            }
        }
        catch
        {
            // skip if not found
        }
    }
    private void PlayerPlayBismAllah()
    {
        try
        {
            if (m_player != null)
            {
                if (m_client != null)
                {
                    if (m_client.Book != null)
                    {
                        Chapter chapter1 = null;
                        foreach (Chapter chapter in m_client.Book.Chapters)
                        {
                            if (chapter.Number == 1)
                            {
                                chapter1 = chapter;
                                break;
                            }
                        }

                        if (chapter1 != null)
                        {
                            if (chapter1.Verses.Count > 0)
                            {
                                try
                                {
                                    // download file if not on disk
                                    DownloadVerseAudioFile(chapter1.Verses[0]);

                                    // open only, don't play
                                    m_player.Open(m_downloaded_audio_filename);

                                    if (m_player.Opened)
                                    {
                                        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_pause.png"))
                                        {
                                            PlayerPlayLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_pause.png");
                                        }
                                        ToolTip.SetToolTip(PlayerPlayLabel, "Pause");
                                        PlayerPlayLabel.Refresh();

                                        m_player.VolumeAll = m_audio_volume;

                                        m_player.Play();
                                        WaitForPlayToFinish();
                                    }
                                }
                                catch
                                {
                                    PlayerStopLabel_Click(null, null);
                                    AskUserToDownloadAudioFilesManually();
                                }
                            }
                        }
                    }
                }
            }
        }
        catch
        {
            // skip if not found
        }
    }
    private void PlayerOpenAudioFile(Verse verse)
    {
        if (verse != null)
        {
            if (m_player != null)
            {
                // on first play
                if (m_first_play)
                {
                    // play AudhuBillah always at start
                    PlayerPlayAudhuBillah();

                    // play BismAllah for any Quran verse except 1:1 and chapter 9
                    if (verse.Chapter != null)
                    {
                        if ((verse.Chapter.Number != 1) && (verse.Chapter.Number != 9))
                        {
                            PlayerPlayBismAllah();
                        }
                        else // either chapter 1 or 9
                        {
                            if (verse.Chapter.Number == 1)
                            {
                                if (verse.NumberInChapter > 1) // not 1:1
                                {
                                    PlayerPlayBismAllah();
                                }
                            }
                            else if (verse.Chapter.Number == 9)
                            {
                                // do nothing
                            }
                        }
                    }

                    m_first_play = false;
                }
                else // on subsequent play
                {
                    // play BismAllah before verse 1 of any chapter except chapter 1 and 9
                    // play AudhuBillah before verse 1 of chapter 9
                    if (verse.NumberInChapter == 1)
                    {
                        if (verse.Chapter != null)
                        {
                            if ((verse.Chapter.Number != 1) && (verse.Chapter.Number != 9))
                            {
                                PlayerPlayBismAllah();
                            }
                            else if (verse.Chapter.Number == 9)
                            {
                                PlayerPlayAudhuBillah();
                            }
                        }
                    }
                }

                // load verse for playing (including verse 1 of chapter 1)
                try
                {
                    // download file if not on disk
                    DownloadVerseAudioFile(verse);

                    // open only, don't play
                    m_player.Open(m_downloaded_audio_filename);
                }
                catch
                {
                    PlayerStopLabel_Click(null, null);
                    AskUserToDownloadAudioFilesManually();
                }
            }
        }
        else // invalid verse
        {
            PlayerStopLabel_Click(null, null);
            MessageBox.Show("No verse available.", Application.ProductName);
        }
    }
    private void PlayerPreviousLabel_Click(object sender, EventArgs e)
    {
        try
        {
            ulong position = 0UL;
            if (m_player != null)
            {
                if (m_player.Opened)
                {
                    if ((m_player.Playing) || (m_player.Paused))
                    {
                        position = m_player.Position;
                        m_player.Stop();
                        m_player.Close();
                    }
                }
            }

            m_player_looping_i = 0;
            PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
            ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
            PlayerRepeatCounterLabel.Refresh();

            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_pause.png"))
            {
                PlayerPlayLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_pause.png");
            }
            ToolTip.SetToolTip(PlayerPlayLabel, "Pause");
            PlayerPlayLabel.Refresh();

            m_break_playing = false;
            if (position < 3000UL)
            {
                CurrentVerseIndex--;
            }
            PlayFromCurrentVerse();
        }
        catch
        {
            PlayerStopLabel_Click(null, null);
        }
    }
    private void PlayerNextLabel_Click(object sender, EventArgs e)
    {
        try
        {
            if (m_player != null)
            {
                if (m_player.Opened)
                {
                    if ((m_player.Playing) || (m_player.Paused))
                    {
                        m_player.Stop();
                        m_player.Close();
                    }
                }
            }

            m_player_looping_i = 0;
            PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
            ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
            PlayerRepeatCounterLabel.Refresh();

            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_pause.png"))
            {
                PlayerPlayLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_pause.png");
            }
            ToolTip.SetToolTip(PlayerPlayLabel, "Pause");
            PlayerPlayLabel.Refresh();

            m_break_playing = false;
            CurrentVerseIndex++;
            PlayFromCurrentVerse();
        }
        catch
        {
            PlayerStopLabel_Click(null, null);
        }
    }
    private void PlayerPlayLabel_Click(object sender, EventArgs e)
    {
        if (m_player != null)
        {
            //m_break_playing = false;
            PlayerStopLabel.Enabled = true;
            PlayerStopLabel.Refresh();

            if ((m_player.Closed) || (m_player.Stopped) || (m_player.Paused))
            {
                if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_pause.png"))
                {
                    PlayerPlayLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_pause.png");
                }
                ToolTip.SetToolTip(PlayerPlayLabel, "Pause");
                PlayerPlayLabel.Refresh();

                if ((m_player.Closed) || (m_player.Stopped))
                {
                    m_break_playing = false;
                    PlayFromCurrentVerse();
                }
                else if (m_player.Paused)
                {
                    m_player.Play(); // resume
                }
            }
            else if (m_player.Playing)
            {
                if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_play.png"))
                {
                    PlayerPlayLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_play.png");
                }
                ToolTip.SetToolTip(PlayerPlayLabel, "Play");
                PlayerPlayLabel.Refresh();

                m_player.Pause(); // pause play
            }
        }
    }
    private void PlayerStopLabel_Click(object sender, EventArgs e)
    {
        if (m_player != null)
        {
            m_break_playing = true;

            if (m_player.Opened)
            {
                if ((m_player.Playing) || (m_player.Paused))
                {
                    m_player.Stop();
                    m_player.Close();
                }
            }
        }
        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_play.png"))
        {
            PlayerPlayLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_play.png");
        }
        PlayerPlayLabel.Refresh();

        PlayerStopLabel.Enabled = false;
        PlayerStopLabel.Refresh();

        m_player_looping_i = 0;
        PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
        ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
        PlayerRepeatCounterLabel.Refresh();

        m_player_looping_all_i = 0;
        PlayerRepeatAllCounterLabel.Text = (m_player_looping_all_i + 1).ToString() + " / " + ((m_player_looping_all_count == int.MaxValue) ? "*" : m_player_looping_all_count.ToString());
        ToolTip.SetToolTip(PlayerRepeatAllCounterLabel, PlayerRepeatAllCounterLabel.Text);
        PlayerRepeatAllCounterLabel.Refresh();
    }
    private void PlayerRepeatLabel_Click(object sender, EventArgs e)
    {
        m_player_looping = !m_player_looping;
        if (m_player_looping)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_repeat_on.png"))
            {
                PlayerRepeatLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_repeat_on.png");
            }
            PlayerRepeatCounterLabel.Visible = true;
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_repeat.png"))
            {
                PlayerRepeatLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_repeat.png");
            }
            PlayerRepeatCounterLabel.Visible = false;
        }
        PlayerRepeatLabel.Refresh();

        PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
        ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
        PlayerRepeatCounterLabel.Refresh();
    }
    private void PlayerRepeatCounterLabel_Click(object sender, EventArgs e)
    {
        if (ModifierKeys == Keys.Shift)
        {
            switch (m_player_looping_count)
            {
                case int.MaxValue: m_player_looping_count = 7; break;
                case 7: m_player_looping_count = 5; break;
                case 5: m_player_looping_count = 3; break;
                case 3: m_player_looping_count = 2; break;
                case 2: m_player_looping_count = int.MaxValue; break;
            }
        }
        else
        {
            switch (m_player_looping_count)
            {
                case int.MaxValue: m_player_looping_count = 2; break;
                case 2: m_player_looping_count = 3; break;
                case 3: m_player_looping_count = 5; break;
                case 5: m_player_looping_count = 7; break;
                case 7: m_player_looping_count = int.MaxValue; break;
            }
        }

        PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
        ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
        PlayerRepeatCounterLabel.Refresh();
    }
    private void PlayerRepeatAllLabel_Click(object sender, EventArgs e)
    {
        m_player_looping_all = !m_player_looping_all;
        if (m_player_looping_all)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_repeat_all_on.png"))
            {
                PlayerRepeatAllLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_repeat_all_on.png");
            }
            PlayerRepeatAllCounterLabel.Visible = true;
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_repeat_all.png"))
            {
                PlayerRepeatAllLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_repeat_all.png");
            }
            PlayerRepeatAllCounterLabel.Visible = false;
        }
        PlayerRepeatAllLabel.Refresh();

        PlayerRepeatAllCounterLabel.Text = (m_player_looping_all_i + 1).ToString() + " / " + ((m_player_looping_all_count == int.MaxValue) ? "*" : m_player_looping_all_count.ToString());
        ToolTip.SetToolTip(PlayerRepeatAllCounterLabel, PlayerRepeatAllCounterLabel.Text);
        PlayerRepeatAllCounterLabel.Refresh();
    }
    private void PlayerRepeatAllCounterLabel_Click(object sender, EventArgs e)
    {
        if (ModifierKeys == Keys.Shift)
        {
            switch (m_player_looping_all_count)
            {
                case int.MaxValue: m_player_looping_all_count = 7; break;
                case 7: m_player_looping_all_count = 5; break;
                case 5: m_player_looping_all_count = 3; break;
                case 3: m_player_looping_all_count = 2; break;
                case 2: m_player_looping_all_count = int.MaxValue; break;
            }
        }
        else
        {
            switch (m_player_looping_all_count)
            {
                case int.MaxValue: m_player_looping_all_count = 2; break;
                case 2: m_player_looping_all_count = 3; break;
                case 3: m_player_looping_all_count = 5; break;
                case 5: m_player_looping_all_count = 7; break;
                case 7: m_player_looping_all_count = int.MaxValue; break;
            }
        }

        PlayerRepeatAllCounterLabel.Text = (m_player_looping_all_i + 1).ToString() + " / " + ((m_player_looping_all_count == int.MaxValue) ? "*" : m_player_looping_all_count.ToString());
        ToolTip.SetToolTip(PlayerRepeatAllCounterLabel, PlayerRepeatAllCounterLabel.Text);
        PlayerRepeatAllCounterLabel.Refresh();
    }
    private void PlayerMuteLabel_Click(object sender, EventArgs e)
    {
        if (m_player != null)
        {
            m_player.MuteAll = !m_player.MuteAll;
            if (m_player.MuteAll)
            {
                m_player.VolumeAll = 0;
                if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_muted.png"))
                {
                    PlayerMuteLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_muted.png");
                }
            }
            else
            {
                m_player.VolumeAll = m_audio_volume;
                if (File.Exists(Globals.IMAGES_FOLDER + "/" + "player_vol_hi.png"))
                {
                    PlayerMuteLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "player_vol_hi.png");
                }
            }
            PlayerMuteLabel.Refresh();
        }
    }
    private void PlayerVolumeTrackBar_Scroll(object sender, EventArgs e)
    {
        if (m_player != null)
        {
            m_audio_volume = PlayerVolumeTrackBar.Value * (1000 / PlayerVolumeTrackBar.Maximum);
            m_player.VolumeAll = m_audio_volume;
            ToolTip.SetToolTip(PlayerVolumeTrackBar, "Volume " + (m_audio_volume / (1000 / PlayerVolumeTrackBar.Maximum)).ToString() + "%");
        }
    }
    private void PlayerVerseSilenceGapTrackBar_Scroll(object sender, EventArgs e)
    {
        m_silence_between_verses = (float)PlayerVerseSilenceGapTrackBar.Value / (PlayerVerseSilenceGapTrackBar.Maximum / 2);
        SetToolTipPlayerVerseSilenceGapTrackBar();
    }
    private void SetToolTipPlayerVerseSilenceGapTrackBar()
    {
        if (m_silence_between_verses == 0.0F)
        {
            ToolTip.SetToolTip(PlayerVerseSilenceGapTrackBar, "no silence between verse replays");
        }
        else
        {
            ToolTip.SetToolTip(PlayerVerseSilenceGapTrackBar, m_silence_between_verses.ToString("0.0") + " verses silence between verse replays");
        }
    }
    private void PlayerSelectionSilenceGapTrackBar_Scroll(object sender, EventArgs e)
    {
        m_silence_between_selections = PlayerSelectionSilenceGapTrackBar.Value;
        SetToolTipPlayerSelectionSilenceGapTrackBar();
    }
    private void SetToolTipPlayerSelectionSilenceGapTrackBar()
    {
        switch (m_silence_between_selections)
        {
            case 0:
                m_silence_time_between_selections = 0 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, "no silence between selection replays");
                break;
            case 1:
                m_silence_time_between_selections = 10 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, "10 seconds silence between selection replays");
                break;
            case 2:
                m_silence_time_between_selections = 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, "1 minute silence between selection replays");
                break;
            case 3:
                m_silence_time_between_selections = 5 * 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, "5 minutes silence between selection replays");
                break;
            case 4:
                m_silence_time_between_selections = 15 * 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, "15 minutes silence between selection replays");
                break;
            case 5:
                m_silence_time_between_selections = 1 * 60 * 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, "1 hour silence between selection replays");
                break;
            case 6:
                m_silence_time_between_selections = 2 * 60 * 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, "2 hours silence between selection replays");
                break;
            case 7:
                m_silence_time_between_selections = 6 * 60 * 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, "6 hours silence between selection replays");
                break;
            case 8:
                m_silence_time_between_selections = 12 * 60 * 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, "12 hours silence between selection replays");
                break;
            case 9:
                m_silence_time_between_selections = 24 * 60 * 60 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, "1 day silence between selection replays");
                break;
            case 10:
                m_silence_time_between_selections = new Random().Next(10, 24 * 60 * 60) * 1000; // 10s to 24hr
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, "Random silence between selection replays");
                break;
            default:
                m_silence_time_between_selections = 0 * 1000;
                ToolTip.SetToolTip(PlayerSelectionSilenceGapTrackBar, "no silence between selection replays");
                break;
        }
    }
    private void PlayFromCurrentVerse()
    {
        if (m_player != null)
        {
            if (m_client != null)
            {
                // if silent_mode or previous verses finished, play current verse
                if ((m_player.Length - m_player.Position) < 50UL)
                {
                    List<Verse> verses = null;
                    if (m_found_verses_displayed)
                    {
                        verses = m_client.FoundVerses;
                    }
                    else
                    {
                        if (m_client.Selection != null)
                        {
                            verses = m_client.Selection.Verses;
                        }
                    }

                    if (verses != null)
                    {
                        int start = CurrentVerseIndex;
                        for (int i = start; i < verses.Count; i++)
                        {
                            // stop immediately if requested
                            if (m_break_playing)
                            {
                                break;
                            }

                            // play verse, loop if required
                            if (m_player_looping)
                            {
                                PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
                                ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
                                PlayerRepeatCounterLabel.Refresh();

                                // play verse
                                PlayVerse(i);

                                if (m_player_looping_i < m_player_looping_count - 1) // -1 as already played once
                                {
                                    m_player_looping_i++;
                                    i--; // for's i++ will replay same verse(i)
                                }
                                else
                                {
                                    m_player_looping_i = 0;
                                    PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
                                    ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
                                    PlayerRepeatCounterLabel.Refresh();
                                }
                            }
                            else
                            {
                                PlayerRepeatCounterLabel.Text = (m_player_looping_i + 1).ToString() + " / " + ((m_player_looping_count == int.MaxValue) ? "*" : m_player_looping_count.ToString());
                                ToolTip.SetToolTip(PlayerRepeatCounterLabel, PlayerRepeatCounterLabel.Text);
                                PlayerRepeatCounterLabel.Refresh();

                                if (m_player_looping_i == 0) // play verse once if no m_player_looping
                                {
                                    // play verse
                                    PlayVerse(i);

                                    // if m_player_looping was ADDED while verse was playing
                                    if (m_player_looping) // ***
                                    {
                                        // replay verse
                                        m_player_looping_i++;
                                        i--; // for's i++ will replay same verse(i)
                                    }
                                }
                                else // if m_player_looping was REMOVED while verse was playing
                                {
                                    // reset m_player_looping_i to move to next verse (in the check above ***) 
                                    m_player_looping_i = 0;
                                }
                            }

                            // if finished playing, loop all selection if required
                            if (i == verses.Count - 1)
                            {
                                if (m_player_looping_all)
                                {
                                    m_player_looping_all_i++;
                                    PlayerRepeatAllCounterLabel.Text = (m_player_looping_all_i + 1).ToString() + " / " + ((m_player_looping_all_count == int.MaxValue) ? "*" : m_player_looping_all_count.ToString());
                                    ToolTip.SetToolTip(PlayerRepeatAllCounterLabel, PlayerRepeatAllCounterLabel.Text);
                                    PlayerRepeatAllCounterLabel.Refresh();

                                    // and go into silence if needed
                                    if (m_silence_time_between_selections > 0)
                                    {
                                        WaitFor(m_silence_time_between_selections);
                                    }

                                    if (m_player_looping_all_i < m_player_looping_all_count)
                                    {
                                        i = -1; // for's i++ will reset it to 0
                                    }
                                    else
                                    {
                                        m_player_looping_all_i = 0;

                                        PlayerRepeatAllCounterLabel.Text = (m_player_looping_all_i + 1).ToString() + " / " + ((m_player_looping_all_count == int.MaxValue) ? "*" : m_player_looping_all_count.ToString());
                                        ToolTip.SetToolTip(PlayerRepeatAllCounterLabel, PlayerRepeatAllCounterLabel.Text);
                                        PlayerRepeatAllCounterLabel.Refresh();
                                    }
                                }
                            }
                        }
                    }
                }
                PlayerStopLabel_Click(null, null);
            }
        }
    }
    private void UpdatePlayerButtons(Verse verse)
    {
        if (m_client != null)
        {
            List<Verse> verses = null;
            if (m_found_verses_displayed)
            {
                verses = m_client.FoundVerses;
            }
            else
            {
                if (m_client.Selection != null)
                {
                    verses = m_client.Selection.Verses;
                }
            }
            if (verses != null)
            {
                if (verses.Count > 0)
                {
                    PlayerPreviousLabel.Enabled = (verse.Number != verses[0].Number);
                    PlayerNextLabel.Enabled = (verse.Number != verses[verses.Count - 1].Number);
                }
                else
                {
                    PlayerPreviousLabel.Enabled = false;
                    PlayerNextLabel.Enabled = false;
                }
            }
        }
    }
    #endregion
    #region Audio Downloader
    ///////////////////////////////////////////////////////////////////////////////
    private List<string> m_downloaded_reciter_folders = null;
    private void AskUserToDownloadAudioFilesManually()
    {
        if (Directory.Exists(Globals.AUDIO_FOLDER))
        {
            if (MessageBox.Show("Cannot auto-download audio file for this verse.\r\n\r\n"
                              + "You need to download all audio files and unzip them to folder:\r\n"
                              + Application.StartupPath + "\\" + Globals.AUDIO_FOLDER + "\\" + m_reciter + "\\" + "\r\n\r\nDo you want to download them now?",
                              Application.ProductName, MessageBoxButtons.YesNo, MessageBoxIcon.Question) == DialogResult.Yes)
            {
                Control control = new Control();
                if (m_client != null)
                {
                    if (m_client.Book != null)
                    {
                        if (m_client.Book.RecitationInfos != null)
                        {
                            foreach (string key in m_client.Book.RecitationInfos.Keys)
                            {
                                if (m_client.Book.RecitationInfos[key].Folder == m_reciter)
                                {
                                    control.Tag = RecitationInfo.DEFAULT_URL_PREFIX + m_client.Book.RecitationInfos[key].Url;
                                    LinkLabel_Click(control, null);
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    private void DownloadVerseAudioFile(Verse verse)
    {
        // mirror remote_folder locally
        string audio_folder = Globals.AUDIO_FOLDER + "/" + m_reciter;
        if (!Directory.Exists(audio_folder))
        {
            Directory.CreateDirectory(audio_folder);
        }

        if (Directory.Exists(audio_folder))
        {
            // generate audio_filename from verse address
            string audio_filename = null;
            string full_audio_folder = null;
            if (verse == null)
            {
                audio_filename = "001000" + "." + RecitationInfo.FileType; // audhubillah
                full_audio_folder = audio_folder + "/" + "001";
            }
            else
            {
                if (verse.Chapter != null)
                {
                    audio_filename = verse.Chapter.Number.ToString("000") + verse.NumberInChapter.ToString("000") + "." + RecitationInfo.FileType;
                    full_audio_folder = audio_folder + "/" + verse.Chapter.Number.ToString("000");
                }
            }

            // fill up local_audio_filename to return to caller
            m_downloaded_audio_filename = full_audio_folder + "/" + audio_filename;
            string outer_downloaded_audio_filename = audio_folder + "/" + audio_filename;
            string backup_downloaded_audio_filename = Application.StartupPath[0].ToString() + ":" + "/" + "Quran" + "/" + full_audio_folder + "/" + audio_filename;
            // audio file exists in normal folder
            if (File.Exists(m_downloaded_audio_filename))
            {
                // no need to download
            }
            // audio file exists in outer folder
            else if (File.Exists(outer_downloaded_audio_filename))
            {
                if (!Directory.Exists(full_audio_folder))
                {
                    Directory.CreateDirectory(full_audio_folder);
                }

                if (Directory.Exists(full_audio_folder))
                {
                    File.Move(outer_downloaded_audio_filename, m_downloaded_audio_filename);
                }
            }
            // audio file exists in backup folder
            else if (File.Exists(backup_downloaded_audio_filename))
            {
                m_downloaded_audio_filename = backup_downloaded_audio_filename;
            }
            else
            {
                // try to download audio file
                if (m_client != null)
                {
                    if (m_client.Book != null)
                    {
                        if (m_client.Book.RecitationInfos != null)
                        {
                            string recitation_url = null;
                            foreach (string key in m_client.Book.RecitationInfos.Keys)
                            {
                                if (m_client.Book.RecitationInfos[key].Folder == m_reciter)
                                {
                                    recitation_url = RecitationInfo.UrlPrefix + m_client.Book.RecitationInfos[key].Url + "/" + audio_filename;
                                    break;
                                }
                            }

                            DownloadFile(recitation_url, m_downloaded_audio_filename);
                        }
                    }
                }
            }
        }
    }
    private string GetVerseAudioFilename(int verse_index)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Book.Verses != null)
                {
                    if ((verse_index >= 0) && (verse_index < m_client.Book.Verses.Count))
                    {
                        Verse verse = m_client.Book.Verses[verse_index];
                        if (verse != null)
                        {
                            if (verse.Chapter != null)
                            {
                                return (verse.Chapter.Number.ToString("000") + verse.NumberInChapter.ToString("000") + "." + RecitationInfo.FileType);
                            }
                        }
                    }
                }
            }
        }
        return "000000.mp3";
    }
    private string GetVerseAudioFilepath(int verse_index)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Book.Verses != null)
                {
                    if ((verse_index >= 0) && (verse_index < m_client.Book.Verses.Count))
                    {
                        Verse verse = m_client.Book.Verses[verse_index];
                        if (verse != null)
                        {
                            if (verse.Chapter != null)
                            {
                                return (verse.Chapter.Number.ToString("000") + "/" + verse.Chapter.Number.ToString("000") + verse.NumberInChapter.ToString("000") + "." + RecitationInfo.FileType);
                            }
                        }
                    }
                }
            }
        }
        return "000/000000.mp3";
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Audio Recitations
    ///////////////////////////////////////////////////////////////////////////////
    private string m_reciter = Client.DEFAULT_RECITATION;
    private void PopulateRecitationsCheckedListBox()
    {
        try
        {
            // TRICK: to disable item in a list, just ignore user check using this trick
            RecitationsCheckedListBox.ItemCheck += new ItemCheckEventHandler(RecitationsCheckedListBox_ItemCheck);

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.RecitationInfos != null)
                    {
                        for (int i = 0; i < 3; i++) RecitationsCheckedListBox.SelectedIndexChanged -= new EventHandler(RecitationsCheckedListBox_SelectedIndexChanged);
                        RecitationsCheckedListBox.BeginUpdate();
                        RecitationsCheckedListBox.Items.Clear();
                        foreach (string key in m_client.Book.RecitationInfos.Keys)
                        {
                            string reciter = m_client.Book.RecitationInfos[key].Reciter;
                            RecitationsCheckedListBox.Items.Add(reciter);
                        }
                    }
                }
            }
        }
        finally
        {
            RecitationsCheckedListBox.EndUpdate();
            RecitationsCheckedListBox.SelectedIndexChanged += new EventHandler(RecitationsCheckedListBox_SelectedIndexChanged);
        }
    }
    private void RecitationsCheckedListBox_ItemCheck(object sender, ItemCheckEventArgs e)
    {
        if (e.CurrentValue == CheckState.Indeterminate)
        {
            e.NewValue = e.CurrentValue;
        }
    }
    private void PopulateReciterComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) ReciterComboBox.SelectedIndexChanged -= new EventHandler(ReciterComboBox_SelectedIndexChanged);
            ReciterComboBox.BeginUpdate();

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.RecitationInfos != null)
                    {
                        ReciterComboBox.Items.Clear();
                        foreach (string key in m_client.Book.RecitationInfos.Keys)
                        {
                            string reciter = m_client.Book.RecitationInfos[key].Reciter;
                            ReciterComboBox.Items.Add(reciter);
                        }
                        if (ReciterComboBox.Items.Count > 3)
                        {
                            ReciterComboBox.SelectedIndex = 3;
                        }
                    }
                }
            }
        }
        finally
        {
            ReciterComboBox.EndUpdate();
            ReciterComboBox.SelectedIndexChanged += new EventHandler(ReciterComboBox_SelectedIndexChanged);
        }
    }
    private void UpdateRecitationsCheckedListBox()
    {
        try
        {
            /////////////////////////////////////////////////////////////////////////////
            // foreach reciter -> foreach verse, if audio file exist and valid then check
            /////////////////////////////////////////////////////////////////////////////

            if (m_downloaded_reciter_folders == null)
            {
                m_downloaded_reciter_folders = new List<string>();
            }
            m_downloaded_reciter_folders.Clear();

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.RecitationInfos != null)
                    {
                        foreach (string reciter_folder in m_client.Book.RecitationInfos.Keys)
                        {
                            bool fully_downloaded = true;
                            for (int i = 0; i < m_client.Book.Verses.Count; i++)
                            {
                                string download_folder = Globals.AUDIO_FOLDER + "/" + reciter_folder;
                                string filename = GetVerseAudioFilename(i); // e.g. i=8 ==> 002001.mp3
                                string full_filename = GetVerseAudioFilepath(i); // e.g. i=8 ==> 002/002001.mp3
                                string full_path = download_folder + "/" + full_filename;
                                if (File.Exists(full_path)) // file exist
                                {
                                    long filesize = (new FileInfo(full_path)).Length;
                                    if (filesize < 1024) // invalid file
                                    {
                                        fully_downloaded = false;
                                        break;
                                    }
                                }
                                else // file not found
                                {
                                    fully_downloaded = false;
                                    break;
                                }
                            }

                            int index = 0;
                            string reciter = m_client.Book.RecitationInfos[reciter_folder].Reciter;
                            for (int i = 0; i < RecitationsCheckedListBox.Items.Count; i++)
                            {
                                if (RecitationsCheckedListBox.Items[i].ToString() == reciter)
                                {
                                    index = i;
                                }
                            }

                            if (fully_downloaded)
                            {
                                RecitationsCheckedListBox.SetItemCheckState(index, CheckState.Indeterminate);
                                m_downloaded_reciter_folders.Add(reciter_folder);
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
    }
    private void RecitationsCheckedListBox_SelectedIndexChanged(object sender, EventArgs e)
    {
    }
    private void RecitationsCheckedListBox_MouseUp(object sender, MouseEventArgs e)
    {
        if (RecitationsCheckedListBox.SelectedItem != null)
        {
            string reciter = RecitationsCheckedListBox.SelectedItem.ToString();

            string reciter_folder = null;
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.RecitationInfos != null)
                    {
                        foreach (string key in m_client.Book.RecitationInfos.Keys)
                        {
                            if (reciter == m_client.Book.RecitationInfos[key].Reciter)
                            {
                                reciter_folder = key;
                                break;
                            }
                        }
                    }
                }
            }

            if (m_downloaded_reciter_folders.Contains(reciter_folder))
            {
                RecitationsCheckedListBox.SetItemCheckState(RecitationsCheckedListBox.SelectedIndex, CheckState.Indeterminate);
            }
        }
    }
    private void ReciterComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ReciterComboBox.SelectedItem != null)
        {
            string reciter = ReciterComboBox.SelectedItem.ToString();
            RecitationGroupBox.Text = reciter + "                                 ";

            // update m_recitation_folder
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.RecitationInfos != null)
                    {
                        foreach (string key in m_client.Book.RecitationInfos.Keys)
                        {
                            if (m_client.Book.RecitationInfos[key].Reciter == reciter)
                            {
                                m_reciter = m_client.Book.RecitationInfos[key].Folder;
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
    private void RecitationsApplySettingsLabel_Click(object sender, EventArgs e)
    {
        if (!RecitationsDownloadGroupBox.Visible)
        {
            UpdateRecitationsCheckedListBox();

            RecitationsDownloadGroupBox.Visible = true;
            RecitationsCancelSettingsLabel.Visible = true;
            RecitationsDownloadGroupBox.BringToFront();

            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "apply.png"))
            {
                RecitationsApplySettingsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "apply.png");
            }
            ToolTip.SetToolTip(RecitationsApplySettingsLabel, "Download complete Quran recitations");
        }
        else
        {
            RecitationsDownloadGroupBox.Visible = false;
            RecitationsCancelSettingsLabel.Visible = false;

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (File.Exists(Globals.IMAGES_FOLDER + "/" + "settings.png"))
                    {
                        RecitationsApplySettingsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "settings.png");
                    }
                    ToolTip.SetToolTip(RecitationsApplySettingsLabel, "Add/Remove recitations");

                    if (m_client.Book.RecitationInfos != null)
                    {
                        try
                        {
                            List<string> keys_to_download = new List<string>();
                            foreach (int cheched_index in RecitationsCheckedListBox.CheckedIndices)
                            {
                                if (RecitationsCheckedListBox.GetItemCheckState(cheched_index) != CheckState.Indeterminate)
                                {
                                    foreach (string key in m_client.Book.RecitationInfos.Keys)
                                    {
                                        string reciter = RecitationsCheckedListBox.Items[cheched_index].ToString();
                                        if (m_client.Book.RecitationInfos[key].Reciter == reciter)
                                        {
                                            keys_to_download.Add(key);
                                            break;
                                        }
                                    }
                                }
                            }

                            foreach (string reciter_folder in m_client.Book.RecitationInfos.Keys)
                            {
                                if (keys_to_download.Contains(reciter_folder))
                                {
                                    ProgressBar.Minimum = 1;
                                    ProgressBar.Maximum = m_client.Book.Verses.Count;
                                    ProgressBar.Value = 1;
                                    ProgressBar.Refresh();

                                    for (int i = 0; i < m_client.Book.Verses.Count; i++)
                                    {
                                        string download_folder = Globals.AUDIO_FOLDER + "/" + reciter_folder;
                                        string filename = GetVerseAudioFilename(i); // e.g. i=8 ==> 002001.mp3
                                        string full_filename = GetVerseAudioFilepath(i); // e.g. i=8 ==> 002/002001.mp3
                                        string full_path = download_folder + "/" + full_filename;
                                        if (File.Exists(full_path)) // file exist
                                        {
                                            long filesize = (new FileInfo(full_path)).Length;
                                            if (filesize < 1024) // if < 1kb invalid file then re-download
                                            {
                                                DownloadFile(RecitationInfo.UrlPrefix + m_client.Book.RecitationInfos[reciter_folder].Url + "/" + filename, full_path);
                                            }
                                        }
                                        else // file not found so download it
                                        {
                                            DownloadFile(RecitationInfo.UrlPrefix + m_client.Book.RecitationInfos[reciter_folder].Url + "/" + filename, full_path);
                                        }

                                        ProgressBar.Value = i + 1;
                                        ProgressBar.Refresh();

                                        Application.DoEvents();
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            MessageBox.Show(ex.Message, Application.ProductName);
                        }
                        finally
                        {
                            if (m_client.Selection != null)
                            {
                                List<Verse> verses = m_client.Selection.Verses;
                                if (verses.Count > 0)
                                {
                                    ProgressBar.Minimum = 1;
                                    ProgressBar.Maximum = m_client.Book.Verses.Count;
                                    ProgressBar.Value = verses[0].Number;
                                    ProgressBar.Refresh();
                                }
                            }
                        }
                    }
                }
            }
        }

        RecitationsApplySettingsLabel.Refresh();
    }
    private void RecitationsCancelSettingsLabel_Click(object sender, EventArgs e)
    {
        RecitationsDownloadGroupBox.Visible = false;
        RecitationsDownloadGroupBox.Refresh();
        RecitationsCancelSettingsLabel.Visible = RecitationsDownloadGroupBox.Visible;
        RecitationsCancelSettingsLabel.Refresh();
        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "settings.png"))
        {
            RecitationsApplySettingsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "settings.png");
        }
        ToolTip.SetToolTip(RecitationsApplySettingsLabel, "Setup recitations");
        PopulateRecitationsCheckedListBox();
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Translations/Tafseers
    ///////////////////////////////////////////////////////////////////////////////
    private int m_information_page_index = 0;
    private int m_information_box_top = DEFAULT_INFORMATION_BOX_TOP;
    private int m_translation_box_width = DEFAULT_TRANSLATION_BOX_WIDTH;
    private void TranslationSplitContainer_SplitterMoved(object sender, SplitterEventArgs e)
    {
        m_translation_box_width = this.TranslationSplitContainer.SplitterDistance;
    }
    private void TabControl_SelectedIndexChanged(object sender, EventArgs e)
    {
        m_information_page_index = TabControl.SelectedIndex;
    }
    private void TabControl_Click(object sender, EventArgs e)
    {
        if (TabControl.SelectedTab == UserTextTabPage)
        {
            m_user_text_mode = true;
            UserTextTextBox.Focus();
            CalculateCurrentValue();
        }
    }
    private void TabControl_Enter(object sender, EventArgs e)
    {
        this.AcceptButton = null;

        FindByTextButton.Enabled = false;
        FindBySimilarityButton.Enabled = false;
        FindByNumbersButton.Enabled = false;
        FindByProstrationTypeButton.Enabled = false;
        FindByFrequencyButton.Enabled = false;

        ResetFindByTextSearchBlockSizeLabels();
        ResetFindByTextSearchTypeLabels();
        ResetFindBySimilarityResultTypeLabels();
        ResetFindByNumbersResultTypeLabels();
        ResetFindByFrequencyResultTypeLabels();
    }
    private Font m_translation_font = null;
    private Color m_translation_color = DEFAULT_TRANSALTION_FONT_COLOR;
    private void TranslationFontLabel_Click(object sender, EventArgs e)
    {
        try
        {
            if (FontDialog != null)
            {
                FontDialog.ShowColor = true;
                FontDialog.ShowApply = true;
                FontDialog.Font = TranslationTextBox.Font;
                FontDialog.Color = TranslationTextBox.ForeColor;
                Font cancel_font = FontDialog.Font;
                Color cancel_color = FontDialog.Color;

                if (FontDialog.ShowDialog() == DialogResult.OK)
                {
                    m_translation_font = FontDialog.Font;
                    m_translation_color = FontDialog.Color;
                    ApplyTranslationFontAndColor();
                }
                else
                {
                    FontDialog.Font = cancel_font;
                    FontDialog.Color = cancel_color;
                    m_translation_font = cancel_font;
                    m_translation_color = cancel_color;
                    ApplyTranslationFontAndColor();
                }
            }
        }
        catch
        {
            // silence exception
        }
    }
    private void FontDialog_Apply(object sender, EventArgs e)
    {
        if (FontDialog != null)
        {
            m_translation_font = FontDialog.Font;
            m_translation_color = FontDialog.Color;
            ApplyTranslationFontAndColor();
        }
    }
    // translation
    private List<string> m_selected_translations = new List<string>();
    private void PopulateTranslatorsCheckedListBox()
    {
        try
        {
            // TRICK: to disable item in a list, just ignore user check using this trick
            TranslatorsCheckedListBox.ItemCheck += new ItemCheckEventHandler(TranslatorsCheckedListBox_ItemCheck);

            for (int i = 0; i < 3; i++) TranslatorsCheckedListBox.SelectedIndexChanged -= new EventHandler(TranslatorsCheckedListBox_SelectedIndexChanged);
            TranslatorsCheckedListBox.BeginUpdate();
            TranslatorsCheckedListBox.Items.Clear();

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.Verses != null)
                    {
                        if (m_client.Book.Verses.Count > 0)
                        {
                            m_selected_translations.Clear();
                            foreach (string key in m_client.Book.Verses[0].Translations.Keys)
                            {
                                m_selected_translations.Add(key);
                            }

                            // populate TranslatorsCheckedListBox
                            if (m_client.Book.TranslationInfos != null)
                            {
                                foreach (string key in m_client.Book.TranslationInfos.Keys)
                                {
                                    string name = m_client.Book.TranslationInfos[key].Name;
                                    bool is_checked = m_selected_translations.Contains(key);
                                    TranslatorsCheckedListBox.Items.Add(name, is_checked);
                                }

                                // disable list item if default so user cannot uncheck it
                                for (int i = 0; i < TranslatorsCheckedListBox.Items.Count; i++)
                                {
                                    string item_text = TranslatorsCheckedListBox.Items[i].ToString();
                                    foreach (string key in m_client.Book.TranslationInfos.Keys)
                                    {
                                        string name = m_client.Book.TranslationInfos[key].Name;
                                        if (name == item_text)
                                        {
                                            if (
                                                (key == Client.DEFAULT_EMLAAEI_TEXT) ||
                                                (key == Client.DEFAULT_TRANSLATION) ||
                                                (key == Client.DEFAULT_OLD_TRANSLATION) ||
                                                (key == Client.DEFAULT_TRANSLITERATION) ||
                                                (key == Client.DEFAULT_WORD_MEANINGS) ||
                                                (key == Client.DEFAULT_TRANSLATION_1) ||
                                                (key == Client.DEFAULT_TRANSLATION_2) ||
                                                (key == Client.DEFAULT_TRANSLATION_3) ||
                                                (key == Client.DEFAULT_TRANSLATION_4) ||
                                                (key == Client.DEFAULT_TRANSLATION_5) ||
                                                (key == Client.DEFAULT_TRANSLATION_6) ||
                                                (key == Client.DEFAULT_TRANSLATION_7)
                                               )
                                            {
                                                TranslatorsCheckedListBox.SetItemCheckState(i, CheckState.Indeterminate);
                                            }
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            TranslatorsCheckedListBox.Sorted = true;
            TranslatorsCheckedListBox.EndUpdate();
            TranslatorsCheckedListBox.SelectedIndexChanged += new EventHandler(TranslatorsCheckedListBox_SelectedIndexChanged);
        }
    }
    private void TranslatorsCheckedListBox_ItemCheck(object sender, ItemCheckEventArgs e)
    {
        if (e.CurrentValue == CheckState.Indeterminate)
        {
            e.NewValue = e.CurrentValue;
        }
    }
    private void PopulateTranslatorComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) TranslatorComboBox.SelectedIndexChanged -= new EventHandler(TranslatorComboBox_SelectedIndexChanged);
            TranslatorComboBox.BeginUpdate();

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.Verses != null)
                    {
                        if (m_client.Book.Verses.Count > 0)
                        {
                            if (m_client.Book.Verses[0].Translations != null)
                            {
                                if (m_client.Book.Verses[0].Translations.Count == 0)
                                {
                                    DownloadTranslations();
                                }

                                string backup_translation_name = null;
                                if (TranslatorComboBox.SelectedItem != null)
                                {
                                    backup_translation_name = TranslatorComboBox.SelectedItem.ToString();
                                }

                                if (m_client.Book.TranslationInfos != null)
                                {
                                    TranslatorComboBox.Items.Clear();
                                    foreach (string key in m_client.Book.Verses[0].Translations.Keys)
                                    {
                                        string name = m_client.Book.TranslationInfos[key].Name;
                                        TranslatorComboBox.Items.Add(name);
                                    }

                                    if (!String.IsNullOrEmpty(backup_translation_name))
                                    {
                                        bool found = false;
                                        for (int i = 0; i < TranslatorComboBox.Items.Count; i++)
                                        {
                                            if (TranslatorComboBox.Items[i].ToString() == backup_translation_name)
                                            {
                                                found = true;
                                                break;
                                            }
                                        }
                                        if (found)
                                        {
                                            this.TranslatorComboBox.SelectedItem = backup_translation_name;
                                        }
                                        else
                                        {
                                            this.TranslatorComboBox.SelectedItem = m_client.Book.TranslationInfos[Client.DEFAULT_TRANSLATION].Name;
                                        }
                                    }
                                    else // if all translations were cleared, we still have the 3 mandatory ones at minimum
                                    {
                                        if (this.TranslatorComboBox.Items.Count >= 3)
                                        {
                                            this.TranslatorComboBox.SelectedItem = m_client.Book.TranslationInfos[Client.DEFAULT_TRANSLATION].Name;
                                        }
                                        else // if user deleted one or more of the 3 mandatory translations manually
                                        {
                                            if (this.TranslatorComboBox.Items.Count > 0)
                                            {
                                                this.TranslatorComboBox.SelectedItem = 0;
                                            }
                                            else // if no transaltion at all was left
                                            {
                                                TranslatorComboBox.SelectedIndex = -1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        catch
        {
            TranslatorComboBox.SelectedIndex = -1;
        }
        finally
        {
            TranslatorComboBox.Sorted = true;
            TranslatorComboBox.EndUpdate();
            TranslatorComboBox.SelectedIndexChanged += new EventHandler(TranslatorComboBox_SelectedIndexChanged);
        }
    }
    private void PopulateTranslatorsComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) TranslatorsComboBox.SelectedIndexChanged -= new EventHandler(TranslatorComboBox_SelectedIndexChanged);
            TranslatorsComboBox.BeginUpdate();

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.Book.Verses != null)
                    {
                        if (m_client.Book.Verses.Count > 0)
                        {
                            if (m_client.Book.Verses[0].Translations != null)
                            {
                                if (m_client.Book.Verses[0].Translations.Count == 0)
                                {
                                    DownloadTranslations();
                                }

                                string backup_translation_name = null;
                                if (TranslatorsComboBox.SelectedItem != null)
                                {
                                    backup_translation_name = TranslatorsComboBox.SelectedItem.ToString();
                                }

                                if (m_client.Book.TranslationInfos != null)
                                {
                                    TranslatorsComboBox.Items.Clear();
                                    foreach (string key in m_client.Book.Verses[0].Translations.Keys)
                                    {
                                        string name = m_client.Book.TranslationInfos[key].Name;
                                        TranslatorsComboBox.Items.Add(name);
                                    }

                                    if (!String.IsNullOrEmpty(backup_translation_name))
                                    {
                                        bool found = false;
                                        for (int i = 0; i < TranslatorsComboBox.Items.Count; i++)
                                        {
                                            if (TranslatorsComboBox.Items[i].ToString() == backup_translation_name)
                                            {
                                                found = true;
                                                break;
                                            }
                                        }
                                        if (found)
                                        {
                                            this.TranslatorsComboBox.SelectedItem = backup_translation_name;
                                        }
                                        else
                                        {
                                            this.TranslatorsComboBox.SelectedItem = m_client.Book.TranslationInfos[Client.DEFAULT_TRANSLATION].Name;
                                        }
                                    }
                                    else // if all translations were cleared, we still have the 3 mandatory ones at minimum
                                    {
                                        if (this.TranslatorsComboBox.Items.Count >= 3)
                                        {
                                            this.TranslatorsComboBox.SelectedItem = m_client.Book.TranslationInfos[Client.DEFAULT_TRANSLATION].Name;
                                        }
                                        else // if user deleted one or more of the 3 mandatory translations manually
                                        {
                                            if (this.TranslatorsComboBox.Items.Count > 0)
                                            {
                                                this.TranslatorsComboBox.SelectedItem = 0;
                                            }
                                            else // if no transaltion at all was left
                                            {
                                                TranslatorsComboBox.SelectedIndex = -1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        catch
        {
            TranslatorsComboBox.SelectedIndex = -1;
        }
        finally
        {
            TranslatorsComboBox.Sorted = true;
            TranslatorsComboBox.EndUpdate();
            TranslatorsComboBox.SelectedIndexChanged += new EventHandler(TranslatorComboBox_SelectedIndexChanged);
        }
    }
    private void TranslatorsCheckedListBox_SelectedIndexChanged(object sender, EventArgs e)
    {
    }
    private void TranslationsApplySettingsLabel_Click(object sender, EventArgs e)
    {
        TranslatorsCheckedListBox.Visible = !TranslatorsCheckedListBox.Visible;
        TranslationsCancelSettingsLabel.Visible = TranslatorsCheckedListBox.Visible;

        if (TranslatorsCheckedListBox.Visible)
        {
            TranslatorsCheckedListBox.BringToFront();
            TranslationsCancelSettingsLabel.BringToFront();

            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "apply.png"))
            {
                TranslationsApplySettingsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "apply.png");
            }
            ToolTip.SetToolTip(TranslationsApplySettingsLabel, "Download translations");
        }
        else // download any newly checked translation(s)
        {
            TranslatorsCheckedListBox.SendToBack();
            TranslationsCancelSettingsLabel.SendToBack();

            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "settings.png"))
            {
                TranslationsApplySettingsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "settings.png");
            }
            ToolTip.SetToolTip(TranslationsApplySettingsLabel, "Add/Remove translations");

            int index_of_first_new_translation = DownloadTranslations();
            if ((index_of_first_new_translation >= 0) && (index_of_first_new_translation < TranslatorComboBox.Items.Count))
            {
                TranslatorComboBox.SelectedIndex = index_of_first_new_translation;
            }
            this.AcceptButton = null;
        }
    }
    private void TranslationsCancelSettingsLabel_Click(object sender, EventArgs e)
    {
        TranslatorsCheckedListBox.Visible = false;
        TranslatorsCheckedListBox.SendToBack();
        TranslationsCancelSettingsLabel.SendToBack();
        TranslationsCancelSettingsLabel.Visible = false;

        if (File.Exists(Globals.IMAGES_FOLDER + "/" + "settings.png"))
        {
            TranslationsApplySettingsLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "settings.png");
        }
        ToolTip.SetToolTip(TranslationsApplySettingsLabel, "Add/Remove translations");

        // remove any new user checkes 
        PopulateTranslatorsCheckedListBox();

        this.AcceptButton = null;
    }
    private bool m_show_all_translations = true;
    private void AllTranslatorsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_show_all_translations = AllTranslatorsCheckBox.Checked;
        TranslatorsComboBox.Enabled = !m_show_all_translations;
        TranslatorComboBox_SelectedIndexChanged(null, null);
        ApplyTranslationFontAndColor();
    }
    private void TranslatorComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (m_selection_mode)
        {
            if (m_client != null)
            {
                List<Verse> verses = null;
                if (m_found_verses_displayed)
                {
                    verses = m_client.FoundVerses;
                }
                else
                {
                    if (m_client.Selection != null)
                    {
                        verses = m_client.Selection.Verses;
                    }
                }

                if (verses != null)
                {
                    DisplayTranslations(verses);
                }
            }
        }
        else
        {
            if ((m_translated_verses != null) && (m_translated_verses.Count > 1))
            {
                DisplayTranslations(m_translated_verses);
            }
            else // single verse
            {
                Verse verse = GetCurrentVerse();
                if (verse != null)
                {
                    DisplayTranslations(verse);
                }
            }
        }
    }
    private bool m_translation_readonly = true;
    private void EditSaveTranslationLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            m_translation_readonly = !m_translation_readonly;
            UpdateTranslationReadOnly();

            if (!m_translation_readonly) // Edit
            {
                if (m_player != null)
                {
                    if (m_player.Playing)
                    {
                        PlayerPlayLabel_Click(null, null); // pause
                    }
                }
            }
            else // Save
            {
                SaveTranslation();
                if (m_player != null)
                {
                    if (m_player.Paused)
                    {
                        PlayerPlayLabel_Click(null, null); // resume
                    }
                }
            }
        }
        finally
        {
            Thread.Sleep(100);
            this.Cursor = Cursors.Default;
        }
    }
    private void UpdateTranslationReadOnly()
    {
        TranslationTextBox.ReadOnly = m_translation_readonly;
        TranslationTextBox.BackColor = m_translation_readonly ? Color.LightGray : SystemColors.Window;

        if (m_translation_readonly)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "text_unlocked.png"))
            {
                EditSaveTranslationLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "text_unlocked.png");
            }
            ToolTip.SetToolTip(EditSaveTranslationLabel, "Edit translation");
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "save.png"))
            {
                EditSaveTranslationLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "save.png");
            }
            ToolTip.SetToolTip(EditSaveTranslationLabel, "Save translation");
        }
        EditSaveTranslationLabel.Refresh();
    }
    private void TranslationTextBox_KeyPress(object sender, KeyPressEventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (ModifierKeys == Keys.Control)
            {
                if (e.KeyChar == 19) // Ctrl+S == 19 
                {
                    if (!m_translation_readonly)
                    {
                        SaveTranslation();
                        if (m_player != null)
                        {
                            if (m_player.Paused)
                            {
                                PlayerPlayLabel_Click(null, null); // resume
                            }
                        }

                        e.Handled = true; // stop annoying beep for no default button defined
                    }
                }
            }
        }
        finally
        {
            Thread.Sleep(100);
            this.Cursor = Cursors.Default;
        }
    }
    private void SaveTranslation()
    {
        Verse verse = GetCurrentVerse();
        if (verse != null)
        {
            if (m_client != null)
            {
                string translation = Client.DEFAULT_TRANSLATION;
                if (TranslatorComboBox.SelectedItem != null)
                {
                    translation = m_client.GetTranslationKey(TranslatorComboBox.SelectedItem.ToString());
                }

                int index = TranslationTextBox.Text.IndexOf(VERSE_ADDRESS_TRANSLATION_SEPARATOR);
                verse.Translations[translation] = TranslationTextBox.Text.Substring(index + 1);

                m_client.SaveTranslation(translation);

                DisplayTranslations(verse);
            }
        }
    }
    private int DownloadTranslations()
    {
        int index_of_first_new_transaltion = -1;

        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                m_selected_translations.Clear();
                if (m_client.Book.TranslationInfos != null)
                {
                    try
                    {
                        foreach (string key in m_client.Book.TranslationInfos.Keys)
                        {
                            if (
                                (key == Client.DEFAULT_EMLAAEI_TEXT) ||
                                (key == Client.DEFAULT_TRANSLATION) ||
                                (key == Client.DEFAULT_OLD_TRANSLATION) ||
                                (key == Client.DEFAULT_TRANSLITERATION) ||
                                (key == Client.DEFAULT_WORD_MEANINGS) ||
                                (key == Client.DEFAULT_TRANSLATION_1) ||
                                (key == Client.DEFAULT_TRANSLATION_2) ||
                                (key == Client.DEFAULT_TRANSLATION_3) ||
                                (key == Client.DEFAULT_TRANSLATION_4) ||
                                (key == Client.DEFAULT_TRANSLATION_5) ||
                                (key == Client.DEFAULT_TRANSLATION_6) ||
                                (key == Client.DEFAULT_TRANSLATION_7)
                               )
                            {
                                m_selected_translations.Add(key);
                            }
                            else
                            {
                                foreach (int index in TranslatorsCheckedListBox.CheckedIndices)
                                {
                                    if (m_client.Book.TranslationInfos[key].Name == TranslatorsCheckedListBox.Items[index].ToString())
                                    {
                                        m_selected_translations.Add(key);
                                        break;
                                    }
                                }
                            }
                        }

                        ProgressBar.Minimum = 0;
                        ProgressBar.Maximum = m_selected_translations.Count;
                        ProgressBar.Value = 0;
                        ProgressBar.Refresh();

                        string[] keys = new string[m_client.Book.TranslationInfos.Keys.Count];
                        m_client.Book.TranslationInfos.Keys.CopyTo(keys, 0);
                        foreach (string key in keys)
                        {
                            if (m_selected_translations.Contains(key))
                            {
                                ProgressBar.Value++;
                                ProgressBar.Refresh();
                                string translations_path = Globals.TRANSLATIONS_FOLDER + "/" + key + ".txt";
                                string offline_path = Globals.TRANSLATIONS_OFFLINE_FOLDER + "/" + key + ".txt";

                                // delete file in translations_path if invalid
                                if (File.Exists(translations_path))
                                {
                                    long filesize = (new FileInfo(translations_path)).Length;
                                    if (filesize < 1024) // < 1kb invalid file
                                    {
                                        File.Delete(translations_path);
                                    }
                                }

                                // delete file in offline_path if invalid
                                if (File.Exists(offline_path))
                                {
                                    long filesize = (new FileInfo(offline_path)).Length;
                                    if (filesize < 1024) // < 1kb invalid file
                                    {
                                        File.Delete(offline_path);
                                    }
                                }

                                if (!File.Exists(translations_path))
                                {
                                    // download file to offline_path
                                    if (!File.Exists(offline_path))
                                    {
                                        DownloadFile(TranslationInfo.UrlPrefix + m_client.Book.TranslationInfos[key].Url, offline_path);
                                    }

                                    // copy to translations_path
                                    if (File.Exists(offline_path))
                                    {
                                        long filesize = (new FileInfo(offline_path)).Length;
                                        if (filesize < 1024) // < 1kb invalid file
                                        {
                                            File.Delete(offline_path);
                                            m_client.UnloadTranslation(key);
                                        }
                                        else // copy valid file
                                        {
                                            File.Copy(offline_path, translations_path);
                                            m_client.LoadTranslation(key);
                                        }
                                    }

                                    // get index of first new translation
                                    if (index_of_first_new_transaltion == -1)
                                    {
                                        int index_of_new_transaltion = -1;
                                        foreach (int index in TranslatorsCheckedListBox.CheckedIndices)
                                        {
                                            index_of_new_transaltion++;
                                            if (m_client.Book.TranslationInfos[key].Name == TranslatorsCheckedListBox.Items[index].ToString())
                                            {
                                                index_of_first_new_transaltion = index_of_new_transaltion;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                            else // unload translation
                            {
                                if (File.Exists(Globals.TRANSLATIONS_FOLDER + "/" + key + ".txt"))
                                {
                                    m_client.UnloadTranslation(key);
                                    File.Delete(Globals.TRANSLATIONS_FOLDER + "/" + key + ".txt");
                                }
                            }

                            Application.DoEvents();
                        }
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show(ex.Message, Application.ProductName);
                    }
                    finally
                    {
                        PopulateTranslatorsCheckedListBox();
                        PopulateTranslatorComboBox();
                        PopulateTranslatorsComboBox();

                        if (m_client.Selection != null)
                        {
                            List<Verse> verses = m_client.Selection.Verses;
                            if (verses.Count > 0)
                            {
                                ProgressBar.Minimum = 1;
                                ProgressBar.Maximum = m_client.Book.Verses.Count;
                                ProgressBar.Value = verses[0].Number;
                                ProgressBar.Refresh();
                            }
                        }
                    }
                }
            }
        }

        return index_of_first_new_transaltion;
    }
    private List<Verse> m_translated_verses = new List<Verse>();
    private void DisplayTranslations(List<Verse> verses)
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            if (
                (TabControl.SelectedTab == TranslationTabPage) ||
                (TabControl.SelectedTab == GrammarTabPage) ||
                (TabControl.SelectedTab == VerbFormsTabPage) ||
                (TabControl.SelectedTab == RelatedWordsTabPage)
               )
            {
                if (verses != null)
                {
                    if (verses.Count > 0)
                    {
                        if (verses.Count == 1)
                        {
                            DisplayTranslations(verses[0]);
                        }
                        else
                        {
                            StringBuilder str = new StringBuilder();
                            if (TranslatorComboBox.SelectedItem != null)
                            {
                                if (m_client != null)
                                {
                                    string name = TranslatorComboBox.SelectedItem.ToString();
                                    string key = m_client.GetTranslationKey(name);
                                    if (key != null)
                                    {
                                        foreach (Verse verse in verses)
                                        {
                                            if (verse.Translations.ContainsKey(key))
                                            {
                                                str.AppendLine(verse.PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verse.Translations[key]);
                                            }
                                        }
                                        if (str.Length > 2)
                                        {
                                            str.Remove(str.Length - 2, 2);
                                        }
                                    }
                                }
                            }
                            TranslationTextBox.WordWrap = false;
                            TranslationTextBox.Text = str.ToString();
                            TranslationTextBox.Refresh();

                            StringBuilder strs = new StringBuilder();
                            if (m_show_all_translations)
                            {
                                if (m_selected_translations.Count > 0)
                                {
                                    foreach (string key in m_selected_translations)
                                    {
                                        if (verses[0].Translations.ContainsKey(key))
                                        {
                                            //strs.AppendLine("[" + key.Pad(13) + "]\t" + verses[0].PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verses[0].Translations[key]);
                                            strs.AppendLine(verses[0].PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verses[0].Translations[key]);
                                        }
                                    }
                                    if (strs.Length > 2)
                                    {
                                        strs.Remove(strs.Length - 2, 2);
                                    }
                                }

                                TranslationsTextBox.WordWrap = false;
                                TranslationsTextBox.Text = strs.ToString();
                                TranslationsTextBox.Refresh();
                            }
                            else
                            {
                                if (TranslatorsComboBox.SelectedItem != null)
                                {
                                    if (m_client != null)
                                    {
                                        string name = TranslatorsComboBox.SelectedItem.ToString();
                                        string key = m_client.GetTranslationKey(name);
                                        if (key != null)
                                        {
                                            foreach (Verse verse in verses)
                                            {
                                                if (verse.Translations.ContainsKey(key))
                                                {
                                                    strs.AppendLine(verse.PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verse.Translations[key]);
                                                }
                                            }
                                            if (strs.Length > 2)
                                            {
                                                strs.Remove(strs.Length - 2, 2);
                                            }
                                        }
                                    }
                                }
                                TranslationsTextBox.WordWrap = true;
                                TranslationsTextBox.Text = strs.ToString();
                                TranslationsTextBox.Refresh();
                            }

                            if (m_translated_verses != verses)
                            {
                                if (m_translated_verses != null)
                                {
                                    m_translated_verses.Clear();
                                    m_translated_verses.AddRange(verses);
                                }
                            }

                            m_translation_readonly = true;
                            UpdateTranslationReadOnly();
                            EditSaveTranslationLabel.Enabled = (verses.Count == 1);
                        }
                    }
                    else // no verse is selected
                    {
                        TranslationTextBox.WordWrap = false;
                        TranslationTextBox.Text = null;
                        TranslationTextBox.Refresh();

                        TranslationsTextBox.WordWrap = false;
                        TranslationsTextBox.Text = null;
                        TranslationsTextBox.Refresh();

                        m_translation_readonly = true;
                        UpdateTranslationReadOnly();
                        EditSaveTranslationLabel.Enabled = false;
                    }
                }
            }
        }
    }
    private void DisplayTranslations(Verse verse)
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            if (
                (TabControl.SelectedTab == TranslationTabPage) ||
                (TabControl.SelectedTab == GrammarTabPage) ||
                (TabControl.SelectedTab == VerbFormsTabPage) ||
                (TabControl.SelectedTab == RelatedWordsTabPage)
               )
            {
                if (verse != null)
                {
                    StringBuilder str = new StringBuilder();
                    if (TranslatorComboBox.SelectedItem != null)
                    {
                        if (m_client != null)
                        {
                            string name = TranslatorComboBox.SelectedItem.ToString();
                            string key = m_client.GetTranslationKey(name);
                            if (key != null)
                            {
                                if (verse.Translations.ContainsKey(key))
                                {
                                    str.Append(verse.PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verse.Translations[key]);
                                }
                            }
                        }
                    }
                    TranslationTextBox.WordWrap = true;
                    TranslationTextBox.Text = str.ToString();
                    TranslationTextBox.Refresh();

                    StringBuilder strs = new StringBuilder();
                    if (m_show_all_translations)
                    {
                        if (m_selected_translations.Count > 0)
                        {
                            foreach (string key in m_selected_translations)
                            {
                                if (verse.Translations.ContainsKey(key))
                                {
                                    //strs.AppendLine("[" + key.Pad(13) + "]\t" + verse.PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verse.Translations[key]);
                                    strs.AppendLine(verse.PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verse.Translations[key]);
                                }
                            }
                            if (strs.Length > 2)
                            {
                                strs.Remove(strs.Length - 2, 2);
                            }
                        }
                        TranslationsTextBox.WordWrap = false;
                        TranslationsTextBox.Text = strs.ToString();
                        TranslationsTextBox.Refresh();
                    }
                    else
                    {
                        if (TranslatorsComboBox.SelectedItem != null)
                        {
                            if (m_client != null)
                            {
                                string name = TranslatorsComboBox.SelectedItem.ToString();
                                string key = m_client.GetTranslationKey(name);
                                if (key != null)
                                {
                                    if (verse.Translations.ContainsKey(key))
                                    {
                                        strs.Append(verse.PaddedAddress + VERSE_ADDRESS_TRANSLATION_SEPARATOR + verse.Translations[key]);
                                    }
                                }
                            }
                        }
                        TranslationsTextBox.WordWrap = true;
                        TranslationsTextBox.Text = strs.ToString();
                        TranslationsTextBox.Refresh();
                    }

                    if (m_translated_verses != null)
                    {
                        m_translated_verses.Clear();
                        m_translated_verses.Add(verse);
                    }

                    m_translation_readonly = true;
                    UpdateTranslationReadOnly();
                    EditSaveTranslationLabel.Enabled = true;
                }
            }
        }
    }
    // tafseer
    private string m_tafseer = null;
    private List<Verse> m_tafseer_verses = new List<Verse>();
    private void PopulateTafseerComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) TafseerComboBox.SelectedIndexChanged -= new EventHandler(TafseerComboBox_SelectedIndexChanged);
            TafseerComboBox.BeginUpdate();

            if (TafseerComboBox.Items.Count == 0)
            {
                string[] folders = Directory.GetDirectories(Globals.TAFSEERS_FOLDER, "*.*", SearchOption.TopDirectoryOnly);
                if (folders.Length > 0)
                {
                    TafseerComboBox.Items.Clear();
                    foreach (string folder in folders)
                    {
                        string language_folder = Path.GetFileNameWithoutExtension(folder);
                        string[] sub_folders = Directory.GetDirectories(folder, "*.*", SearchOption.TopDirectoryOnly);
                        if (sub_folders.Length > 0)
                        {
                            foreach (string sub_folder in sub_folders)
                            {
                                string tafseer_folder = Path.GetFileNameWithoutExtension(sub_folder);
                                TafseerComboBox.Items.Add(language_folder + " - " + tafseer_folder);
                            }
                        }
                    }
                }
            }
        }
        catch
        {
            TafseerComboBox.SelectedIndex = -1;
        }
        finally
        {
            TafseerComboBox.EndUpdate();
            TafseerComboBox.SelectedIndexChanged += new EventHandler(TafseerComboBox_SelectedIndexChanged);

            // trigger TafseerComboBox_SelectedIndexChanged
            if (TafseerComboBox.Items.Count > 0)
            {
                TafseerComboBox.SelectedIndex = 0;
            }
        }
    }
    private void TafseerComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (TafseerComboBox.SelectedIndex != -1)
        {
            m_tafseer = TafseerComboBox.SelectedItem.ToString();

            if (m_tafseer_verses != null)
            {
                if (m_tafseer_verses.Count == 1)
                {
                    Verse verse = m_tafseer_verses[0];
                    DisplayTafseer(verse);
                }
                else if (m_tafseer_verses.Count > 1)
                {
                    List<Verse> verses = new List<Verse>(m_tafseer_verses);
                    DisplayTafseer(verses);
                }
                else // not set yet
                {
                    Verse verse = GetCurrentVerse();
                    if (verse != null)
                    {
                        DisplayTafseer(verse);
                    }
                }
            }
        }
    }
    private void DisplayTafseer(Verse verse)
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            if (TabControl.SelectedTab == TafseerTabPage)
            {
                if (verse != null)
                {
                    if (m_tafseer_verses != null)
                    {
                        string tafseers_folder = Application.StartupPath + "/" + Globals.TAFSEERS_FOLDER;
                        string filename = (verse.Chapter.Number.ToString("000") + verse.NumberInChapter.ToString("000") + ".htm");
                        string tafseer_langauge = m_tafseer.Substring(0, m_tafseer.IndexOf(" - "));
                        string tafseer_folder = m_tafseer.Substring(m_tafseer.IndexOf(" - ") + 3);
                        string path = tafseers_folder + "/" + tafseer_langauge + "/" + tafseer_folder + "/" + filename;
                        if (!File.Exists(path))
                        {
                            try
                            {
                                string download_folder = tafseers_folder + "/" + tafseer_langauge + "/" + tafseer_folder;

                                // should use metadata.txt later
                                string zip_remote_folder = "";
                                string zip_filename = "";
                                switch (tafseer_langauge)
                                {
                                    case "Arabic":
                                        {
                                        }
                                        break;
                                    case "English":
                                        {
                                            switch (tafseer_folder)
                                            {
                                                case "Ibn Katheer":
                                                    zip_remote_folder = "http://ia902705.us.archive.org/22/items/IbnKatheer_201412";
                                                    zip_filename = "IbnKatheer.zip";
                                                    break;
                                                case "Maududi":
                                                    zip_remote_folder = "http://ia802703.us.archive.org/6/items/Maududi_201412";
                                                    zip_filename = "Maududi.zip";
                                                    break;
                                                case "Al-Tustari":
                                                    zip_remote_folder = "http://ia902702.us.archive.org/28/items/AlTustari";
                                                    zip_filename = "Al-Tustari.zip";
                                                    break;
                                                default:
                                                    // do nothing so "404.htm" is already diaplayed
                                                    break;
                                            }
                                        }
                                        break;
                                    default:
                                        // do nothing so "404.htm" is already diaplayed
                                        break;
                                }

                                DownloadFile(zip_remote_folder + "/" + zip_filename, download_folder + "/" + zip_filename);
                                string zip_filepath = download_folder + "/" + zip_filename;
                                if (File.Exists(zip_filepath))
                                {
                                    ZipFile zip_file = ZipFile.Open(zip_filepath, FileAccess.Read);
                                    List<ZipFile.Entry> zip_entries = zip_file.GetEntries();
                                    foreach (ZipFile.Entry entry in zip_entries)
                                    {
                                        zip_file.ExtractFile(entry, download_folder + "/" + entry.FileName);
                                    }
                                    zip_file.Close();
                                }
                            }
                            catch
                            {
                                path = tafseers_folder + "/" + "404.htm";
                            }
                        }

                        if (File.Exists(path))
                        {
                            TafseerWebBrowser.Url = new Uri(path);

                            m_tafseer_verses.Clear();
                            m_tafseer_verses.Add(verse);
                        }
                        else
                        {
                            TafseerWebBrowser.Url = null;
                        }
                    }
                }
            }
        }
    }
    private void DisplayTafseer(List<Verse> verses)
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            if (TabControl.SelectedTab == TafseerTabPage)
            {
                if (verses != null)
                {
                    if (verses.Count > 0)
                    {
                        if (m_client != null)
                        {
                            if (m_client.Book != null)
                            {
                                List<Chapter> chapters = m_client.Book.GetChapters(verses);
                                if (chapters != null)
                                {
                                    if (chapters.Count > 0)
                                    {
                                        if (m_tafseer_verses != null)
                                        {
                                            string tafseers_folder = Application.StartupPath + "/" + Globals.TAFSEERS_FOLDER;
                                            string filename = (chapters[0].Number.ToString("000") + "000" + ".htm");
                                            string tafseer_langauge = m_tafseer.Substring(0, m_tafseer.IndexOf(" - "));
                                            string tafseer_folder = m_tafseer.Substring(m_tafseer.IndexOf(" - ") + 3);
                                            string path = tafseers_folder + "/" + tafseer_langauge + "/" + tafseer_folder + "/" + filename;
                                            if (!File.Exists(path))
                                            {
                                                try
                                                {
                                                    string download_folder = tafseers_folder + "/" + tafseer_langauge + "/" + tafseer_folder;
                                                    string zip_filename = "XXXXXX.zip";
                                                    DownloadFile("http://archive.org/" + zip_filename, download_folder + "/" + zip_filename);
                                                    string zip_filepath = download_folder + "/" + zip_filename;
                                                    if (File.Exists(zip_filepath))
                                                    {
                                                        ZipFile zip_file = ZipFile.Open(zip_filepath, FileAccess.Read);
                                                        List<ZipFile.Entry> zip_entries = zip_file.GetEntries();
                                                        foreach (ZipFile.Entry entry in zip_entries)
                                                        {
                                                            zip_file.ExtractFile(entry, download_folder + "/" + entry.FileName);
                                                        }
                                                        zip_file.Close();
                                                    }
                                                }
                                                catch
                                                {
                                                    path = tafseers_folder + "/" + "404.htm";
                                                }
                                            }

                                            if (File.Exists(path))
                                            {
                                                TafseerWebBrowser.Url = new Uri(path);

                                                m_tafseer_verses.Clear();
                                                m_tafseer_verses.AddRange(verses);
                                            }
                                            else
                                            {
                                                TafseerWebBrowser.Url = null;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        DisplayTafseer(verses[0]);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Grammar/RelatedWords
    ///////////////////////////////////////////////////////////////////////////////
    private Word m_clicked_word = null;
    private Word m_info_word = null;
    private string GetWordSummary(Word word)
    {
        return
            word.Transliteration + SPACE_GAP +
            word.Text + SPACE_GAP +
            word.Meaning;
    }
    private string GetWordInformation(Word word)
    {
        if (word != null)
        {
            StringBuilder roots = new StringBuilder();
            if (word.Roots != null)
            {
                if (word.Roots.Count > 0)
                {
                    foreach (string root in word.Roots)
                    {
                        roots.Append(root + " | ");
                    }
                    roots.Remove(roots.Length - 3, 3);
                }
            }

            return
                word.Verse.Chapter.SortedNumber + ". " + word.Verse.Chapter.Name + SPACE_GAP +
                "verse  " + word.Verse.NumberInChapter + "-" + word.Verse.Number + SPACE_GAP +
                "word  " + word.NumberInVerse + "-" + word.NumberInChapter + "-" + word.Number + SPACE_GAP +
                "occurrence " + word.Occurrence.ToString() + "/" + word.Frequency.ToString() + SPACE_GAP + SPACE_GAP +
                "roots  " + roots;
        }
        return null;
    }
    private string GetWordGrammar(Word word)
    {
        if (word != null)
        {
            string grammar_info = "";
            if ((Globals.EDITION == Edition.Grammar) || (Globals.EDITION == Edition.Ultimate))
            {
                //if (word.Lemma != null)
                //{
                //    grammar_info += "Lemma\t" + word.Lemma + "\t";
                //}
                //if (word.Root != null)
                //{
                //    grammar_info += "Root\t" + word.Root + "\t";
                //}
                //if (word.SpecialGroup != null)
                //{
                //    grammar_info += "Special Group\t" + word.SpecialGroup + "\t";
                //}
                //if (grammar_info.Length > 0)
                //{
                //    grammar_info += "\r\n";
                //}

                grammar_info += word.ArabicGrammar;
                grammar_info += "\r\n";
                grammar_info += word.EnglishGrammar;
            }

            return grammar_info;
        }
        return null;
    }
    private string GetWordRelatedWords(Word word)
    {
        if (word != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    string related_words_lines = null;
                    int words_per_line = 0;
                    int max_words_per_line = 10;
                    List<Word> related_words = m_client.Book.GetRelatedWords(word);
                    related_words = related_words.RemoveDuplicates();
                    if (related_words != null)
                    {
                        StringBuilder str = new StringBuilder();
                        if (related_words.Count > 0)
                        {
                            foreach (Word related_word in related_words)
                            {
                                words_per_line++;
                                str.Append(related_word.Text + (((words_per_line % max_words_per_line) == 0) ? "\r\n" : "\t"));
                            }
                            if (str.Length > 1)
                            {
                                str.Remove(str.Length - 1, 1); // \t
                            }
                            str.AppendLine();
                            str.AppendLine("Count = " + related_words.Count.ToString());

                            related_words_lines = str.ToString();
                        }
                    }
                    return related_words_lines;
                }
            }
        }
        return null;
    }
    private void DisplayRelatedWords(Word word)
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            if (word != null)
            {
                if (
                    (TabControl.SelectedTab == TranslationTabPage) ||
                    (TabControl.SelectedTab == GrammarTabPage) ||
                    (TabControl.SelectedTab == VerbFormsTabPage) ||
                    (TabControl.SelectedTab == RelatedWordsTabPage)
                   )
                {
                    RelatedWordsTextBox.Text = GetWordRelatedWords(m_clicked_word);
                    RelatedWordsTextBox.Refresh();

                    m_info_word = word;
                }
            }
        }
    }
    private void DisplayWordGrammar(Word word)
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            if (word != null)
            {
                if (
                    (TabControl.SelectedTab == TranslationTabPage) ||
                    (TabControl.SelectedTab == GrammarTabPage) ||
                    (TabControl.SelectedTab == VerbFormsTabPage) ||
                    (TabControl.SelectedTab == RelatedWordsTabPage)
                   )
                {
                    if ((Globals.EDITION == Edition.Grammar) || (Globals.EDITION == Edition.Ultimate))
                    {
                        string word_grammar = GetWordGrammar(m_clicked_word);
                        if (!String.IsNullOrEmpty(word_grammar))
                        {
                            GrammarTextBox.Text = word_grammar;
                        }
                        else
                        {
                            GrammarTextBox.Text = "";
                        }
                        GrammarTextBox.Refresh();

                        m_info_word = word;
                    }
                }
            }
        }
    }
    private Word m_verb_forms_word = null;
    private void DisplayVerbForms(Word word)
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            if (word != null)
            {
                if (m_client != null)
                {
                    if (m_client.Book != null)
                    {
                        if (
                            (TabControl.SelectedTab == TranslationTabPage) ||
                            (TabControl.SelectedTab == GrammarTabPage) ||
                            (TabControl.SelectedTab == VerbFormsTabPage) ||
                            (TabControl.SelectedTab == RelatedWordsTabPage)
                           )
                        {
                            string verb = word.BestRoot;
                            if (verb != null)
                            {
                                StringBuilder str = new StringBuilder();
                                if (verb.Length == 3)
                                {
                                    char Faa = verb[0];
                                    char Ain = verb[1];
                                    char Laam = verb[2];

                                    string form1_perfect = Faa + "َ" + Ain + "َ" + Laam + "َ";
                                    string form1_imperfect = "يَ" + Faa + "ْ" + Ain + "َ" + Laam + "ُ";
                                    string form1_active_participle = Faa + "َ" + Ain + "ِ" + Laam + "ٌ";
                                    string form1_passive_participle = "مَ" + Faa + "ْ" + Ain + "ُ" + Laam + "ٌ";
                                    string form1_verbal_noun = Faa + "ِ" + Ain + "َ" + Laam + "ٌ";

                                    string form2_perfect = Faa + "َ" + Ain + "َّ" + Laam + "َ";
                                    string form2_imperfect = "يُ" + Faa + "َ" + Ain + "ِّ" + Laam + "ُ";
                                    string form2_active_participle = "مُ" + Faa + "َ" + Ain + "ِّ" + Laam + "ٌ";
                                    string form2_passive_participle = "مُ" + Faa + "َ" + Ain + "َّ" + Laam + "ٌ";
                                    string form2_verbal_noun = "تَ" + Faa + "ْ" + Ain + "ِ" + "ي" + Laam + "ٌ";

                                    string form3_perfect = Faa + "َ" + "ا" + Ain + "َ" + Laam + "َ";
                                    string form3_imperfect = "يُ" + Faa + "َ" + "ا" + Ain + "ِ" + Laam + "ُ";
                                    string form3_active_participle = "مُ" + Faa + "" + "ا" + Ain + "ِ" + Laam + "ٌ";
                                    string form3_passive_participle = "مُ" + Faa + "" + "ا" + Ain + "َ" + Laam + "ٌ";
                                    string form3_verbal_noun = "مُ" + Faa + "" + "ا" + Ain + "َ" + Laam + "َ" + "ة" + " / " + Faa + "ِ" + Ain + "" + "ا" + Laam + "ٌ";

                                    string form4_perfect = "اَ" + Faa + "ْ" + Ain + "َ" + Laam + "َ";
                                    string form4_imperfect = "يُ" + Faa + "ْ" + Ain + "ِ" + Laam + "ُ";
                                    string form4_active_participle = "مُ" + Faa + "ْ" + Ain + "ِ" + Laam + "ٌ";
                                    string form4_passive_participle = "مُ" + Faa + "ْ" + Ain + "َ" + Laam + "ٌ";
                                    string form4_verbal_noun = "اِ" + Faa + "ْ" + Ain + "َ" + Laam + "ٌ";

                                    string form5_perfect = "تَ" + Faa + "َ" + Ain + "َّ" + Laam + "َ";
                                    string form5_imperfect = "يَتَ" + Faa + "َ" + Ain + "ِّ" + Laam + "ُ";
                                    string form5_active_participle = "مُتَ" + Faa + "َ" + Ain + "ِّ" + Laam + "ٌ";
                                    string form5_passive_participle = "مُتَ" + Faa + "َ" + Ain + "َّ" + Laam + "ٌ";
                                    string form5_verbal_noun = "تَ" + Faa + "َ" + Ain + "ُّ" + Laam + "ٌ";

                                    string form6_perfect = "تَ" + Faa + "َ" + "ا" + Ain + "َ" + Laam + "َ";
                                    string form6_imperfect = "تَ" + Faa + "َ" + "ا" + Ain + "َ" + Laam + "ٌ";
                                    string form6_active_participle = "مُتَ" + Faa + "َ" + "ا" + Ain + "ِ" + Laam + "ٌ";
                                    string form6_passive_participle = "مُتَ" + Faa + "َ" + "ا" + Ain + "َ" + Laam + "ٌ";
                                    string form6_verbal_noun = "تَ" + Faa + "َ" + "ا" + Ain + "ُ" + Laam + "ٌ";

                                    string form7_perfect = "اِنْ" + Faa + "َ" + Ain + "َ" + Laam + "َ";
                                    string form7_imperfect = "يَنْ" + Faa + "َ" + Ain + "ِ" + Laam + "ُ";
                                    string form7_active_participle = "مُنْ" + Faa + "َ" + Ain + "ِ" + Laam + "ٌ";
                                    string form7_passive_participle = "مُنْ" + Faa + "َ" + Ain + "َ" + Laam + "ٌ";
                                    string form7_verbal_noun = "اِنْ" + Faa + "ِ" + Ain + "" + "ا" + Laam + "ٌ";

                                    string form8_perfect = "إِ" + Faa + "ْ" + "تَ" + Ain + "َ" + Laam + "َ";
                                    string form8_imperfect = "يَ" + Faa + "ْ" + "تَ" + Ain + "ِ" + Laam + "ُ";
                                    string form8_active_participle = "مُ" + Faa + "ْ" + "تَ" + Ain + "ِ" + Laam + "ٌ";
                                    string form8_passive_participle = "مُ" + Faa + "ْ" + "تَ" + Ain + "َ" + Laam + "ٌ";
                                    string form8_verbal_noun = "إ" + Faa + "ْ" + "تِ" + Ain + "َ" + Laam + "ٌ";

                                    string form9_perfect = "إِ" + Faa + "ْ" + Ain + "َ" + Laam + "َّ";
                                    string form9_imperfect = "يَ" + Faa + "ْ" + Ain + "َ" + Laam + "ُّ";
                                    string form9_active_participle = "مُ" + Faa + "ْ" + Ain + "َ" + Laam + "ٌّ";
                                    string form9_passive_participle = "";
                                    string form9_verbal_noun = "إِ" + Faa + "ْ" + Ain + "ِ" + Laam + "ا" + Laam + "ٌ";

                                    string form10_perfect = "إِسْتَ" + Faa + "ْ" + Ain + "َ" + Laam + "َ";
                                    string form10_imperfect = "يَسْتَ" + Faa + "ْ" + Ain + "ِ" + Laam + "ُ";
                                    string form10_active_participle = "مُسْتَ" + Faa + "ْ" + Ain + "ِ" + Laam + "ٌ";
                                    string form10_passive_participle = "مُسْتَ" + Faa + "ْ" + Ain + "َ" + Laam + "ٌ";
                                    string form10_verbal_noun = "اِسْتِ" + Faa + "ْ" + Ain + "" + "ا" + Laam + "ٌ";

                                    //str.AppendLine("Form" + "\t" + "Perfect" + "\t" + "Imperfect" + "\t" + "ActiveParticiple" + "\t" + "PassiveParticiple" + "\t" + "VerbalNoun");
                                    str.AppendLine("الصيغة" + "\t" + "ماضي" + "\t" + "مضارع" + "\t" + "إسم فاعل" + "\t" + "إسم مفعول" + "\t" + "مصدر");
                                    str.AppendLine("I\t" + form1_perfect + "\t" + form1_imperfect + "\t" + form1_active_participle + "\t" + form1_passive_participle + "\t" + form1_verbal_noun);
                                    str.AppendLine("II\t" + form2_perfect + "\t" + form2_imperfect + "\t" + form2_active_participle + "\t" + form2_passive_participle + "\t" + form2_verbal_noun);
                                    str.AppendLine("III\t" + form3_perfect + "\t" + form3_imperfect + "\t" + form3_active_participle + "\t" + form3_passive_participle + "\t" + form3_verbal_noun);
                                    str.AppendLine("IV\t" + form4_perfect + "\t" + form4_imperfect + "\t" + form4_active_participle + "\t" + form4_passive_participle + "\t" + form4_verbal_noun);
                                    str.AppendLine("V\t" + form5_perfect + "\t" + form5_imperfect + "\t" + form5_active_participle + "\t" + form5_passive_participle + "\t" + form5_verbal_noun);
                                    str.AppendLine("VI\t" + form6_perfect + "\t" + form6_imperfect + "\t" + form6_active_participle + "\t" + form6_passive_participle + "\t" + form6_verbal_noun);
                                    str.AppendLine("VII\t" + form7_perfect + "\t" + form7_imperfect + "\t" + form7_active_participle + "\t" + form7_passive_participle + "\t" + form7_verbal_noun);
                                    str.AppendLine("VIII\t" + form8_perfect + "\t" + form8_imperfect + "\t" + form8_active_participle + "\t" + form8_passive_participle + "\t" + form8_verbal_noun);
                                    str.AppendLine("IX\t" + form9_perfect + "\t" + form9_imperfect + "\t" + form9_active_participle + "\t" + form9_passive_participle + "\t" + form9_verbal_noun);
                                    str.Append("X\t" + form10_perfect + "\t" + form10_imperfect + "\t" + form10_active_participle + "\t" + form10_passive_participle + "\t" + form10_verbal_noun);
                                }

                                VerbFormsTextBox.Text = str.ToString();
                                VerbFormsTextBox.Refresh();

                                m_verb_forms_word = word;
                            }
                        }
                    }
                }
            }
        }
    }
    private void RelatedWordsTextBox_TextChanged(object sender, EventArgs e)
    {
        RelatedWordsButton.Enabled = (RelatedWordsTextBox.Text.Length > 0);
    }
    private void RelatedWordsButton_Click(object sender, EventArgs e)
    {
        if (m_info_word != null)
        {
            FindRelatedWords(m_info_word);
        }
    }
    private void FindRelatedWords(Word word)
    {
        if (word != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    ClearFindMatches();

                    string text = word.Text;
                    text = RemovePunctuationMarks(text);

                    FindByTextTextBox.Text = text;
                    FindByTextTextBox.Refresh();
                    text = word.BestRoot;
                    FindByRoot(text);
                }
            }
        }
    }
    private void UpdateMouseCursor()
    {
        if (m_active_textbox != null)
        {
            if (ModifierKeys == Keys.Control)
            {
                // stop cursor flicker
                if (m_active_textbox.Cursor != Cursors.Hand)
                {
                    m_active_textbox.Cursor = Cursors.Hand;
                }
            }
            else
            {
                // stop cursor flicker
                if (m_active_textbox.Cursor != Cursors.IBeam)
                {
                    m_active_textbox.Cursor = Cursors.IBeam;
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Symmetry
    ///////////////////////////////////////////////////////////////////////////////
    private enum SymmetryType
    {
        WordLetters,
        VerseWords,
        VerseLetters
    };
    private bool m_symmetry_include_boundary_cases = false;
    private void PopulateSymmetryTypeComboBox()
    {
        SymmetryTypeComboBox.Items.Clear();
        try
        {
            for (int i = 0; i < 3; i++) SymmetryTypeComboBox.SelectedIndexChanged -= new EventHandler(SymmetryTypeComboBox_SelectedIndexChanged);

            SymmetryTypeComboBox.BeginUpdate();
            SymmetryTypeComboBox.Items.Clear();
            foreach (SymmetryType item in Enum.GetValues(typeof(SymmetryType)))
            {
                SymmetryTypeComboBox.Items.Add(item);
            }
            if (SymmetryTypeComboBox.Items.Count > 0)
            {
                SymmetryTypeComboBox.SelectedIndex = 0;
            }
        }
        finally
        {
            SymmetryTypeComboBox.EndUpdate();
            SymmetryTypeComboBox.SelectedIndexChanged += new EventHandler(SymmetryTypeComboBox_SelectedIndexChanged);
        }
    }
    private void SymmetryTypeComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (SymmetryTypeComboBox.SelectedItem != null)
        {
            SymmetryType symmetry_type = (SymmetryType)Enum.Parse(typeof(SymmetryType), SymmetryTypeComboBox.SelectedItem.ToString());
            if (!String.IsNullOrEmpty(m_current_text))
            {
                SymmetryTextBox.Text = BuildSymmetry(symmetry_type, m_current_text);
            }
        }
    }
    private string BuildSymmetry(SymmetryType symmetry_type, string text)
    {
        if (String.IsNullOrEmpty(text)) return null;

        StringBuilder str = new StringBuilder();

        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                if (m_client.Selection != null)
                {
                    text = text.SimplifyTo(m_client.NumerologySystem.TextMode);
                    text = text.Replace("\r", "");
                    text = text.Replace("\t", "");
                    text = text.Replace("_", "");
                    text = text.Replace(Constants.OPEN_BRACKET, "");
                    text = text.Replace(Constants.CLOSE_BRACKET, "");
                    foreach (char character in Constants.INDIAN_DIGITS)
                    {
                        text = text.Replace(character.ToString(), "");
                    }
                    foreach (char character in Constants.QURANMARKS)
                    {
                        text = text.Replace(character.ToString(), "");
                    }
                    foreach (char character in Constants.STOPMARKS)
                    {
                        text = text.Replace(character.ToString(), "");
                    }
                    text = text.Replace("\n ", "\n"); // quran marks
                    text = text.Replace(" \n", "\n"); // sijood marks
                    while (text.Contains("  "))
                    {
                        text = text.Replace("  ", " ");
                    }
                    text = text.Trim();

                    switch (symmetry_type)
                    {
                        case SymmetryType.WordLetters:
                            {
                                str.AppendLine("WORDS\t#\tWords\tLetters\tWSum\tLSum");

                                text = text.Replace("\n", " ");
                                string[] words = text.Split(' ');

                                int count = 0;
                                int w_sum = 0;
                                int l_sum = 0;
                                int max = words.Length - 1;
                                if (m_symmetry_include_boundary_cases)
                                {
                                    // 0, 0
                                    count++;
                                    w_sum += 0;
                                    l_sum += 0;
                                    //             WORDS                            #                         Words        Letters      WSum         LSum
                                    str.AppendLine(words.Length.ToString() + "\t" + count.ToString() + "\t" + "0" + "\t" + "0" + "\t" + "0" + "\t" + "0");

                                    // all words, all letters
                                    max++;
                                }

                                int a = 0;
                                int z = 0;
                                for (int i = 0; i < max; i++)
                                {
                                    int j = words.Length - 1 - i;

                                    a += words[i].Length;
                                    z += words[j].Length;
                                    if (a == z)
                                    {
                                        count++;
                                        w_sum += (i + 1);
                                        l_sum += a;
                                        //             WORDS                            #                         Words                       Letters               WSum                      LSum
                                        str.AppendLine(words.Length.ToString() + "\t" + count.ToString() + "\t" + (i + 1).ToString() + "\t" + a.ToString() + "\t" + w_sum.ToString() + "\t" + l_sum.ToString());
                                    }
                                }

                                str.AppendLine("Symmetry:" + "\t\t" + ((double)((count - (m_symmetry_include_boundary_cases ? 2 : 0)) * 100.0D) / (double)words.Length).ToString("0.000") + "%");
                            }
                            break;
                        case SymmetryType.VerseWords:
                            {
                                str.AppendLine("VERSES\t#\tVerses\tWords\tVSum\tWSum");

                                string[] verses = text.Split('\n');

                                int count = 0;
                                int v_sum = 0;
                                int w_sum = 0;
                                int max = verses.Length - 1;
                                if (m_symmetry_include_boundary_cases)
                                {
                                    // 0, 0
                                    count++;
                                    v_sum += 0;
                                    w_sum += 0;
                                    //             VERSES                            #                         Verses        Words       VSum         WSum
                                    str.AppendLine(verses.Length.ToString() + "\t" + count.ToString() + "\t" + "0" + "\t" + "0" + "\t" + "0" + "\t" + "0");

                                    // all verses, all words
                                    max++;
                                }

                                int a = 0;
                                int z = 0;
                                for (int i = 0; i < max; i++)
                                {
                                    int j = verses.Length - 1 - i;

                                    a += verses[i].Split(' ').Length;
                                    z += verses[j].Split(' ').Length;
                                    if (a == z)
                                    {
                                        count++;
                                        v_sum += (i + 1);
                                        w_sum += a;
                                        //             VERSES                            #                         Verses                      Words                 VSum                      WSum
                                        str.AppendLine(verses.Length.ToString() + "\t" + count.ToString() + "\t" + (i + 1).ToString() + "\t" + a.ToString() + "\t" + v_sum.ToString() + "\t" + w_sum.ToString());
                                    }
                                }

                                str.AppendLine("Symmetry:" + "\t\t" + ((double)((count - (m_symmetry_include_boundary_cases ? 2 : 0)) * 100.0D) / (double)verses.Length).ToString("0.000") + "%");
                            }
                            break;
                        case SymmetryType.VerseLetters:
                            {
                                str.AppendLine("VERSES\t#\tVerses\tLetters\tVSum\tLSum");

                                string[] verses = text.Split('\n');

                                int count = 0;
                                int v_sum = 0;
                                int l_sum = 0;
                                int max = verses.Length - 1;
                                if (m_symmetry_include_boundary_cases)
                                {
                                    // 0, 0
                                    count++;
                                    v_sum += 0;
                                    l_sum += 0;
                                    //             VERSES                            #                         Verses       Letters      VSum         LSum
                                    str.AppendLine(verses.Length.ToString() + "\t" + count.ToString() + "\t" + "0" + "\t" + "0" + "\t" + "0" + "\t" + "0");

                                    // all verses, all letters
                                    max++;
                                }

                                int a = 0;
                                int z = 0;
                                for (int i = 0; i < max; i++)
                                {
                                    int j = verses.Length - 1 - i;

                                    a += verses[i].Replace(" ", "").Length;
                                    z += verses[j].Replace(" ", "").Length;
                                    if (a == z)
                                    {
                                        count++;
                                        v_sum += (i + 1);
                                        l_sum += a;
                                        //             VERSES                            #                         Verses                      Letters               VSum                      LSum
                                        str.AppendLine(verses.Length.ToString() + "\t" + count.ToString() + "\t" + (i + 1).ToString() + "\t" + a.ToString() + "\t" + v_sum.ToString() + "\t" + l_sum.ToString());
                                    }
                                }

                                str.AppendLine("Symmetry:" + "\t\t" + ((double)((count - (m_symmetry_include_boundary_cases ? 2 : 0)) * 100.0D) / (double)verses.Length).ToString("0.000") + "%");
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
        }
        return str.ToString().Trim();
    }
    private void DisplaySymmetry()
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            if (TabControl.SelectedTab == SymmetryTabPage)
            {
                SymmetryTypeComboBox_SelectedIndexChanged(null, null);
            }
        }
    }
    private void SymmetryIncludeBoundaryCasesCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_symmetry_include_boundary_cases = SymmetryIncludeBoundaryCasesCheckBox.Checked;
        SymmetryTypeComboBox_SelectedIndexChanged(null, null);
    }
    private void SymmetryInspectLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                string filename = SymmetryTypeComboBox.SelectedItem.ToString() + "_" + (m_symmetry_include_boundary_cases ? "Boundaries" : "") + "_" + m_client.NumerologySystem.TextMode + "_" + GetSelectionSummary().Replace(" ", "") + "_" + Globals.OUTPUT_FILE_EXT;
                if (Directory.Exists(Globals.STATISTICS_FOLDER))
                {
                    string path = Globals.STATISTICS_FOLDER + "/" + filename;
                    FileHelper.SaveText(path, SymmetryTextBox.Text);
                    FileHelper.DisplayFile(path);
                }
            }
        }
    }
    // all symmetries: CalculateWordSymmetry
    private void ChapterPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Chapter, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void ChapterVerseWordLetterPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Verse, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void PagePositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Page, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void StationPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Station, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void PartPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Part, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void GroupPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Group, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void HalfPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Half, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void QuarterPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Quarter, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void BowingPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Bowing, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void VerseWordLetterPositionLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                m_client.CalculateWordSymmetry(SelectionScope.Book, (ModifierKeys == Keys.Control));
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region C+V Maths
    ///////////////////////////////////////////////////////////////////////////////
    private long m_maths_divisor = DEFAULT_DIVISOR;
    private bool m_maths_update_global_divisor = false;
    private void MathsDivisorNumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        m_maths_divisor = (long)MathsDivisorNumericUpDown.Value;
        UpdateMathsChapterVerseSums();

        if (m_maths_update_global_divisor)
        {
            m_divisor = m_maths_divisor;
            DivisorValueLabel.Text = m_divisor.ToString();
        }
    }
    private void MathsUpdateDivisorCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_maths_update_global_divisor = MathsUpdateDivisorCheckBox.Checked;
        if (m_maths_update_global_divisor)
        {
            m_divisor = m_maths_divisor;
        }
        else
        {
            m_divisor = DEFAULT_DIVISOR;
        }
        DivisorValueLabel.Text = m_divisor.ToString();
    }
    private void MathsInterestingNumbersEditLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            // display the InterestingNumbers.txt file for live editing using ISubscriber
            string filename = Globals.NUMBERS_FOLDER + "/" + "InterestingNumbers.txt";
            if (File.Exists(filename))
            {
                FileHelper.WaitForReady(filename);

                System.Diagnostics.Process.Start("Notepad.exe", filename);
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }

    private List<Verse> m_maths_verses = null;
    private bool m_maths_abs_cminusv = false;
    private bool m_maths_vdividec = false;
    private void MathsChaptersCMinusVSumLabel_Click(object sender, EventArgs e)
    {
        m_maths_abs_cminusv = !m_maths_abs_cminusv;
        MathsChaptersCMinusVSumLabel.Text = m_maths_abs_cminusv ? "|C - V|" : "C -- V";
        UpdateMathsChapterVerseSums();
    }
    private void MathsChaptersCDivideVSumLabel_Click(object sender, EventArgs e)
    {
        m_maths_vdividec = !m_maths_vdividec;
        MathsChaptersCDivideVSumLabel.Text = m_maths_vdividec ? "V ÷ C" : "C ÷ V";
        UpdateMathsChapterVerseSums();
    }
    private void UpdateMathsChapterVerseSums()
    {
        DisplayMathsChapterVerseSums(m_maths_verses);
    }
    private void DisplayMathsChapterVerseSums(List<Verse> verses)
    {
        DisplayMathsChapterSums(verses);
        DisplayMathsChapterSumRatios(verses);

        DisplayMathsVerseSums(verses);
        DisplayMathsVerseSumRatios(verses);
    }
    private void DisplayMathsChapterSums(List<Verse> verses)
    {
        if (TabControl.SelectedTab == MathsTabPage)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (verses != null)
                    {
                        m_maths_verses = verses;

                        List<Chapter> chapters = m_client.Book.GetChapters(m_maths_verses);
                        if (chapters != null)
                        {
                            long C = 0;  // all
                            long oC = 0; // odd
                            long eC = 0; // even
                            long pC = 0; // prime
                            long cC = 0; // composite
                            long V = 0;
                            long oV = 0;
                            long eV = 0;
                            long pV = 0;
                            long cV = 0;
                            long CPlusV = 0;
                            long oCPlusV = 0;
                            long eCPlusV = 0;
                            long pCPlusV = 0;
                            long cCPlusV = 0;
                            long CMinusV = 0;
                            long oCMinusV = 0;
                            long eCMinusV = 0;
                            long pCMinusV = 0;
                            long cCMinusV = 0;
                            long CMultiplyV = 0;
                            long oCMultiplyV = 0;
                            long eCMultiplyV = 0;
                            long pCMultiplyV = 0;
                            long cCMultiplyV = 0;
                            double CDivideV = 0;
                            double oCDivideV = 0;
                            double eCDivideV = 0;
                            double pCDivideV = 0;
                            double cCDivideV = 0;
                            foreach (Chapter chapter in chapters)
                            {
                                long chapter_number = chapter.SortedNumber;
                                long verse_count = chapter.Verses.Count;
                                long cplusv = chapter_number + verse_count;
                                long cminusv = m_maths_abs_cminusv ? Math.Abs(chapter_number - verse_count) : (chapter_number - verse_count);
                                long cmultiplyv = chapter_number * verse_count;
                                double cdividev = m_maths_vdividec ? ((double)verse_count / (double)chapter_number) : ((double)chapter_number / (double)verse_count);

                                C += chapter_number;
                                if (Numbers.IsOdd(chapter_number))
                                {
                                    oC += chapter_number;
                                }
                                else
                                {
                                    eC += chapter_number;
                                }
                                if (Numbers.IsPrime(chapter_number))
                                {
                                    pC += chapter_number;
                                }
                                else if (Numbers.IsComposite(chapter_number))
                                {
                                    cC += chapter_number;
                                }
                                else //if (chapter_number == 1)
                                {
                                }

                                V += verse_count;
                                if (Numbers.IsOdd(verse_count))
                                {
                                    oV += verse_count;
                                }
                                else
                                {
                                    eV += verse_count;
                                }
                                if (Numbers.IsPrime(verse_count))
                                {
                                    pV += verse_count;
                                }
                                else if (Numbers.IsComposite(verse_count))
                                {
                                    cV += verse_count;
                                }
                                else //if (verse_count == 1)
                                {
                                }

                                CPlusV += cplusv;
                                if (Numbers.IsOdd(cplusv))
                                {
                                    oCPlusV += cplusv;
                                }
                                else
                                {
                                    eCPlusV += cplusv;
                                }
                                if (Numbers.IsPrime(cplusv))
                                {
                                    pCPlusV += cplusv;
                                }
                                else if (Numbers.IsComposite(cplusv))
                                {
                                    cCPlusV += cplusv;
                                }
                                else //if (cplusv == 1)
                                {
                                }

                                CMinusV += cminusv;
                                if (Numbers.IsOdd(cminusv))
                                {
                                    oCMinusV += cminusv;
                                }
                                else
                                {
                                    eCMinusV += cminusv;
                                }
                                if (Numbers.IsPrime(cminusv))
                                {
                                    pCMinusV += cminusv;
                                }
                                else if (Numbers.IsComposite(cminusv))
                                {
                                    cCMinusV += cminusv;
                                }
                                else //if (cminusv == 1)
                                {
                                }

                                CMultiplyV += cmultiplyv;
                                if (Numbers.IsOdd(cmultiplyv))
                                {
                                    oCMultiplyV += cmultiplyv;
                                }
                                else
                                {
                                    eCMultiplyV += cmultiplyv;
                                }
                                if (Numbers.IsPrime(cmultiplyv))
                                {
                                    pCMultiplyV += cmultiplyv;
                                }
                                else if (Numbers.IsComposite(cmultiplyv))
                                {
                                    cCMultiplyV += cmultiplyv;
                                }
                                else //if (cmultiplyv == 1)
                                {
                                }

                                CDivideV += cdividev;
                                if (Numbers.IsOdd((long)cdividev))
                                {
                                    oCDivideV += cdividev;
                                }
                                else
                                {
                                    eCDivideV += cdividev;
                                }
                                if (Numbers.IsPrime((long)cdividev))
                                {
                                    pCDivideV += cdividev;
                                }
                                else if (Numbers.IsComposite((long)cdividev))
                                {
                                    cCDivideV += cdividev;
                                }
                                else //if (cdividev == 1)
                                {
                                }
                            }
                            MathsChaptersCSumTextBox.Text = C.ToString();
                            MathsChaptersCOddSumTextBox.Text = oC.ToString();
                            MathsChaptersCEvenSumTextBox.Text = eC.ToString();
                            MathsChaptersCPrimeSumTextBox.Text = pC.ToString();
                            MathsChaptersCCompositeSumTextBox.Text = cC.ToString();
                            MathsChaptersVSumTextBox.Text = V.ToString();
                            MathsChaptersVOddSumTextBox.Text = oV.ToString();
                            MathsChaptersVEvenSumTextBox.Text = eV.ToString();
                            MathsChaptersVPrimeSumTextBox.Text = pV.ToString();
                            MathsChaptersVCompositeSumTextBox.Text = cV.ToString();
                            MathsChaptersCPlusVSumTextBox.Text = CPlusV.ToString();
                            MathsChaptersCPlusVOddSumTextBox.Text = oCPlusV.ToString();
                            MathsChaptersCPlusVEvenSumTextBox.Text = eCPlusV.ToString();
                            MathsChaptersCPlusVPrimeSumTextBox.Text = pCPlusV.ToString();
                            MathsChaptersCPlusVCompositeSumTextBox.Text = cCPlusV.ToString();
                            MathsChaptersCMinusVSumTextBox.Text = CMinusV.ToString();
                            MathsChaptersCMinusVOddSumTextBox.Text = oCMinusV.ToString();
                            MathsChaptersCMinusVEvenSumTextBox.Text = eCMinusV.ToString();
                            MathsChaptersCMinusVPrimeSumTextBox.Text = pCMinusV.ToString();
                            MathsChaptersCMinusVCompositeSumTextBox.Text = cCMinusV.ToString();
                            MathsChaptersCMultiplyVSumTextBox.Text = CMultiplyV.ToString();
                            MathsChaptersCMultiplyVOddSumTextBox.Text = oCMultiplyV.ToString();
                            MathsChaptersCMultiplyVEvenSumTextBox.Text = eCMultiplyV.ToString();
                            MathsChaptersCMultiplyVPrimeSumTextBox.Text = pCMultiplyV.ToString();
                            MathsChaptersCMultiplyVCompositeSumTextBox.Text = cCMultiplyV.ToString();
                            MathsChaptersCDivideVSumTextBox.Text = (CDivideV).ToString("0.0");
                            MathsChaptersCDivideVOddSumTextBox.Text = (oCDivideV).ToString("0.0");
                            MathsChaptersCDivideVEvenSumTextBox.Text = (eCDivideV).ToString("0.0");
                            MathsChaptersCDivideVPrimeSumTextBox.Text = (pCDivideV).ToString("0.0");
                            MathsChaptersCDivideVCompositeSumTextBox.Text = (cCDivideV).ToString("0.0");

                            MathsChaptersCSumTextBox.ForeColor = GetNumberTypeColor(C);
                            MathsChaptersCOddSumTextBox.ForeColor = GetNumberTypeColor(oC);
                            MathsChaptersCEvenSumTextBox.ForeColor = GetNumberTypeColor(eC);
                            MathsChaptersCPrimeSumTextBox.ForeColor = GetNumberTypeColor(pC);
                            MathsChaptersCCompositeSumTextBox.ForeColor = GetNumberTypeColor(cC);
                            MathsChaptersVSumTextBox.ForeColor = GetNumberTypeColor(V);
                            MathsChaptersVOddSumTextBox.ForeColor = GetNumberTypeColor(oV);
                            MathsChaptersVEvenSumTextBox.ForeColor = GetNumberTypeColor(eV);
                            MathsChaptersVPrimeSumTextBox.ForeColor = GetNumberTypeColor(pV);
                            MathsChaptersVCompositeSumTextBox.ForeColor = GetNumberTypeColor(cV);
                            MathsChaptersCPlusVSumTextBox.ForeColor = GetNumberTypeColor(CPlusV);
                            MathsChaptersCPlusVOddSumTextBox.ForeColor = GetNumberTypeColor(oCPlusV);
                            MathsChaptersCPlusVEvenSumTextBox.ForeColor = GetNumberTypeColor(eCPlusV);
                            MathsChaptersCPlusVPrimeSumTextBox.ForeColor = GetNumberTypeColor(pCPlusV);
                            MathsChaptersCPlusVCompositeSumTextBox.ForeColor = GetNumberTypeColor(cCPlusV);
                            MathsChaptersCMinusVSumTextBox.ForeColor = GetNumberTypeColor(CMinusV);
                            MathsChaptersCMinusVOddSumTextBox.ForeColor = GetNumberTypeColor(oCMinusV);
                            MathsChaptersCMinusVEvenSumTextBox.ForeColor = GetNumberTypeColor(eCMinusV);
                            MathsChaptersCMinusVPrimeSumTextBox.ForeColor = GetNumberTypeColor(pCMinusV);
                            MathsChaptersCMinusVCompositeSumTextBox.ForeColor = GetNumberTypeColor(cCMinusV);
                            MathsChaptersCMultiplyVSumTextBox.ForeColor = GetNumberTypeColor(CMultiplyV);
                            MathsChaptersCMultiplyVOddSumTextBox.ForeColor = GetNumberTypeColor(oCMultiplyV);
                            MathsChaptersCMultiplyVEvenSumTextBox.ForeColor = GetNumberTypeColor(eCMultiplyV);
                            MathsChaptersCMultiplyVPrimeSumTextBox.ForeColor = GetNumberTypeColor(pCMultiplyV);
                            MathsChaptersCMultiplyVCompositeSumTextBox.ForeColor = GetNumberTypeColor(cCMultiplyV);
                            MathsChaptersCDivideVSumTextBox.ForeColor = GetNumberTypeColor((long)CDivideV);
                            MathsChaptersCDivideVOddSumTextBox.ForeColor = GetNumberTypeColor((long)oCDivideV);
                            MathsChaptersCDivideVEvenSumTextBox.ForeColor = GetNumberTypeColor((long)eCDivideV);
                            MathsChaptersCDivideVPrimeSumTextBox.ForeColor = GetNumberTypeColor((long)pCDivideV);
                            MathsChaptersCDivideVCompositeSumTextBox.ForeColor = GetNumberTypeColor((long)cCDivideV);

                            MathsChaptersCSumTextBox.BackColor = (Numbers.Compare(C, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCOddSumTextBox.BackColor = (Numbers.Compare(oC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCEvenSumTextBox.BackColor = (Numbers.Compare(eC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCPrimeSumTextBox.BackColor = (Numbers.Compare(pC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCCompositeSumTextBox.BackColor = (Numbers.Compare(cC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersVSumTextBox.BackColor = (Numbers.Compare(V, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersVOddSumTextBox.BackColor = (Numbers.Compare(oV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersVEvenSumTextBox.BackColor = (Numbers.Compare(eV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersVPrimeSumTextBox.BackColor = (Numbers.Compare(pV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersVCompositeSumTextBox.BackColor = (Numbers.Compare(cV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCPlusVSumTextBox.BackColor = (Numbers.Compare(CPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCPlusVOddSumTextBox.BackColor = (Numbers.Compare(oCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCPlusVEvenSumTextBox.BackColor = (Numbers.Compare(eCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCPlusVPrimeSumTextBox.BackColor = (Numbers.Compare(pCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCPlusVCompositeSumTextBox.BackColor = (Numbers.Compare(cCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMinusVSumTextBox.BackColor = (Numbers.Compare(CMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMinusVOddSumTextBox.BackColor = (Numbers.Compare(oCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMinusVEvenSumTextBox.BackColor = (Numbers.Compare(eCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMinusVPrimeSumTextBox.BackColor = (Numbers.Compare(pCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMinusVCompositeSumTextBox.BackColor = (Numbers.Compare(cCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMultiplyVSumTextBox.BackColor = (Numbers.Compare(CMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMultiplyVOddSumTextBox.BackColor = (Numbers.Compare(oCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMultiplyVEvenSumTextBox.BackColor = (Numbers.Compare(eCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMultiplyVPrimeSumTextBox.BackColor = (Numbers.Compare(pCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCMultiplyVCompositeSumTextBox.BackColor = (Numbers.Compare(cCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCDivideVSumTextBox.BackColor = (Numbers.Compare((long)CDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCDivideVOddSumTextBox.BackColor = (Numbers.Compare((long)oCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCDivideVEvenSumTextBox.BackColor = (Numbers.Compare((long)eCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCDivideVPrimeSumTextBox.BackColor = (Numbers.Compare((long)pCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                            MathsChaptersCDivideVCompositeSumTextBox.BackColor = (Numbers.Compare((long)cCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;

                            // Interesting numbers
                            if (C.IsInteresting()) MathsChaptersCSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (oC.IsInteresting()) MathsChaptersCOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (eC.IsInteresting()) MathsChaptersCEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (pC.IsInteresting()) MathsChaptersCPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (cC.IsInteresting()) MathsChaptersCCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (V.IsInteresting()) MathsChaptersVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (oV.IsInteresting()) MathsChaptersVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (eV.IsInteresting()) MathsChaptersVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (pV.IsInteresting()) MathsChaptersVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (cV.IsInteresting()) MathsChaptersVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (CPlusV.IsInteresting()) MathsChaptersCPlusVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (oCPlusV.IsInteresting()) MathsChaptersCPlusVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (eCPlusV.IsInteresting()) MathsChaptersCPlusVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (pCPlusV.IsInteresting()) MathsChaptersCPlusVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (cCPlusV.IsInteresting()) MathsChaptersCPlusVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (CMinusV.IsInteresting()) MathsChaptersCMinusVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (oCMinusV.IsInteresting()) MathsChaptersCMinusVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (eCMinusV.IsInteresting()) MathsChaptersCMinusVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (pCMinusV.IsInteresting()) MathsChaptersCMinusVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (cCMinusV.IsInteresting()) MathsChaptersCMinusVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (CMultiplyV.IsInteresting()) MathsChaptersCMultiplyVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (oCMultiplyV.IsInteresting()) MathsChaptersCMultiplyVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (eCMultiplyV.IsInteresting()) MathsChaptersCMultiplyVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (pCMultiplyV.IsInteresting()) MathsChaptersCMultiplyVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (cCMultiplyV.IsInteresting()) MathsChaptersCMultiplyVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (CDivideV.IsInteresting()) MathsChaptersCDivideVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (oCDivideV.IsInteresting()) MathsChaptersCDivideVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (eCDivideV.IsInteresting()) MathsChaptersCDivideVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (pCDivideV.IsInteresting()) MathsChaptersCDivideVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            if (cCDivideV.IsInteresting()) MathsChaptersCDivideVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                        }
                    }
                }
            }
        }
    }
    private void DisplayMathsChapterSumRatios(List<Verse> verses)
    {
        if (TabControl.SelectedTab == MathsTabPage)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (verses != null)
                    {
                        m_maths_verses = verses;

                        List<Chapter> chapters = m_client.Book.GetChapters(m_maths_verses);
                        if (chapters != null)
                        {
                            Dictionary<long, long> frequencies = new Dictionary<long, long>();
                            if (frequencies != null)
                            {
                                frequencies.Clear();
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = chapter.SortedNumber;
                                    if (frequencies.ContainsKey(n))
                                    {
                                        frequencies[n]++;
                                    }
                                    else
                                    {
                                        frequencies.Add(n, 1);
                                    }
                                }
                                long dC = 0; // duplicate
                                long uC = 0; // unique
                                foreach (long n in frequencies.Keys)
                                {
                                    if (frequencies[n] > 1)
                                    {
                                        dC += n * frequencies[n];
                                    }
                                    else
                                    {
                                        uC += n;
                                    }
                                }
                                double duC = 0.0D; // ratio
                                if (uC != 0) duC = (double)dC / (double)uC;
                                MathsChaptersCDUSumTextBox.Text = duC.ToString("0.00000");
                                MathsChaptersCDUSumTextBox.ForeColor = GetNumberTypeColor((long)duC);
                                if (duC.IsInteresting()) MathsChaptersCDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;

                                ToolTip.SetToolTip(MathsChaptersCDUSumTextBox, dC.ToString() + "/" + uC.ToString());

                                frequencies.Clear();
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = chapter.Verses.Count;
                                    if (frequencies.ContainsKey(n))
                                    {
                                        frequencies[n]++;
                                    }
                                    else
                                    {
                                        frequencies.Add(n, 1);
                                    }
                                }
                                long dV = 0; // duplicate
                                long uV = 0; // unique
                                foreach (long n in frequencies.Keys)
                                {
                                    if (frequencies[n] > 1)
                                    {
                                        dV += n * frequencies[n];
                                    }
                                    else
                                    {
                                        uV += n;
                                    }
                                }
                                double duV = 0.0D; // ratio
                                if (uV != 0) duV = (double)dV / (double)uV;
                                MathsChaptersVDUSumTextBox.Text = duV.ToString("0.00000");
                                MathsChaptersVDUSumTextBox.ForeColor = GetNumberTypeColor((long)duV);
                                if (duV.IsInteresting()) MathsChaptersVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                ToolTip.SetToolTip(MathsChaptersVDUSumTextBox, dV.ToString() + "/" + uV.ToString());

                                frequencies.Clear();
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = chapter.SortedNumber + chapter.Verses.Count;
                                    if (frequencies.ContainsKey(n))
                                    {
                                        frequencies[n]++;
                                    }
                                    else
                                    {
                                        frequencies.Add(n, 1);
                                    }
                                }
                                long dCPlusV = 0; // duplicate
                                long uCPlusV = 0; // unique
                                foreach (long n in frequencies.Keys)
                                {
                                    if (frequencies[n] > 1)
                                    {
                                        dCPlusV += n * frequencies[n];
                                    }
                                    else
                                    {
                                        uCPlusV += n;
                                    }
                                }
                                double duCPlusV = 0.0D; // ratio
                                if (uCPlusV != 0) duCPlusV = (double)dCPlusV / (double)uCPlusV;
                                MathsChaptersCPlusVDUSumTextBox.Text = duCPlusV.ToString("0.00000");
                                MathsChaptersCPlusVDUSumTextBox.ForeColor = GetNumberTypeColor((long)duCPlusV);
                                if (duCPlusV.IsInteresting()) MathsChaptersCPlusVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                ToolTip.SetToolTip(MathsChaptersCPlusVDUSumTextBox, dCPlusV.ToString() + "/" + uCPlusV.ToString());

                                frequencies.Clear();
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = m_maths_abs_cminusv ? Math.Abs(chapter.SortedNumber - chapter.Verses.Count) : (chapter.SortedNumber - chapter.Verses.Count);
                                    if (frequencies.ContainsKey(n))
                                    {
                                        frequencies[n]++;
                                    }
                                    else
                                    {
                                        frequencies.Add(n, 1);
                                    }
                                }
                                long dCMinusV = 0; // duplicate
                                long uCMinusV = 0; // unique
                                foreach (long n in frequencies.Keys)
                                {
                                    if (frequencies[n] > 1)
                                    {
                                        dCMinusV += n * frequencies[n];
                                    }
                                    else
                                    {
                                        uCMinusV += n;
                                    }
                                }
                                double duCMinusV = 0.0D; // ratio
                                if (uCMinusV != 0) duCMinusV = (double)dCMinusV / (double)uCMinusV;
                                MathsChaptersCMinusVDUSumTextBox.Text = duCMinusV.ToString("0.00000");
                                MathsChaptersCMinusVDUSumTextBox.ForeColor = GetNumberTypeColor((long)duCMinusV);
                                if (duCMinusV.IsInteresting()) MathsChaptersCMinusVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                ToolTip.SetToolTip(MathsChaptersCMinusVDUSumTextBox, dCMinusV.ToString() + "/" + uCMinusV.ToString());

                                frequencies.Clear();
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = chapter.SortedNumber * chapter.Verses.Count;
                                    if (frequencies.ContainsKey(n))
                                    {
                                        frequencies[n]++;
                                    }
                                    else
                                    {
                                        frequencies.Add(n, 1);
                                    }
                                }
                                long dCMultiplyV = 0; // duplicate
                                long uCMultiplyV = 0; // unique
                                foreach (long n in frequencies.Keys)
                                {
                                    if (frequencies[n] > 1)
                                    {
                                        dCMultiplyV += n * frequencies[n];
                                    }
                                    else
                                    {
                                        uCMultiplyV += n;
                                    }
                                }
                                double duCMultiplyV = 0.0D; // ratio
                                if (uCMultiplyV != 0) duCMultiplyV = (double)dCMultiplyV / (double)uCMultiplyV;
                                MathsChaptersCMultiplyVDUSumTextBox.Text = duCMultiplyV.ToString("0.00000");
                                MathsChaptersCMultiplyVDUSumTextBox.ForeColor = GetNumberTypeColor((long)duCMultiplyV);
                                if (duCMultiplyV.IsInteresting()) MathsChaptersCMultiplyVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                ToolTip.SetToolTip(MathsChaptersCMultiplyVDUSumTextBox, dCMultiplyV.ToString() + "/" + uCMultiplyV.ToString());

                                frequencies.Clear();
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = m_maths_vdividec ? ((long)((double)chapter.Verses.Count / (double)chapter.SortedNumber)) : ((long)((double)chapter.SortedNumber / (double)chapter.Verses.Count));
                                    if (frequencies.ContainsKey(n))
                                    {
                                        frequencies[n]++;
                                    }
                                    else
                                    {
                                        frequencies.Add(n, 1);
                                    }
                                }
                                long dCDivideV = 0; // duplicate
                                long uCDivideV = 0; // unique
                                foreach (long n in frequencies.Keys)
                                {
                                    if (frequencies[n] > 1)
                                    {
                                        dCDivideV += n * frequencies[n];
                                    }
                                    else
                                    {
                                        uCDivideV += n;
                                    }
                                }
                                double duCDivideV = 0.0D; // ratio
                                if (uCDivideV != 0) duCDivideV = (double)dCDivideV / (double)uCDivideV;
                                MathsChaptersCDivideVDUSumTextBox.Text = duCDivideV.ToString("0.00000");
                                MathsChaptersCDivideVDUSumTextBox.ForeColor = GetNumberTypeColor((long)duCDivideV);
                                if (duCDivideV.IsInteresting()) MathsChaptersCDivideVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                ToolTip.SetToolTip(MathsChaptersCDivideVDUSumTextBox, dCDivideV.ToString() + "/" + uCDivideV.ToString());
                            }
                        }
                    }
                }
            }
        }
    }
    private void DisplayMathsVerseSums(List<Verse> verses)
    {
        if (TabControl.SelectedTab == MathsTabPage)
        {
            if (verses != null)
            {
                m_maths_verses = verses;

                long C = 0;  // all
                long oC = 0; // odd
                long eC = 0; // even
                long pC = 0; // prime
                long cC = 0; // composite
                long V = 0;
                long oV = 0;
                long eV = 0;
                long pV = 0;
                long cV = 0;
                long CPlusV = 0;
                long oCPlusV = 0;
                long eCPlusV = 0;
                long pCPlusV = 0;
                long cCPlusV = 0;
                long CMinusV = 0;
                long oCMinusV = 0;
                long eCMinusV = 0;
                long pCMinusV = 0;
                long cCMinusV = 0;
                long CMultiplyV = 0;
                long oCMultiplyV = 0;
                long eCMultiplyV = 0;
                long pCMultiplyV = 0;
                long cCMultiplyV = 0;
                double CDivideV = 0;
                double oCDivideV = 0;
                double eCDivideV = 0;
                double pCDivideV = 0;
                double cCDivideV = 0;
                foreach (Verse verse in m_maths_verses)
                {
                    long chapter_number = verse.Chapter.SortedNumber;
                    long verse_number = verse.NumberInChapter;
                    long cplusv = chapter_number + verse_number;
                    long cminusv = m_maths_abs_cminusv ? Math.Abs(chapter_number - verse_number) : (chapter_number - verse_number);
                    long cmultiplyv = chapter_number * verse_number;
                    double cdividev = m_maths_vdividec ? ((double)verse_number / (double)chapter_number) : ((double)chapter_number / (double)verse_number);

                    C += chapter_number;
                    if (Numbers.IsOdd(chapter_number))
                    {
                        oC += chapter_number;
                    }
                    else
                    {
                        eC += chapter_number;
                    }
                    if (Numbers.IsPrime(chapter_number))
                    {
                        pC += chapter_number;
                    }
                    else if (Numbers.IsComposite(chapter_number))
                    {
                        cC += chapter_number;
                    }
                    else //if (chapter_number == 1)
                    {
                    }

                    V += verse_number;
                    if (Numbers.IsOdd(verse_number))
                    {
                        oV += verse_number;
                    }
                    else
                    {
                        eV += verse_number;
                    }
                    if (Numbers.IsPrime(verse_number))
                    {
                        pV += verse_number;
                    }
                    else if (Numbers.IsComposite(verse_number))
                    {
                        cV += verse_number;
                    }
                    else //if (verse_count == 1)
                    {
                    }

                    CPlusV += cplusv;
                    if (Numbers.IsOdd(cplusv))
                    {
                        oCPlusV += cplusv;
                    }
                    else
                    {
                        eCPlusV += cplusv;
                    }
                    if (Numbers.IsPrime(cplusv))
                    {
                        pCPlusV += cplusv;
                    }
                    else if (Numbers.IsComposite(cplusv))
                    {
                        cCPlusV += cplusv;
                    }
                    else //if (cplusv == 1)
                    {
                    }

                    CMinusV += cminusv;
                    if (Numbers.IsOdd(cminusv))
                    {
                        oCMinusV += cminusv;
                    }
                    else
                    {
                        eCMinusV += cminusv;
                    }
                    if (Numbers.IsPrime(cminusv))
                    {
                        pCMinusV += cminusv;
                    }
                    else if (Numbers.IsComposite(cminusv))
                    {
                        cCMinusV += cminusv;
                    }
                    else //if (cminusv == 1)
                    {
                    }

                    CMultiplyV += cmultiplyv;
                    if (Numbers.IsOdd(cmultiplyv))
                    {
                        oCMultiplyV += cmultiplyv;
                    }
                    else
                    {
                        eCMultiplyV += cmultiplyv;
                    }
                    if (Numbers.IsPrime(cmultiplyv))
                    {
                        pCMultiplyV += cmultiplyv;
                    }
                    else if (Numbers.IsComposite(cmultiplyv))
                    {
                        cCMultiplyV += cmultiplyv;
                    }
                    else //if (cmultiplyv == 1)
                    {
                    }

                    CDivideV += cdividev;
                    if (Numbers.IsOdd((long)cdividev))
                    {
                        oCDivideV += cdividev;
                    }
                    else
                    {
                        eCDivideV += cdividev;
                    }
                    if (Numbers.IsPrime((long)cdividev))
                    {
                        pCDivideV += cdividev;
                    }
                    else if (Numbers.IsComposite((long)cdividev))
                    {
                        cCDivideV += cdividev;
                    }
                    else //if (cdividev == 1)
                    {
                    }
                }
                MathsVersesCSumTextBox.Text = C.ToString();
                MathsVersesCOddSumTextBox.Text = oC.ToString();
                MathsVersesCEvenSumTextBox.Text = eC.ToString();
                MathsVersesCPrimeSumTextBox.Text = pC.ToString();
                MathsVersesCCompositeSumTextBox.Text = cC.ToString();
                MathsVersesVSumTextBox.Text = V.ToString();
                MathsVersesVOddSumTextBox.Text = oV.ToString();
                MathsVersesVEvenSumTextBox.Text = eV.ToString();
                MathsVersesVPrimeSumTextBox.Text = pV.ToString();
                MathsVersesVCompositeSumTextBox.Text = cV.ToString();
                MathsVersesCPlusVSumTextBox.Text = CPlusV.ToString();
                MathsVersesCPlusVOddSumTextBox.Text = oCPlusV.ToString();
                MathsVersesCPlusVEvenSumTextBox.Text = eCPlusV.ToString();
                MathsVersesCPlusVPrimeSumTextBox.Text = pCPlusV.ToString();
                MathsVersesCPlusVCompositeSumTextBox.Text = cCPlusV.ToString();
                MathsVersesCMinusVSumTextBox.Text = CMinusV.ToString();
                MathsVersesCMinusVOddSumTextBox.Text = oCMinusV.ToString();
                MathsVersesCMinusVEvenSumTextBox.Text = eCMinusV.ToString();
                MathsVersesCMinusVPrimeSumTextBox.Text = pCMinusV.ToString();
                MathsVersesCMinusVCompositeSumTextBox.Text = cCMinusV.ToString();
                MathsVersesCMultiplyVSumTextBox.Text = CMultiplyV.ToString();
                MathsVersesCMultiplyVOddSumTextBox.Text = oCMultiplyV.ToString();
                MathsVersesCMultiplyVEvenSumTextBox.Text = eCMultiplyV.ToString();
                MathsVersesCMultiplyVPrimeSumTextBox.Text = pCMultiplyV.ToString();
                MathsVersesCMultiplyVCompositeSumTextBox.Text = cCMultiplyV.ToString();
                MathsVersesCDivideVSumTextBox.Text = (CDivideV).ToString("0.0");
                MathsVersesCDivideVOddSumTextBox.Text = (oCDivideV).ToString("0.0");
                MathsVersesCDivideVEvenSumTextBox.Text = (eCDivideV).ToString("0.0");
                MathsVersesCDivideVPrimeSumTextBox.Text = (pCDivideV).ToString("0.0");
                MathsVersesCDivideVCompositeSumTextBox.Text = (cCDivideV).ToString("0.0");

                MathsVersesCSumTextBox.ForeColor = GetNumberTypeColor(C);
                MathsVersesCOddSumTextBox.ForeColor = GetNumberTypeColor(oC);
                MathsVersesCEvenSumTextBox.ForeColor = GetNumberTypeColor(eC);
                MathsVersesCPrimeSumTextBox.ForeColor = GetNumberTypeColor(pC);
                MathsVersesCCompositeSumTextBox.ForeColor = GetNumberTypeColor(cC);
                MathsVersesVSumTextBox.ForeColor = GetNumberTypeColor(V);
                MathsVersesVOddSumTextBox.ForeColor = GetNumberTypeColor(oV);
                MathsVersesVEvenSumTextBox.ForeColor = GetNumberTypeColor(eV);
                MathsVersesVPrimeSumTextBox.ForeColor = GetNumberTypeColor(pV);
                MathsVersesVCompositeSumTextBox.ForeColor = GetNumberTypeColor(cV);
                MathsVersesCPlusVSumTextBox.ForeColor = GetNumberTypeColor(CPlusV);
                MathsVersesCPlusVOddSumTextBox.ForeColor = GetNumberTypeColor(oCPlusV);
                MathsVersesCPlusVEvenSumTextBox.ForeColor = GetNumberTypeColor(eCPlusV);
                MathsVersesCPlusVPrimeSumTextBox.ForeColor = GetNumberTypeColor(pCPlusV);
                MathsVersesCPlusVCompositeSumTextBox.ForeColor = GetNumberTypeColor(cCPlusV);
                MathsVersesCMinusVSumTextBox.ForeColor = GetNumberTypeColor(CMinusV);
                MathsVersesCMinusVOddSumTextBox.ForeColor = GetNumberTypeColor(oCMinusV);
                MathsVersesCMinusVEvenSumTextBox.ForeColor = GetNumberTypeColor(eCMinusV);
                MathsVersesCMinusVPrimeSumTextBox.ForeColor = GetNumberTypeColor(pCMinusV);
                MathsVersesCMinusVCompositeSumTextBox.ForeColor = GetNumberTypeColor(cCMinusV);
                MathsVersesCMultiplyVSumTextBox.ForeColor = GetNumberTypeColor(CMultiplyV);
                MathsVersesCMultiplyVOddSumTextBox.ForeColor = GetNumberTypeColor(oCMultiplyV);
                MathsVersesCMultiplyVEvenSumTextBox.ForeColor = GetNumberTypeColor(eCMultiplyV);
                MathsVersesCMultiplyVPrimeSumTextBox.ForeColor = GetNumberTypeColor(pCMultiplyV);
                MathsVersesCMultiplyVCompositeSumTextBox.ForeColor = GetNumberTypeColor(cCMultiplyV);
                MathsVersesCDivideVSumTextBox.ForeColor = GetNumberTypeColor((long)CDivideV);
                MathsVersesCDivideVOddSumTextBox.ForeColor = GetNumberTypeColor((long)oCDivideV);
                MathsVersesCDivideVEvenSumTextBox.ForeColor = GetNumberTypeColor((long)eCDivideV);
                MathsVersesCDivideVPrimeSumTextBox.ForeColor = GetNumberTypeColor((long)pCDivideV);
                MathsVersesCDivideVCompositeSumTextBox.ForeColor = GetNumberTypeColor((long)cCDivideV);

                MathsVersesCSumTextBox.BackColor = (Numbers.Compare(C, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCOddSumTextBox.BackColor = (Numbers.Compare(oC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCEvenSumTextBox.BackColor = (Numbers.Compare(eC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCPrimeSumTextBox.BackColor = (Numbers.Compare(pC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCCompositeSumTextBox.BackColor = (Numbers.Compare(cC, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesVSumTextBox.BackColor = (Numbers.Compare(V, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesVOddSumTextBox.BackColor = (Numbers.Compare(oV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesVEvenSumTextBox.BackColor = (Numbers.Compare(eV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesVPrimeSumTextBox.BackColor = (Numbers.Compare(pV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesVCompositeSumTextBox.BackColor = (Numbers.Compare(cV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCPlusVSumTextBox.BackColor = (Numbers.Compare(CPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCPlusVOddSumTextBox.BackColor = (Numbers.Compare(oCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCPlusVEvenSumTextBox.BackColor = (Numbers.Compare(eCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCPlusVPrimeSumTextBox.BackColor = (Numbers.Compare(pCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCPlusVCompositeSumTextBox.BackColor = (Numbers.Compare(cCPlusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMinusVSumTextBox.BackColor = (Numbers.Compare(CMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMinusVOddSumTextBox.BackColor = (Numbers.Compare(oCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMinusVEvenSumTextBox.BackColor = (Numbers.Compare(eCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMinusVPrimeSumTextBox.BackColor = (Numbers.Compare(pCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMinusVCompositeSumTextBox.BackColor = (Numbers.Compare(cCMinusV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMultiplyVSumTextBox.BackColor = (Numbers.Compare(CMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMultiplyVOddSumTextBox.BackColor = (Numbers.Compare(oCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMultiplyVEvenSumTextBox.BackColor = (Numbers.Compare(eCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMultiplyVPrimeSumTextBox.BackColor = (Numbers.Compare(pCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCMultiplyVCompositeSumTextBox.BackColor = (Numbers.Compare(cCMultiplyV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCDivideVSumTextBox.BackColor = (Numbers.Compare((long)CDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCDivideVOddSumTextBox.BackColor = (Numbers.Compare((long)oCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCDivideVEvenSumTextBox.BackColor = (Numbers.Compare((long)eCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCDivideVPrimeSumTextBox.BackColor = (Numbers.Compare((long)pCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                MathsVersesCDivideVCompositeSumTextBox.BackColor = (Numbers.Compare((long)cCDivideV, m_maths_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;

                // Interesting numbers
                if (C.IsInteresting()) MathsVersesCSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (oC.IsInteresting()) MathsVersesCOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (eC.IsInteresting()) MathsVersesCEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (pC.IsInteresting()) MathsVersesCPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (cC.IsInteresting()) MathsVersesCCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (V.IsInteresting()) MathsVersesVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (oV.IsInteresting()) MathsVersesVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (eV.IsInteresting()) MathsVersesVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (pV.IsInteresting()) MathsVersesVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (cV.IsInteresting()) MathsVersesVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (CPlusV.IsInteresting()) MathsVersesCPlusVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (oCPlusV.IsInteresting()) MathsVersesCPlusVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (eCPlusV.IsInteresting()) MathsVersesCPlusVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (pCPlusV.IsInteresting()) MathsVersesCPlusVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (cCPlusV.IsInteresting()) MathsVersesCPlusVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (CMinusV.IsInteresting()) MathsVersesCMinusVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (oCMinusV.IsInteresting()) MathsVersesCMinusVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (eCMinusV.IsInteresting()) MathsVersesCMinusVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (pCMinusV.IsInteresting()) MathsVersesCMinusVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (cCMinusV.IsInteresting()) MathsVersesCMinusVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (CMultiplyV.IsInteresting()) MathsVersesCMultiplyVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (oCMultiplyV.IsInteresting()) MathsVersesCMultiplyVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (eCMultiplyV.IsInteresting()) MathsVersesCMultiplyVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (pCMultiplyV.IsInteresting()) MathsVersesCMultiplyVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (cCMultiplyV.IsInteresting()) MathsVersesCMultiplyVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (CDivideV.IsInteresting()) MathsVersesCDivideVSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (oCDivideV.IsInteresting()) MathsVersesCDivideVOddSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (eCDivideV.IsInteresting()) MathsVersesCDivideVEvenSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (pCDivideV.IsInteresting()) MathsVersesCDivideVPrimeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                if (cCDivideV.IsInteresting()) MathsVersesCDivideVCompositeSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
            }
        }
    }
    private void DisplayMathsVerseSumRatios(List<Verse> verses)
    {
        if (TabControl.SelectedTab == MathsTabPage)
        {
            if (verses != null)
            {
                m_maths_verses = verses;

                Dictionary<long, long> frequencies = new Dictionary<long, long>();
                if (frequencies != null)
                {
                    frequencies.Clear();
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = verse.Chapter.SortedNumber;
                        if (frequencies.ContainsKey(n))
                        {
                            frequencies[n]++;
                        }
                        else
                        {
                            frequencies.Add(n, 1);
                        }
                    }
                    long dC = 0; // duplicate
                    long uC = 0; // unique
                    foreach (long n in frequencies.Keys)
                    {
                        if (frequencies[n] > 1)
                        {
                            dC += n * frequencies[n];
                        }
                        else
                        {
                            uC += n;
                        }
                    }
                    double duC = 0.0D; // ratio
                    if (uC != 0) duC = (double)dC / (double)uC;
                    MathsVersesCDUSumTextBox.Text = duC.ToString("0.00000");
                    MathsVersesCDUSumTextBox.ForeColor = GetNumberTypeColor((long)duC);
                    if (duC.IsInteresting()) MathsVersesCDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                    ToolTip.SetToolTip(MathsVersesCDUSumTextBox, dC.ToString() + "/" + uC.ToString());

                    frequencies.Clear();
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = verse.NumberInChapter;
                        if (frequencies.ContainsKey(n))
                        {
                            frequencies[n]++;
                        }
                        else
                        {
                            frequencies.Add(n, 1);
                        }
                    }
                    long dV = 0; // duplicate
                    long uV = 0; // unique
                    foreach (long n in frequencies.Keys)
                    {
                        if (frequencies[n] > 1)
                        {
                            dV += n * frequencies[n];
                        }
                        else
                        {
                            uV += n;
                        }
                    }
                    double duV = 0.0D; // ratio
                    if (uV != 0) duV = (double)dV / (double)uV;
                    MathsVersesVDUSumTextBox.Text = duV.ToString("0.00000");
                    MathsVersesVDUSumTextBox.ForeColor = GetNumberTypeColor((long)duV);
                    if (duV.IsInteresting()) MathsVersesVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                    ToolTip.SetToolTip(MathsVersesVDUSumTextBox, dV.ToString() + "/" + uV.ToString());

                    frequencies.Clear();
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = verse.Chapter.SortedNumber + verse.NumberInChapter;
                        if (frequencies.ContainsKey(n))
                        {
                            frequencies[n]++;
                        }
                        else
                        {
                            frequencies.Add(n, 1);
                        }
                    }
                    long dCPlusV = 0; // duplicate
                    long uCPlusV = 0; // unique
                    foreach (long n in frequencies.Keys)
                    {
                        if (frequencies[n] > 1)
                        {
                            dCPlusV += n * frequencies[n];
                        }
                        else
                        {
                            uCPlusV += n;
                        }
                    }
                    double duCPlusV = 0.0D; // ratio
                    if (uCPlusV != 0) duCPlusV = (double)dCPlusV / (double)uCPlusV;
                    MathsVersesCPlusVDUSumTextBox.Text = duCPlusV.ToString("0.00000");
                    MathsVersesCPlusVDUSumTextBox.ForeColor = GetNumberTypeColor((long)duCPlusV);
                    if (duCPlusV.IsInteresting()) MathsVersesCPlusVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                    ToolTip.SetToolTip(MathsVersesCPlusVDUSumTextBox, dCPlusV.ToString() + "/" + uCPlusV.ToString());

                    frequencies.Clear();
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = m_maths_abs_cminusv ? Math.Abs(verse.Chapter.SortedNumber - verse.NumberInChapter) : (verse.Chapter.SortedNumber - verse.NumberInChapter);
                        if (frequencies.ContainsKey(n))
                        {
                            frequencies[n]++;
                        }
                        else
                        {
                            frequencies.Add(n, 1);
                        }
                    }
                    long dCMinusV = 0; // duplicate
                    long uCMinusV = 0; // unique
                    foreach (long n in frequencies.Keys)
                    {
                        if (frequencies[n] > 1)
                        {
                            dCMinusV += n * frequencies[n];
                        }
                        else
                        {
                            uCMinusV += n;
                        }
                    }
                    double duCMinusV = 0.0D; // ratio
                    if (uCMinusV != 0) duCMinusV = (double)dCMinusV / (double)uCMinusV;
                    MathsVersesCMinusVDUSumTextBox.Text = duCMinusV.ToString("0.00000");
                    MathsVersesCMinusVDUSumTextBox.ForeColor = GetNumberTypeColor((long)duCMinusV);
                    if (duCMinusV.IsInteresting()) MathsVersesCMinusVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                    ToolTip.SetToolTip(MathsVersesCMinusVDUSumTextBox, dCMinusV.ToString() + "/" + uCMinusV.ToString());

                    frequencies.Clear();
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = verse.Chapter.SortedNumber * verse.NumberInChapter;
                        if (frequencies.ContainsKey(n))
                        {
                            frequencies[n]++;
                        }
                        else
                        {
                            frequencies.Add(n, 1);
                        }
                    }
                    long dCMultiplyV = 0; // duplicate
                    long uCMultiplyV = 0; // unique
                    foreach (long n in frequencies.Keys)
                    {
                        if (frequencies[n] > 1)
                        {
                            dCMultiplyV += n * frequencies[n];
                        }
                        else
                        {
                            uCMultiplyV += n;
                        }
                    }
                    double duCMultiplyV = 0.0D; // ratio
                    if (uCMultiplyV != 0) duCMultiplyV = (double)dCMultiplyV / (double)uCMultiplyV;
                    MathsVersesCMultiplyVDUSumTextBox.Text = duCMultiplyV.ToString("0.00000");
                    MathsVersesCMultiplyVDUSumTextBox.ForeColor = GetNumberTypeColor((long)duCMultiplyV);
                    if (duCMultiplyV.IsInteresting()) MathsVersesCMultiplyVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                    ToolTip.SetToolTip(MathsVersesCMultiplyVDUSumTextBox, dCMultiplyV.ToString() + "/" + uCMultiplyV.ToString());

                    frequencies.Clear();
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = m_maths_vdividec ? ((long)((double)verse.NumberInChapter / (double)verse.Chapter.SortedNumber)) : ((long)((double)verse.Chapter.SortedNumber / (double)verse.NumberInChapter));
                        if (frequencies.ContainsKey(n))
                        {
                            frequencies[n]++;
                        }
                        else
                        {
                            frequencies.Add(n, 1);
                        }
                    }
                    long dCDivideV = 0; // duplicate
                    long uCDivideV = 0; // unique
                    foreach (long n in frequencies.Keys)
                    {
                        if (frequencies[n] > 1)
                        {
                            dCDivideV += n * frequencies[n];
                        }
                        else
                        {
                            uCDivideV += n;
                        }
                    }
                    double duCDivideV = 0.0D; // ratio
                    if (uCDivideV != 0) duCDivideV = (double)dCDivideV / (double)uCDivideV;
                    MathsVersesCDivideVDUSumTextBox.Text = duCDivideV.ToString("0.00000");
                    MathsVersesCDivideVDUSumTextBox.ForeColor = GetNumberTypeColor((long)duCDivideV);
                    if (duCDivideV.IsInteresting()) MathsVersesCDivideVDUSumTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                    ToolTip.SetToolTip(MathsVersesCDivideVDUSumTextBox, dCDivideV.ToString() + "/" + uCDivideV.ToString());
                }
            }
        }
    }
    private void MathsChaptersSumInspectLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            InspectMathsChaptersSums();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void MathsVersesSumInspectLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            InspectMathsVersesSums();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void InspectMathsChaptersSums()
    {
        if (Directory.Exists(Globals.STATISTICS_FOLDER))
        {
            string filename = Globals.STATISTICS_FOLDER + "/" + DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss") + "_" + "MathsChapterSums" + ".txt";

            StringBuilder str = new StringBuilder();
            str.Append("\t");
            str.AppendLine("Chapter" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                            "Verses" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                               "C+V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                               "C-V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                               "C×V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                               "C÷V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique");

            if (m_maths_verses != null)
            {
                if (m_client != null)
                {
                    if (m_client.Book != null)
                    {
                        // CHAPTER SUMS
                        List<Chapter> chapters = m_client.Book.GetChapters(m_maths_verses);
                        if (chapters != null)
                        {
                            long dC = 0; // duplicate
                            long uC = 0; // unique
                            double duC = 0.0D; // d/u ratio
                            Dictionary<long, long> c_frequencies = new Dictionary<long, long>();
                            if (c_frequencies != null)
                            {
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = chapter.SortedNumber;
                                    if (c_frequencies.ContainsKey(n))
                                    {
                                        c_frequencies[n]++;
                                    }
                                    else
                                    {
                                        c_frequencies.Add(n, 1);
                                    }
                                }
                                foreach (long n in c_frequencies.Keys)
                                {
                                    if (c_frequencies[n] > 1)
                                    {
                                        dC += n * c_frequencies[n];
                                    }
                                    else
                                    {
                                        uC += n;
                                    }
                                }
                                if (uC != 0) duC = (double)dC / (double)uC;
                            }

                            long dV = 0; // duplicate
                            long uV = 0; // unique
                            double duV = 0.0D; // d/u ratio
                            Dictionary<long, long> v_frequencies = new Dictionary<long, long>();
                            if (v_frequencies != null)
                            {
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = chapter.Verses.Count;
                                    if (v_frequencies.ContainsKey(n))
                                    {
                                        v_frequencies[n]++;
                                    }
                                    else
                                    {
                                        v_frequencies.Add(n, 1);
                                    }
                                }
                                foreach (long n in v_frequencies.Keys)
                                {
                                    if (v_frequencies[n] > 1)
                                    {
                                        dV += n * v_frequencies[n];
                                    }
                                    else
                                    {
                                        uV += n;
                                    }
                                }
                                if (uV != 0) duV = (double)dV / (double)uV;
                            }

                            long dCPlusV = 0; // duplicate
                            long uCPlusV = 0; // unique
                            double duCPlusV = 0.0D; // d/u ratio
                            Dictionary<long, long> cplusv_frequencies = new Dictionary<long, long>();
                            if (cplusv_frequencies != null)
                            {
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = chapter.SortedNumber + chapter.Verses.Count;
                                    if (cplusv_frequencies.ContainsKey(n))
                                    {
                                        cplusv_frequencies[n]++;
                                    }
                                    else
                                    {
                                        cplusv_frequencies.Add(n, 1);
                                    }
                                }
                                foreach (long n in cplusv_frequencies.Keys)
                                {
                                    if (cplusv_frequencies[n] > 1)
                                    {
                                        dCPlusV += n * cplusv_frequencies[n];
                                    }
                                    else
                                    {
                                        uCPlusV += n;
                                    }
                                }
                                if (uCPlusV != 0) duCPlusV = (double)dCPlusV / (double)uCPlusV;
                            }

                            long dCMinusV = 0; // duplicate
                            long uCMinusV = 0; // unique
                            double duCMinusV = 0.0D; // d/u ratio
                            Dictionary<long, long> cminusv_frequencies = new Dictionary<long, long>();
                            if (cminusv_frequencies != null)
                            {
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = m_maths_abs_cminusv ? Math.Abs(chapter.SortedNumber - chapter.Verses.Count) : (chapter.SortedNumber - chapter.Verses.Count);
                                    if (cminusv_frequencies.ContainsKey(n))
                                    {
                                        cminusv_frequencies[n]++;
                                    }
                                    else
                                    {
                                        cminusv_frequencies.Add(n, 1);
                                    }
                                }
                                foreach (long n in cminusv_frequencies.Keys)
                                {
                                    if (cminusv_frequencies[n] > 1)
                                    {
                                        dCMinusV += n * cminusv_frequencies[n];
                                    }
                                    else
                                    {
                                        uCMinusV += n;
                                    }
                                }
                                if (uCMinusV != 0) duCMinusV = (double)dCMinusV / (double)uCMinusV;
                            }

                            long dCMultiplyV = 0; // duplicate
                            long uCMultiplyV = 0; // unique
                            double duCMultiplyV = 0.0D; // d/u ratio
                            Dictionary<long, long> cmultiplyv_frequencies = new Dictionary<long, long>();
                            if (cmultiplyv_frequencies != null)
                            {
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = chapter.SortedNumber * chapter.Verses.Count;
                                    if (cmultiplyv_frequencies.ContainsKey(n))
                                    {
                                        cmultiplyv_frequencies[n]++;
                                    }
                                    else
                                    {
                                        cmultiplyv_frequencies.Add(n, 1);
                                    }
                                }
                                foreach (long n in cmultiplyv_frequencies.Keys)
                                {
                                    if (cmultiplyv_frequencies[n] > 1)
                                    {
                                        dCMultiplyV += n * cmultiplyv_frequencies[n];
                                    }
                                    else
                                    {
                                        uCMultiplyV += n;
                                    }
                                }
                                if (uCMultiplyV != 0) duCMultiplyV = (double)dCMultiplyV / (double)uCMultiplyV;
                            }

                            long dCDivideV = 0; // duplicate
                            long uCDivideV = 0; // unique
                            double duCDivideV = 0.0D; // d/u ratio
                            Dictionary<long, long> cdividev_frequencies = new Dictionary<long, long>();
                            if (cdividev_frequencies != null)
                            {
                                foreach (Chapter chapter in chapters)
                                {
                                    long n = m_maths_vdividec ? ((long)((double)chapter.Verses.Count / (double)chapter.SortedNumber)) : ((long)((double)chapter.SortedNumber / (double)chapter.Verses.Count));
                                    if (cdividev_frequencies.ContainsKey(n))
                                    {
                                        cdividev_frequencies[n]++;
                                    }
                                    else
                                    {
                                        cdividev_frequencies.Add(n, 1);
                                    }
                                }
                                foreach (long n in cdividev_frequencies.Keys)
                                {
                                    if (cdividev_frequencies[n] > 1)
                                    {
                                        dCDivideV += n * cdividev_frequencies[n];
                                    }
                                    else
                                    {
                                        uCDivideV += n;
                                    }
                                }
                                if (uCDivideV != 0) duCDivideV = (double)dCDivideV / (double)uCDivideV;
                            }

                            long C = 0;
                            long oC = 0;
                            long eC = 0;
                            long pC = 0;
                            long cC = 0;
                            long V = 0;
                            long oV = 0;
                            long eV = 0;
                            long pV = 0;
                            long cV = 0;
                            long CPlusV = 0;
                            long oCPlusV = 0;
                            long eCPlusV = 0;
                            long pCPlusV = 0;
                            long cCPlusV = 0;
                            long CMinusV = 0;
                            long oCMinusV = 0;
                            long eCMinusV = 0;
                            long pCMinusV = 0;
                            long cCMinusV = 0;
                            long CMultiplyV = 0;
                            long oCMultiplyV = 0;
                            long eCMultiplyV = 0;
                            long pCMultiplyV = 0;
                            long cCMultiplyV = 0;
                            double CDivideV = 0;
                            double oCDivideV = 0;
                            double eCDivideV = 0;
                            double pCDivideV = 0;
                            double cCDivideV = 0;
                            foreach (Chapter chapter in chapters)
                            {
                                long chapter_number = chapter.SortedNumber;
                                long verse_count = chapter.Verses.Count;
                                long cplusv = chapter_number + verse_count;
                                long cminusv = m_maths_abs_cminusv ? Math.Abs(chapter_number - verse_count) : (chapter_number - verse_count);
                                long cmultiplyv = chapter_number * verse_count;
                                double cdividev = m_maths_vdividec ? ((double)verse_count / (double)chapter_number) : ((double)chapter_number / (double)verse_count);

                                str.Append("\t");

                                C += chapter_number;
                                str.Append(chapter_number + "\t");
                                if (Numbers.IsOdd(chapter_number))
                                {
                                    oC += chapter_number;
                                    str.Append(chapter_number + "\t");
                                    str.Append(0 + "\t");
                                }
                                else
                                {
                                    eC += chapter_number;
                                    str.Append(0 + "\t");
                                    str.Append(chapter_number + "\t");
                                }
                                if (Numbers.IsPrime(chapter_number))
                                {
                                    pC += chapter_number;
                                    str.Append(chapter_number + "\t");
                                    str.Append(0 + "\t");
                                }
                                else if (Numbers.IsComposite(chapter_number))
                                {
                                    cC += chapter_number;
                                    str.Append(0 + "\t");
                                    str.Append(chapter_number + "\t");
                                }
                                else //if (chapter_number == 1)
                                {
                                    str.Append(0 + "\t");
                                    str.Append(0 + "\t");
                                }
                                if (c_frequencies != null)
                                {
                                    if (c_frequencies.ContainsKey(chapter_number))
                                    {
                                        if (c_frequencies[chapter_number] > 1)
                                        {
                                            str.Append(chapter_number + "\t");
                                            str.Append(0 + "\t");
                                        }
                                        else
                                        {
                                            str.Append(0 + "\t");
                                            str.Append(chapter_number + "\t");
                                        }
                                    }
                                }
                                str.Append("\t");

                                V += verse_count;
                                str.Append(verse_count + "\t");
                                if (Numbers.IsOdd(verse_count))
                                {
                                    oV += verse_count;
                                    str.Append(verse_count + "\t");
                                    str.Append(0 + "\t");
                                }
                                else
                                {
                                    eV += verse_count;
                                    str.Append(0 + "\t");
                                    str.Append(verse_count + "\t");
                                }
                                if (Numbers.IsPrime(verse_count))
                                {
                                    pV += verse_count;
                                    str.Append(verse_count + "\t");
                                    str.Append(0 + "\t");
                                }
                                else if (Numbers.IsComposite(verse_count))
                                {
                                    cV += verse_count;
                                    str.Append(0 + "\t");
                                    str.Append(verse_count + "\t");
                                }
                                else //if (verse_count == 1)
                                {
                                    str.Append(0 + "\t");
                                    str.Append(0 + "\t");
                                }
                                if (v_frequencies != null)
                                {
                                    if (v_frequencies.ContainsKey(verse_count))
                                    {
                                        if (v_frequencies[verse_count] > 1)
                                        {
                                            str.Append(verse_count + "\t");
                                            str.Append(0 + "\t");
                                        }
                                        else
                                        {
                                            str.Append(0 + "\t");
                                            str.Append(verse_count + "\t");
                                        }
                                    }
                                }
                                str.Append("\t");

                                CPlusV += cplusv;
                                str.Append(cplusv + "\t");
                                if (Numbers.IsOdd(cplusv))
                                {
                                    oCPlusV += cplusv;
                                    str.Append(cplusv + "\t");
                                    str.Append(0 + "\t");
                                }
                                else
                                {
                                    eCPlusV += cplusv;
                                    str.Append(0 + "\t");
                                    str.Append(cplusv + "\t");
                                }
                                if (Numbers.IsPrime(cplusv))
                                {
                                    pCPlusV += cplusv;
                                    str.Append(cplusv + "\t");
                                    str.Append(0 + "\t");
                                }
                                else if (Numbers.IsComposite(cplusv))
                                {
                                    cCPlusV += cplusv;
                                    str.Append(0 + "\t");
                                    str.Append(cplusv + "\t");
                                }
                                else //if (cplusv == 1)
                                {
                                    str.Append(0 + "\t");
                                    str.Append(0 + "\t");
                                }
                                if (cplusv_frequencies != null)
                                {
                                    if (cplusv_frequencies.ContainsKey(cplusv))
                                    {
                                        if (cplusv_frequencies[cplusv] > 1)
                                        {
                                            str.Append(cplusv + "\t");
                                            str.Append(0 + "\t");
                                        }
                                        else
                                        {
                                            str.Append(0 + "\t");
                                            str.Append(cplusv + "\t");
                                        }
                                    }
                                }
                                str.Append("\t");

                                CMinusV += cminusv;
                                str.Append(cminusv + "\t");
                                if (Numbers.IsOdd(cminusv))
                                {
                                    oCMinusV += cminusv;
                                    str.Append(cminusv + "\t");
                                    str.Append(0 + "\t");
                                }
                                else
                                {
                                    eCMinusV += cminusv;
                                    str.Append(0 + "\t");
                                    str.Append(cminusv + "\t");
                                }
                                if (Numbers.IsPrime(cminusv))
                                {
                                    pCMinusV += cminusv;
                                    str.Append(cminusv + "\t");
                                    str.Append(0 + "\t");
                                }
                                else if (Numbers.IsComposite(cminusv))
                                {
                                    cCMinusV += cminusv;
                                    str.Append(0 + "\t");
                                    str.Append(cminusv + "\t");
                                }
                                else //if (cminusv == 1)
                                {
                                    str.Append(0 + "\t");
                                    str.Append(0 + "\t");
                                }
                                if (cminusv_frequencies != null)
                                {
                                    if (cminusv_frequencies.ContainsKey(cminusv))
                                    {
                                        if (cminusv_frequencies[cminusv] > 1)
                                        {
                                            str.Append(cminusv + "\t");
                                            str.Append(0 + "\t");
                                        }
                                        else
                                        {
                                            str.Append(0 + "\t");
                                            str.Append(cminusv + "\t");
                                        }
                                    }
                                }
                                str.Append("\t");

                                CMultiplyV += cmultiplyv;
                                str.Append(cmultiplyv + "\t");
                                if (Numbers.IsOdd(cmultiplyv))
                                {
                                    oCMultiplyV += cmultiplyv;
                                    str.Append(cmultiplyv + "\t");
                                    str.Append(0 + "\t");
                                }
                                else
                                {
                                    eCMultiplyV += cmultiplyv;
                                    str.Append(0 + "\t");
                                    str.Append(cmultiplyv + "\t");
                                }
                                if (Numbers.IsPrime(cmultiplyv))
                                {
                                    pCMultiplyV += cmultiplyv;
                                    str.Append(cmultiplyv + "\t");
                                    str.Append(0 + "\t");
                                }
                                else if (Numbers.IsComposite(cmultiplyv))
                                {
                                    cCMultiplyV += cmultiplyv;
                                    str.Append(0 + "\t");
                                    str.Append(cmultiplyv + "\t");
                                }
                                else //if (cmultiplyv == 1)
                                {
                                    str.Append(0 + "\t");
                                    str.Append(0 + "\t");
                                }
                                if (cmultiplyv_frequencies != null)
                                {
                                    if (cmultiplyv_frequencies.ContainsKey(cmultiplyv))
                                    {
                                        if (cmultiplyv_frequencies[cmultiplyv] > 1)
                                        {
                                            str.Append(cmultiplyv + "\t");
                                            str.Append(0 + "\t");
                                        }
                                        else
                                        {
                                            str.Append(0 + "\t");
                                            str.Append(cmultiplyv + "\t");
                                        }
                                    }
                                }
                                str.Append("\t");


                                CDivideV += cdividev;
                                str.Append(cdividev.ToString("0.0") + "\t");
                                if (Numbers.IsOdd((long)cdividev))
                                {
                                    oCDivideV += cdividev;
                                    str.Append(cdividev.ToString("0.0") + "\t");
                                    str.Append(0 + "\t");
                                }
                                else
                                {
                                    eCDivideV += cdividev;
                                    str.Append(0 + "\t");
                                    str.Append(cdividev.ToString("0.0") + "\t");
                                }
                                if (Numbers.IsPrime((long)cdividev))
                                {
                                    pCDivideV += cdividev;
                                    str.Append(cdividev.ToString("0.0") + "\t");
                                    str.Append(0 + "\t");
                                }
                                else if (Numbers.IsComposite((long)cdividev))
                                {
                                    cCDivideV += cdividev;
                                    str.Append(0 + "\t");
                                    str.Append(cdividev.ToString("0.0") + "\t");
                                }
                                else //if (cdividev == 1)
                                {
                                    str.Append(0 + "\t");
                                    str.Append(0 + "\t");
                                }
                                if (cdividev_frequencies != null)
                                {
                                    if (cdividev_frequencies.ContainsKey((long)cdividev))
                                    {
                                        if (cdividev_frequencies[(long)cdividev] > 1)
                                        {
                                            str.Append(cdividev.ToString("0.0") + "\t");
                                            str.Append(0 + "\t");
                                        }
                                        else
                                        {
                                            str.Append(0 + "\t");
                                            str.Append(cdividev.ToString("0.0") + "\t");
                                        }
                                    }
                                }
                                str.Remove(str.Length - 1, 1);

                                str.AppendLine();
                            }

                            str.Append("Sum" + "\t");
                            str.AppendLine(C + "\t" + oC + "\t" + eC + "\t" + pC + "\t" + cC + "\t" + dC + "\t" + uC + "\t" + "\t" +
                                           V + "\t" + oV + "\t" + eV + "\t" + pV + "\t" + cV + "\t" + dV + "\t" + uV + "\t" + "\t" +
                                           CPlusV + "\t" + oCPlusV + "\t" + eCPlusV + "\t" + pCPlusV + "\t" + cCPlusV + "\t" + dCPlusV + "\t" + uCPlusV + "\t" + "\t" +
                                           CMinusV + "\t" + oCMinusV + "\t" + eCMinusV + "\t" + pCMinusV + "\t" + cCMinusV + "\t" + dCMinusV + "\t" + uCMinusV + "\t" + "\t" +
                                           CMultiplyV + "\t" + oCMultiplyV + "\t" + eCMultiplyV + "\t" + pCMultiplyV + "\t" + cCMultiplyV + "\t" + dCMultiplyV + "\t" + uCMultiplyV + "\t" + "\t" +
                                           CDivideV.ToString("0.0") + "\t" + oCDivideV.ToString("0.0") + "\t" + eCDivideV.ToString("0.0") + "\t" + pCDivideV.ToString("0.0") + "\t" + cCDivideV.ToString("0.0") + "\t" + dCDivideV.ToString("0.0") + "\t" + uCDivideV.ToString("0.0"));
                            FileHelper.SaveText(filename, str.ToString());
                            FileHelper.DisplayFile(filename);
                        }
                    }
                }
            }
        }
    }
    private void InspectMathsVersesSums()
    {
        if (Directory.Exists(Globals.STATISTICS_FOLDER))
        {
            string filename = Globals.STATISTICS_FOLDER + "/" + DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss") + "_" + "MathsVerseSums" + ".txt";

            StringBuilder str = new StringBuilder();
            str.Append("\t");
            str.AppendLine("Chapter" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                             "Verse" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                               "C+V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                               "C-V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                               "C×V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique" + "\t" + "\t" +
                               "C÷V" + "\t" + "Odd" + "\t" + "Even" + "\t" + "Prime" + "\t" + "Composi" + "\t" + "Duplica" + "\t" + "Unique");

            // VERSE SUMS
            if (m_maths_verses != null)
            {
                long dC = 0; // duplicate
                long uC = 0; // unique
                double duC = 0.0D; // d/u ratio
                Dictionary<long, long> c_frequencies = new Dictionary<long, long>();
                if (c_frequencies != null)
                {
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = verse.Chapter.SortedNumber;
                        if (c_frequencies.ContainsKey(n))
                        {
                            c_frequencies[n]++;
                        }
                        else
                        {
                            c_frequencies.Add(n, 1);
                        }
                    }
                    foreach (long n in c_frequencies.Keys)
                    {
                        if (c_frequencies[n] > 1)
                        {
                            dC += n * c_frequencies[n];
                        }
                        else
                        {
                            uC += n;
                        }
                    }
                    if (uC != 0) duC = (double)dC / (double)uC;
                }

                long dV = 0; // duplicate
                long uV = 0; // unique
                double duV = 0.0D; // d/u ratio
                Dictionary<long, long> v_frequencies = new Dictionary<long, long>();
                if (v_frequencies != null)
                {
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = verse.NumberInChapter;
                        if (v_frequencies.ContainsKey(n))
                        {
                            v_frequencies[n]++;
                        }
                        else
                        {
                            v_frequencies.Add(n, 1);
                        }
                    }
                    foreach (long n in v_frequencies.Keys)
                    {
                        if (v_frequencies[n] > 1)
                        {
                            dV += n * v_frequencies[n];
                        }
                        else
                        {
                            uV += n;
                        }
                    }
                    if (uV != 0) duV = (double)dV / (double)uV;
                }

                long dCPlusV = 0; // duplicate
                long uCPlusV = 0; // unique
                double duCPlusV = 0.0D; // d/u ratio
                Dictionary<long, long> cplusv_frequencies = new Dictionary<long, long>();
                if (cplusv_frequencies != null)
                {
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = verse.Chapter.SortedNumber + verse.NumberInChapter;
                        if (cplusv_frequencies.ContainsKey(n))
                        {
                            cplusv_frequencies[n]++;
                        }
                        else
                        {
                            cplusv_frequencies.Add(n, 1);
                        }
                    }
                    foreach (long n in cplusv_frequencies.Keys)
                    {
                        if (cplusv_frequencies[n] > 1)
                        {
                            dCPlusV += n * cplusv_frequencies[n];
                        }
                        else
                        {
                            uCPlusV += n;
                        }
                    }
                    if (uCPlusV != 0) duCPlusV = (double)dCPlusV / (double)uCPlusV;
                }

                long dCMinusV = 0; // duplicate
                long uCMinusV = 0; // unique
                double duCMinusV = 0.0D; // d/u ratio
                Dictionary<long, long> cminusv_frequencies = new Dictionary<long, long>();
                if (cminusv_frequencies != null)
                {
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = m_maths_abs_cminusv ? Math.Abs(verse.Chapter.SortedNumber - verse.NumberInChapter) : (verse.Chapter.SortedNumber - verse.NumberInChapter);
                        if (cminusv_frequencies.ContainsKey(n))
                        {
                            cminusv_frequencies[n]++;
                        }
                        else
                        {
                            cminusv_frequencies.Add(n, 1);
                        }
                    }
                    foreach (long n in cminusv_frequencies.Keys)
                    {
                        if (cminusv_frequencies[n] > 1)
                        {
                            dCMinusV += n * cminusv_frequencies[n];
                        }
                        else
                        {
                            uCMinusV += n;
                        }
                    }
                    if (uCMinusV != 0) duCMinusV = (double)dCMinusV / (double)uCMinusV;
                }

                long dCMultiplyV = 0; // duplicate
                long uCMultiplyV = 0; // unique
                double duCMultiplyV = 0.0D; // d/u ratio
                Dictionary<long, long> cmultiplyv_frequencies = new Dictionary<long, long>();
                if (cmultiplyv_frequencies != null)
                {
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = verse.Chapter.SortedNumber * verse.NumberInChapter;
                        if (cmultiplyv_frequencies.ContainsKey(n))
                        {
                            cmultiplyv_frequencies[n]++;
                        }
                        else
                        {
                            cmultiplyv_frequencies.Add(n, 1);
                        }
                    }
                    foreach (long n in cmultiplyv_frequencies.Keys)
                    {
                        if (cmultiplyv_frequencies[n] > 1)
                        {
                            dCMultiplyV += n * cmultiplyv_frequencies[n];
                        }
                        else
                        {
                            uCMultiplyV += n;
                        }
                    }
                    if (uCMultiplyV != 0) duCMultiplyV = (double)dCMultiplyV / (double)uCMultiplyV;
                }

                long dCDivideV = 0; // duplicate
                long uCDivideV = 0; // unique
                double duCDivideV = 0.0D; // d/u ratio
                Dictionary<long, long> cdividev_frequencies = new Dictionary<long, long>();
                if (cdividev_frequencies != null)
                {
                    foreach (Verse verse in m_maths_verses)
                    {
                        long n = m_maths_vdividec ? ((long)((double)verse.NumberInChapter / (double)verse.Chapter.SortedNumber)) : ((long)((double)verse.Chapter.SortedNumber / (double)verse.NumberInChapter));
                        if (cdividev_frequencies.ContainsKey(n))
                        {
                            cdividev_frequencies[n]++;
                        }
                        else
                        {
                            cdividev_frequencies.Add(n, 1);
                        }
                    }
                    foreach (long n in cdividev_frequencies.Keys)
                    {
                        if (cdividev_frequencies[n] > 1)
                        {
                            dCDivideV += n * cdividev_frequencies[n];
                        }
                        else
                        {
                            uCDivideV += n;
                        }
                    }
                    if (uCDivideV != 0) duCDivideV = (double)dCDivideV / (double)uCDivideV;
                }

                long C = 0;
                long oC = 0;
                long eC = 0;
                long pC = 0;
                long cC = 0;
                long V = 0;
                long oV = 0;
                long eV = 0;
                long pV = 0;
                long cV = 0;
                long CPlusV = 0;
                long oCPlusV = 0;
                long eCPlusV = 0;
                long pCPlusV = 0;
                long cCPlusV = 0;
                long CMinusV = 0;
                long oCMinusV = 0;
                long eCMinusV = 0;
                long pCMinusV = 0;
                long cCMinusV = 0;
                long CMultiplyV = 0;
                long oCMultiplyV = 0;
                long eCMultiplyV = 0;
                long pCMultiplyV = 0;
                long cCMultiplyV = 0;
                double CDivideV = 0;
                double oCDivideV = 0;
                double eCDivideV = 0;
                double pCDivideV = 0;
                double cCDivideV = 0;
                foreach (Verse verse in m_maths_verses)
                {
                    long chapter_number = verse.Chapter.SortedNumber;
                    long verse_number = verse.NumberInChapter;
                    long cplusv = chapter_number + verse_number;
                    long cminusv = m_maths_abs_cminusv ? Math.Abs(chapter_number - verse_number) : (chapter_number - verse_number);
                    long cmultiplyv = chapter_number * verse_number;
                    double cdividev = m_maths_vdividec ? ((double)verse_number / (double)chapter_number) : ((double)chapter_number / (double)verse_number);

                    str.Append("\t");

                    C += chapter_number;
                    str.Append(chapter_number + "\t");
                    if (Numbers.IsOdd(chapter_number))
                    {
                        oC += chapter_number;
                        str.Append(chapter_number + "\t");
                        str.Append(0 + "\t");
                    }
                    else
                    {
                        eC += chapter_number;
                        str.Append(0 + "\t");
                        str.Append(chapter_number + "\t");
                    }
                    if (Numbers.IsPrime(chapter_number))
                    {
                        pC += chapter_number;
                        str.Append(chapter_number + "\t");
                        str.Append(0 + "\t");
                    }
                    else if (Numbers.IsComposite(chapter_number))
                    {
                        cC += chapter_number;
                        str.Append(0 + "\t");
                        str.Append(chapter_number + "\t");
                    }
                    else //if (chapter_number == 1)
                    {
                        str.Append(0 + "\t");
                        str.Append(0 + "\t");
                    }
                    if (c_frequencies != null)
                    {
                        if (c_frequencies.ContainsKey(chapter_number))
                        {
                            if (c_frequencies[chapter_number] > 1)
                            {
                                str.Append(chapter_number + "\t");
                                str.Append(0 + "\t");
                            }
                            else
                            {
                                str.Append(0 + "\t");
                                str.Append(chapter_number + "\t");
                            }
                        }
                    }
                    str.Append("\t");

                    V += verse_number;
                    str.Append(verse_number + "\t");
                    if (Numbers.IsOdd(verse_number))
                    {
                        oV += verse_number;
                        str.Append(verse_number + "\t");
                        str.Append(0 + "\t");
                    }
                    else
                    {
                        eV += verse_number;
                        str.Append(0 + "\t");
                        str.Append(verse_number + "\t");
                    }
                    if (Numbers.IsPrime(verse_number))
                    {
                        pV += verse_number;
                        str.Append(verse_number + "\t");
                        str.Append(0 + "\t");
                    }
                    else if (Numbers.IsComposite(verse_number))
                    {
                        cV += verse_number;
                        str.Append(0 + "\t");
                        str.Append(verse_number + "\t");
                    }
                    else //if (verse_count == 1)
                    {
                        str.Append(0 + "\t");
                        str.Append(0 + "\t");
                    }
                    if (v_frequencies != null)
                    {
                        if (v_frequencies.ContainsKey(verse_number))
                        {
                            if (v_frequencies[verse_number] > 1)
                            {
                                str.Append(verse_number + "\t");
                                str.Append(0 + "\t");
                            }
                            else
                            {
                                str.Append(0 + "\t");
                                str.Append(verse_number + "\t");
                            }
                        }
                    }
                    str.Append("\t");

                    CPlusV += cplusv;
                    str.Append(cplusv + "\t");
                    if (Numbers.IsOdd(cplusv))
                    {
                        oCPlusV += cplusv;
                        str.Append(cplusv + "\t");
                        str.Append(0 + "\t");
                    }
                    else
                    {
                        eCPlusV += cplusv;
                        str.Append(0 + "\t");
                        str.Append(cplusv + "\t");
                    }
                    if (Numbers.IsPrime(cplusv))
                    {
                        pCPlusV += cplusv;
                        str.Append(cplusv + "\t");
                        str.Append(0 + "\t");
                    }
                    else if (Numbers.IsComposite(cplusv))
                    {
                        cCPlusV += cplusv;
                        str.Append(0 + "\t");
                        str.Append(cplusv + "\t");
                    }
                    else //if (cplusv == 1)
                    {
                        str.Append(0 + "\t");
                        str.Append(0 + "\t");
                    }
                    if (cplusv_frequencies != null)
                    {
                        if (cplusv_frequencies.ContainsKey(cplusv))
                        {
                            if (cplusv_frequencies[cplusv] > 1)
                            {
                                str.Append(cplusv + "\t");
                                str.Append(0 + "\t");
                            }
                            else
                            {
                                str.Append(0 + "\t");
                                str.Append(cplusv + "\t");
                            }
                        }
                    }
                    str.Append("\t");

                    CMinusV += cminusv;
                    str.Append(cminusv + "\t");
                    if (Numbers.IsOdd(cminusv))
                    {
                        oCMinusV += cminusv;
                        str.Append(cminusv + "\t");
                        str.Append(0 + "\t");
                    }
                    else
                    {
                        eCMinusV += cminusv;
                        str.Append(0 + "\t");
                        str.Append(cminusv + "\t");
                    }
                    if (Numbers.IsPrime(cminusv))
                    {
                        pCMinusV += cminusv;
                        str.Append(cminusv + "\t");
                        str.Append(0 + "\t");
                    }
                    else if (Numbers.IsComposite(cminusv))
                    {
                        cCMinusV += cminusv;
                        str.Append(0 + "\t");
                        str.Append(cminusv + "\t");
                    }
                    else //if (cminusv == 1)
                    {
                        str.Append(0 + "\t");
                        str.Append(0 + "\t");
                    }
                    if (cminusv_frequencies != null)
                    {
                        if (cminusv_frequencies.ContainsKey(cminusv))
                        {
                            if (cminusv_frequencies[cminusv] > 1)
                            {
                                str.Append(cminusv + "\t");
                                str.Append(0 + "\t");
                            }
                            else
                            {
                                str.Append(0 + "\t");
                                str.Append(cminusv + "\t");
                            }
                        }
                    }
                    str.Append("\t");

                    CMultiplyV += cmultiplyv;
                    str.Append(cmultiplyv + "\t");
                    if (Numbers.IsOdd(cmultiplyv))
                    {
                        oCMultiplyV += cmultiplyv;
                        str.Append(cmultiplyv + "\t");
                        str.Append(0 + "\t");
                    }
                    else
                    {
                        eCMultiplyV += cmultiplyv;
                        str.Append(0 + "\t");
                        str.Append(cmultiplyv + "\t");
                    }
                    if (Numbers.IsPrime(cmultiplyv))
                    {
                        pCMultiplyV += cmultiplyv;
                        str.Append(cmultiplyv + "\t");
                        str.Append(0 + "\t");
                    }
                    else if (Numbers.IsComposite(cmultiplyv))
                    {
                        cCMultiplyV += cmultiplyv;
                        str.Append(0 + "\t");
                        str.Append(cmultiplyv + "\t");
                    }
                    else //if (cmultiplyv == 1)
                    {
                        str.Append(0 + "\t");
                        str.Append(0 + "\t");
                    }
                    if (cmultiplyv_frequencies != null)
                    {
                        if (cmultiplyv_frequencies.ContainsKey(cmultiplyv))
                        {
                            if (cmultiplyv_frequencies[cmultiplyv] > 1)
                            {
                                str.Append(cmultiplyv + "\t");
                                str.Append(0 + "\t");
                            }
                            else
                            {
                                str.Append(0 + "\t");
                                str.Append(cmultiplyv + "\t");
                            }
                        }
                    }
                    str.Append("\t");

                    CDivideV += cdividev;
                    str.Append(cdividev.ToString("0.0") + "\t");
                    if (Numbers.IsOdd((long)cdividev))
                    {
                        oCDivideV += cdividev;
                        str.Append(cdividev.ToString("0.0") + "\t");
                        str.Append(0 + "\t");
                    }
                    else
                    {
                        eCDivideV += cdividev;
                        str.Append(0 + "\t");
                        str.Append(cdividev.ToString("0.0") + "\t");
                    }
                    if (Numbers.IsPrime((long)cdividev))
                    {
                        pCDivideV += cdividev;
                        str.Append(cdividev.ToString("0.0") + "\t");
                        str.Append(0 + "\t");
                    }
                    else if (Numbers.IsComposite((long)cdividev))
                    {
                        cCDivideV += cdividev;
                        str.Append(0 + "\t");
                        str.Append(cdividev.ToString("0.0") + "\t");
                    }
                    else //if (cdividev == 1)
                    {
                        str.Append(0 + "\t");
                        str.Append(0 + "\t");
                    }
                    if (cdividev_frequencies != null)
                    {
                        if (cdividev_frequencies.ContainsKey((long)cdividev))
                        {
                            if (cdividev_frequencies[(long)cdividev] > 1)
                            {
                                str.Append(cdividev.ToString("0.0") + "\t");
                                str.Append(0 + "\t");
                            }
                            else
                            {
                                str.Append(0 + "\t");
                                str.Append(cdividev.ToString("0.0") + "\t");
                            }
                        }
                    }
                    str.Remove(str.Length - 1, 1);

                    str.AppendLine();
                }

                str.Append("Sum" + "\t");
                str.AppendLine(C + "\t" + oC + "\t" + eC + "\t" + pC + "\t" + cC + "\t" + dC + "\t" + uC + "\t" + "\t" +
                               V + "\t" + oV + "\t" + eV + "\t" + pV + "\t" + cV + "\t" + dV + "\t" + uV + "\t" + "\t" +
                               CPlusV + "\t" + oCPlusV + "\t" + eCPlusV + "\t" + pCPlusV + "\t" + cCPlusV + "\t" + dCPlusV + "\t" + uCPlusV + "\t" + "\t" +
                               CMinusV + "\t" + oCMinusV + "\t" + eCMinusV + "\t" + pCMinusV + "\t" + cCMinusV + "\t" + dCMinusV + "\t" + uCMinusV + "\t" + "\t" +
                               CMultiplyV + "\t" + oCMultiplyV + "\t" + eCMultiplyV + "\t" + pCMultiplyV + "\t" + cCMultiplyV + "\t" + dCMultiplyV + "\t" + uCMultiplyV + "\t" + "\t" +
                               CDivideV.ToString("0.0") + "\t" + oCDivideV.ToString("0.0") + "\t" + eCDivideV.ToString("0.0") + "\t" + pCDivideV.ToString("0.0") + "\t" + cCDivideV.ToString("0.0") + "\t" + dCDivideV.ToString("0.0") + "\t" + uCDivideV.ToString("0.0"));

                FileHelper.SaveText(filename, str.ToString());
                FileHelper.DisplayFile(filename);
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Distances
    ///////////////////////////////////////////////////////////////////////////////
    private int m_distances_divisor = DEFAULT_DIVISOR;
    private bool m_distances_update_global_divisor = false;
    private void DistancesDivisorNumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        m_distances_divisor = (int)DistancesDivisorNumericUpDown.Value;
        Verse verse = GetVerseAtCursor();
        if (verse != null)
        {
            UpdateVerseDistances(verse);
        }

        if (m_distances_update_global_divisor)
        {
            m_divisor = m_distances_divisor;
            DivisorValueLabel.Text = m_divisor.ToString();
        }
    }
    private void DistancesUpdateDivisorCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_distances_update_global_divisor = DistancesUpdateDivisorCheckBox.Checked;
        if (m_distances_update_global_divisor)
        {
            m_divisor = m_distances_divisor;
        }
        else
        {
            m_divisor = DEFAULT_DIVISOR;
        }
        DivisorValueLabel.Text = m_divisor.ToString();
    }
    private void DistancesInterestingNumbersEditLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            // display the InterestingNumbers.txt file for live editing using ISubscriber
            string filename = Globals.NUMBERS_FOLDER + "/" + "InterestingNumbers.txt";
            if (File.Exists(filename))
            {
                FileHelper.WaitForReady(filename);

                System.Diagnostics.Process.Start("Notepad.exe", filename);
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }

    private NumberScope m_distances_running_chapter_number_scope = NumberScope.Number;
    private NumberScope m_distances_running_verse_number_scope = NumberScope.Number;
    private NumberScope m_distances_running_word_number_scope = NumberScope.Number;
    private void DistancesRunningChapterNumberScopeLabel_Click(object sender, EventArgs e)
    {
        Verse verse = GetVerseAtCursor();
        if (verse != null)
        {
            switch (m_distances_running_chapter_number_scope)
            {
                case NumberScope.Number:
                default:
                    {
                        m_distances_running_chapter_number_scope = NumberScope.Number;
                        //DistancesRunningChapterNumberScopeLabel.Text = "Chapter numbers in Book";
                        //DistancesRunningChapterNumberScopeLabel.Refresh();
                    }
                    break;
            }
            UpdateVerseDistances(verse);
        }
    }
    private void DistancesRunningVerseNumberScopeLabel_Click(object sender, EventArgs e)
    {
        Verse verse = GetVerseAtCursor();
        if (verse != null)
        {
            switch (m_distances_running_verse_number_scope)
            {
                case NumberScope.Number:
                    {
                        m_distances_running_verse_number_scope = NumberScope.NumberInChapter;
                        DistancesRunningVerseNumberScopeLabel.Text = "Verse numbers in chapters";
                    }
                    break;
                case NumberScope.NumberInChapter:
                default:
                    {
                        m_distances_running_verse_number_scope = NumberScope.Number;
                        DistancesRunningVerseNumberScopeLabel.Text = "Verse numbers in Book";
                    }
                    break;
            }
            UpdateVerseDistances(verse);
        }
    }
    private void DistancesRunningWordNumberScopeLabel_Click(object sender, EventArgs e)
    {
        Verse verse = GetVerseAtCursor();
        if (verse != null)
        {
            switch (m_distances_running_word_number_scope)
            {
                case NumberScope.Number:
                    {
                        m_distances_running_word_number_scope = NumberScope.NumberInChapter;
                        DistancesRunningWordNumberScopeLabel.Text = "Word numbers in chapters";
                    }
                    break;
                case NumberScope.NumberInChapter:
                    {
                        m_distances_running_word_number_scope = NumberScope.NumberInVerse;
                        DistancesRunningWordNumberScopeLabel.Text = "Word numbers in verses";
                    }
                    break;
                case NumberScope.NumberInVerse:
                default:
                    {
                        m_distances_running_word_number_scope = NumberScope.Number;
                        DistancesRunningWordNumberScopeLabel.Text = "Word numbers in Book";
                    }
                    break;
            }
            UpdateVerseDistances(verse);
        }
    }
    private void UpdateDistancesOptions()
    {
        DistancesDivisorNumericUpDown.Value = m_distances_divisor;

        switch (m_distances_running_chapter_number_scope)
        {
            case NumberScope.Number:
            default:
                {
                    DistancesRunningVerseNumberScopeLabel.Text = "Chapter numbers in Book";
                }
                break;
        }

        switch (m_distances_running_verse_number_scope)
        {
            case NumberScope.Number:
                {
                    DistancesRunningVerseNumberScopeLabel.Text = "Verse numbers in Book";
                }
                break;
            case NumberScope.NumberInChapter:
            default:
                {
                    DistancesRunningVerseNumberScopeLabel.Text = "Verse numbers in chapters";
                }
                break;
        }

        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    DistancesRunningWordNumberScopeLabel.Text = "Word numbers in Book";
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    DistancesRunningWordNumberScopeLabel.Text = "Word numbers in chapters";
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    DistancesRunningWordNumberScopeLabel.Text = "Word numbers in verses";
                }
                break;
        }
    }

    //// m_selection_mode and Selection.Scope = Chapter
    // should pass Selection not Chapter to these methods
    private long GetDistancesVerseBeforeChapter(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    for (int i = 0; i < chapter.SortedNumber - 1; i++)
                    {
                        result += chapter.Book.Chapters[i].Verses.Count;
                    }
                }
            }
        }
        return result;
    }
    private long GetDistancesVerseAfterChapter(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    for (int i = chapter.SortedNumber; i < chapter.Book.Chapters.Count; i++)
                    {
                        result += chapter.Book.Chapters[i].Verses.Count;
                    }
                }
            }
        }
        return result;
    }
    private long GetDistancesWordBeforeChapter(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    for (int i = 0; i < chapter.SortedNumber - 1; i++)
                    {
                        result += chapter.Book.Chapters[i].WordCount;
                    }
                }
            }
        }
        return result;
    }
    private long GetDistancesWordAfterChapter(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    for (int i = chapter.SortedNumber; i < chapter.Book.Chapters.Count; i++)
                    {
                        result += chapter.Book.Chapters[i].WordCount;
                    }
                }
            }
        }
        return result;
    }
    private long GetDistancesVerseBeforeChapterRunningTotal(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    switch (m_distances_running_verse_number_scope)
                    {
                        case NumberScope.Number:
                            {
                                foreach (Chapter c in chapter.Book.Chapters)
                                {
                                    if (c == chapter) break;
                                    foreach (Verse verse in c.Verses)
                                    {
                                        result += verse.Number;
                                    }
                                }
                            }
                            break;
                        case NumberScope.NumberInChapter:
                        default:
                            {
                                foreach (Chapter c in chapter.Book.Chapters)
                                {
                                    if (c == chapter) break;
                                    foreach (Verse verse in c.Verses)
                                    {
                                        result += verse.NumberInChapter;
                                    }
                                }
                            }
                            break;
                    }
                }
            }
        }
        return result;
    }
    private long GetDistancesVerseAfterChapterRunningTotal(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    switch (m_distances_running_verse_number_scope)
                    {
                        case NumberScope.Number:
                            {
                                for (int i = chapter.SortedNumber; i < chapter.Book.Chapters.Count; i++)
                                {
                                    foreach (Verse verse in chapter.Book.Chapters[i].Verses)
                                    {
                                        result += verse.Number;
                                    }
                                }
                            }
                            break;
                        case NumberScope.NumberInChapter:
                        default:
                            {
                                for (int i = chapter.SortedNumber; i < chapter.Book.Chapters.Count; i++)
                                {
                                    foreach (Verse verse in chapter.Book.Chapters[i].Verses)
                                    {
                                        result += verse.NumberInChapter;
                                    }
                                }
                            }
                            break;
                    }
                }
            }
        }
        return result;
    }
    private long GetDistancesWordBeforeChapterRunningTotal(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    switch (m_distances_running_word_number_scope)
                    {
                        case NumberScope.Number:
                            {
                                foreach (Chapter c in chapter.Book.Chapters)
                                {
                                    if (c == chapter) break;
                                    foreach (Verse verse in c.Verses)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            result += word.Number;
                                        }
                                    }
                                }
                            }
                            break;
                        case NumberScope.NumberInChapter:
                            {
                                foreach (Chapter c in chapter.Book.Chapters)
                                {
                                    if (c == chapter) break;
                                    foreach (Verse verse in c.Verses)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            result += word.NumberInChapter;
                                        }
                                    }
                                }
                            }
                            break;
                        case NumberScope.NumberInVerse:
                        default:
                            {
                                foreach (Chapter c in chapter.Book.Chapters)
                                {
                                    if (c == chapter) break;
                                    foreach (Verse verse in c.Verses)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            result += word.NumberInVerse;
                                        }
                                    }
                                }
                            }
                            break;
                    }
                }
            }
        }
        return result;
    }
    private long GetDistancesWordAfterChapterRunningTotal(Chapter chapter)
    {
        long result = 0;
        if (chapter != null)
        {
            if (chapter.Book != null)
            {
                if (chapter.Book.Chapters != null)
                {
                    switch (m_distances_running_word_number_scope)
                    {
                        case NumberScope.Number:
                            {
                                for (int i = chapter.SortedNumber; i < chapter.Book.Chapters.Count; i++)
                                {
                                    foreach (Verse verse in chapter.Book.Chapters[i].Verses)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            result += word.Number;
                                        }
                                    }
                                }
                            }
                            break;
                        case NumberScope.NumberInChapter:
                            {
                                for (int i = chapter.SortedNumber; i < chapter.Book.Chapters.Count; i++)
                                {
                                    foreach (Verse verse in chapter.Book.Chapters[i].Verses)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            result += word.NumberInChapter;
                                        }
                                    }
                                }
                            }
                            break;
                        case NumberScope.NumberInVerse:
                        default:
                            {
                                for (int i = chapter.SortedNumber; i < chapter.Book.Chapters.Count; i++)
                                {
                                    foreach (Verse verse in chapter.Book.Chapters[i].Verses)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            result += word.NumberInVerse;
                                        }
                                    }
                                }
                            }
                            break;
                    }
                }
            }
        }
        return result;
    }

    //// verse or word clicked
    // get running total of chapter numbers
    private long GetDistancesChapterBeforeWithinBookRunningTotal(Chapter chapter)
    {
        if (chapter == null) return 0;

        long n = chapter.SortedNumber - 1;
        return ((n * (n + 1)) / 2);
    }
    private long GetDistancesChapterWithinBookRunningTotal(Chapter chapter)
    {
        if (chapter == null) return 0;

        long n = chapter.SortedNumber;
        return ((n * (n + 1)) / 2);
    }
    private long GetDistancesChapterAfterWithinBookRunningTotal(Chapter chapter)
    {
        if (chapter == null) return 0;
        if (chapter.Book == null) return 0;
        if (chapter.Book.Chapters == null) return 0;

        long n = chapter.SortedNumber;
        long z = chapter.Book.Chapters.Count;
        return (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));
    }
    // get running total of verse numbers
    private long GetDistancesVerseBeforeWithinBookRunningTotal(Verse verse)
    {
        if (verse == null) return 0;
        if (verse.Book == null) return 0;
        if (verse.Chapter == null) return 0;
        if (verse.Book.Chapters == null) return 0;

        long result = 0;
        switch (m_distances_running_verse_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = verse.Number - 1;
                    result = ((n * (n + 1)) / 2);
                }
                break;
            case NumberScope.NumberInChapter:
            default:
                {
                    result = GetDistancesVerseBeforeChapterRunningTotal(verse.Chapter);

                    foreach (Verse v in verse.Chapter.Verses)
                    {
                        if (v == verse) break;
                        result += v.NumberInChapter;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesVerseWithinBookRunningTotal(Verse verse)
    {
        if (verse == null) return 0;
        if (verse.Book == null) return 0;
        if (verse.Chapter == null) return 0;
        if (verse.Book.Chapters == null) return 0;

        long result = 0;
        switch (m_distances_running_verse_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = verse.Number;
                    result = ((n * (n + 1)) / 2);
                }
                break;
            case NumberScope.NumberInChapter:
            default:
                {
                    result = GetDistancesVerseBeforeChapterRunningTotal(verse.Chapter);

                    foreach (Verse v in verse.Chapter.Verses)
                    {
                        result += v.NumberInChapter;
                        if (v == verse) break;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesVerseAfterWithinBookRunningTotal(Verse verse)
    {
        if (verse == null) return 0;
        if (verse.Book == null) return 0;
        if (verse.Book.Verses == null) return 0;
        if (verse.Chapter == null) return 0;
        if (verse.Chapter.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_verse_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = verse.Number;
                    long z = verse.Book.Verses.Count;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));
                }
                break;
            case NumberScope.NumberInChapter:
            default:
                {
                    long n = verse.NumberInChapter;
                    long z = verse.Chapter.Verses.Count;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));

                    result += GetDistancesVerseAfterChapterRunningTotal(verse.Chapter);
                }
                break;
        }
        return result;
    }
    private long GetDistancesVerseBeforeWithinChapterRunningTotal(Verse verse)
    {
        if (verse == null) return 0;
        if (verse.Book == null) return 0;
        if (verse.Chapter == null) return 0;
        if (verse.Book.Chapters == null) return 0;

        long result = 0;
        switch (m_distances_running_verse_number_scope)
        {
            case NumberScope.Number:
                {
                    foreach (Verse v in verse.Chapter.Verses)
                    {
                        if (v == verse) break;
                        result += v.Number;
                    }
                }
                break;
            case NumberScope.NumberInChapter:
            default:
                {
                    foreach (Verse v in verse.Chapter.Verses)
                    {
                        if (v == verse) break;
                        result += v.NumberInChapter;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesVerseWithinChapterRunningTotal(Verse verse)
    {
        if (verse == null) return 0;
        if (verse.Book == null) return 0;
        if (verse.Chapter == null) return 0;
        if (verse.Book.Chapters == null) return 0;

        long result = 0;
        switch (m_distances_running_verse_number_scope)
        {
            case NumberScope.Number:
                {
                    foreach (Verse v in verse.Chapter.Verses)
                    {
                        result += v.Number;
                        if (v == verse) break;
                    }
                }
                break;
            case NumberScope.NumberInChapter:
            default:
                {
                    foreach (Verse v in verse.Chapter.Verses)
                    {
                        result += v.NumberInChapter;
                        if (v == verse) break;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesVerseAfterWithinChapterRunningTotal(Verse verse)
    {
        if (verse == null) return 0;
        if (verse.Book == null) return 0;
        if (verse.Book.Verses == null) return 0;
        if (verse.Chapter == null) return 0;
        if (verse.Chapter.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_verse_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = verse.Number;
                    long z = verse.Chapter.Verses[verse.Chapter.Verses.Count - 1].Number;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));
                }
                break;
            case NumberScope.NumberInChapter:
            default:
                {
                    long n = verse.NumberInChapter;
                    long z = verse.Chapter.Verses.Count;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));
                }
                break;
        }
        return result;
    }
    // get running total of word numbers
    private long GetDistancesWordBeforeWithinBookRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Chapter == null) return 0;
        if (word.Verse.Chapter.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = word.Number - 1;
                    result = ((n * (n + 1)) / 2);
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    result = GetDistancesWordBeforeChapterRunningTotal(word.Verse.Chapter);

                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            if (w == word) break;
                            result += w.NumberInChapter;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    result = GetDistancesWordBeforeChapterRunningTotal(word.Verse.Chapter);

                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            if (w == word) break;
                            result += w.NumberInVerse;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordWithinBookRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Chapter == null) return 0;
        if (word.Verse.Chapter.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = word.Number;
                    result = ((n * (n + 1)) / 2);
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    result = GetDistancesWordBeforeChapterRunningTotal(word.Verse.Chapter);

                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            result += w.NumberInChapter;
                            if (w == word) break;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    result = GetDistancesWordBeforeChapterRunningTotal(word.Verse.Chapter);

                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            result += w.NumberInVerse;
                            if (w == word) break;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordAfterWithinBookRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Chapter == null) return 0;
        if (word.Verse.Chapter.Verses == null) return 0;
        if (word.Verse.Book == null) return 0;
        if (word.Verse.Book.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = word.Number;
                    Verse last_verse = word.Verse.Book.Verses[word.Verse.Book.Verses.Count - 1];
                    long z = last_verse.Words[last_verse.Words.Count - 1].Number;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    long n = word.NumberInChapter;
                    long z = word.Verse.Chapter.WordCount;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));

                    result += GetDistancesWordAfterChapterRunningTotal(word.Verse.Chapter);
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    long n = word.NumberInVerse;
                    long z = word.Verse.Words.Count;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));

                    for (int i = word.Verse.NumberInChapter; i < word.Verse.Chapter.Verses.Count; i++)
                    {
                        foreach (Word w in word.Verse.Chapter.Verses[i].Words)
                        {
                            result += w.NumberInVerse;
                        }
                    }

                    result += GetDistancesWordAfterChapterRunningTotal(word.Verse.Chapter);
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordBeforeWithinChapterRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Chapter == null) return 0;
        if (word.Verse.Chapter.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            if (w == word) break;
                            result += w.Number;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            if (w == word) break;
                            result += w.NumberInChapter;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            if (w == word) break;
                            result += w.NumberInVerse;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordWithinChapterRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Chapter == null) return 0;
        if (word.Verse.Chapter.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            result += w.Number;
                            if (w == word) break;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            result += w.NumberInChapter;
                            if (w == word) break;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    foreach (Verse v in word.Verse.Chapter.Verses)
                    {
                        foreach (Word w in v.Words)
                        {
                            result += w.NumberInVerse;
                            if (w == word) break;
                        }
                        if (v == word.Verse) break;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordAfterWithinChapterRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Chapter == null) return 0;
        if (word.Verse.Chapter.Verses == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    long n = word.Number;
                    Verse last_verse = word.Verse.Chapter.Verses[word.Verse.Chapter.Verses.Count - 1];
                    long z = last_verse.Words[last_verse.Words.Count - 1].Number;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    long n = word.NumberInChapter;
                    long z = word.Verse.Chapter.WordCount;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    long n = word.NumberInVerse;
                    long z = word.Verse.Words.Count;
                    result = (((z * (z + 1)) / 2) - ((n * (n + 1)) / 2));

                    for (int i = word.Verse.NumberInChapter; i < word.Verse.Chapter.Verses.Count; i++)
                    {
                        foreach (Word w in word.Verse.Chapter.Verses[i].Words)
                        {
                            result += w.NumberInVerse;
                        }
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordBeforeWithinVerseRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Words == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    foreach (Word w in word.Verse.Words)
                    {
                        if (w == word) break;
                        result += w.Number;
                    }
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    foreach (Word w in word.Verse.Words)
                    {
                        if (w == word) break;
                        result += w.NumberInChapter;
                    }
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    foreach (Word w in word.Verse.Words)
                    {
                        if (w == word) break;
                        result += w.NumberInVerse;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordWithinVerseRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Words == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    foreach (Word w in word.Verse.Words)
                    {
                        result += w.Number;
                        if (w == word) break;
                    }
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    foreach (Word w in word.Verse.Words)
                    {
                        result += w.NumberInChapter;
                        if (w == word) break;
                    }
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    foreach (Word w in word.Verse.Words)
                    {
                        result += w.NumberInVerse;
                        if (w == word) break;
                    }
                }
                break;
        }
        return result;
    }
    private long GetDistancesWordAfterWithinVerseRunningTotal(Word word)
    {
        if (word == null) return 0;
        if (word.Verse == null) return 0;
        if (word.Verse.Words == null) return 0;

        long result = 0;
        switch (m_distances_running_word_number_scope)
        {
            case NumberScope.Number:
                {
                    for (int i = word.NumberInVerse; i < word.Verse.Words.Count; i++)
                    {
                        result += word.Verse.Words[i].Number;
                    }
                }
                break;
            case NumberScope.NumberInChapter:
                {
                    for (int i = word.NumberInVerse; i < word.Verse.Words.Count; i++)
                    {
                        result += word.Verse.Words[i].NumberInChapter;
                    }
                }
                break;
            case NumberScope.NumberInVerse:
            default:
                {
                    for (int i = word.NumberInVerse; i < word.Verse.Words.Count; i++)
                    {
                        result += word.Verse.Words[i].NumberInVerse;
                    }
                }
                break;
        }
        return result;
    }

    // display the results
    private void UpdateVerseDistances(Verse verse)
    {
        if (TabControl.SelectedTab == DistancesTabPage)
        {
            if (verse != null)
            {
                if (verse.Book != null)
                {
                    if (verse.Book.Chapters != null)
                    {
                        if (verse.Book.Verses != null)
                        {
                            bool chapter_selection_mode = true;
                            if (m_client != null)
                            {
                                if (m_client.Selection != null)
                                {
                                    chapter_selection_mode =
                                        m_selection_mode
                                        &&
                                        (
                                            m_client.Selection.Scope != SelectionScope.Verse &&
                                            m_client.Selection.Scope != SelectionScope.Word &&
                                            m_client.Selection.Scope != SelectionScope.Letter
                                        );
                                }
                            }

                            long chapter_count = verse.Book.Chapters.Count;
                            long verse_count = verse.Book.Verses.Count;
                            long word_count = 0;
                            foreach (Verse v in verse.Book.Verses)
                            {
                                word_count += v.Words.Count;
                            }

                            int char_index = m_active_textbox.SelectionStart;
                            int line_index = m_active_textbox.GetLineFromCharIndex(char_index);
                            Word word = GetWordAtChar(char_index);
                            if (word != null)
                            {
                                // variables
                                long DistancesChapterBeforeWithinBook = (verse.Chapter.SortedNumber - 1);
                                long DistancesChapterWithinBook = (verse.Chapter.SortedNumber);
                                long DistancesChapterAfterWithinBook = (chapter_count - verse.Chapter.SortedNumber);
                                long DistancesChapterDifferenceWithinBook = DistancesChapterAfterWithinBook - DistancesChapterBeforeWithinBook;
                                long DistancesVerseBeforeWithinBook = chapter_selection_mode ? GetDistancesVerseBeforeChapter(verse.Chapter) : (verse.Number - 1);
                                long DistancesVerseWithinBook = chapter_selection_mode ? 0 : (verse.Number);
                                long DistancesVerseAfterWithinBook = chapter_selection_mode ? GetDistancesVerseAfterChapter(verse.Chapter) : (verse_count - verse.Number);
                                long DistancesVerseDifferenceWithinBook = DistancesVerseAfterWithinBook - DistancesVerseBeforeWithinBook;
                                long DistancesVerseBeforeWithinChapter = chapter_selection_mode ? 0 : (verse.NumberInChapter - 1);
                                long DistancesVerseWithinChapter = chapter_selection_mode ? 0 : (verse.NumberInChapter);
                                long DistancesVerseAfterWithinChapter = chapter_selection_mode ? 0 : (verse.Chapter.Verses.Count - verse.NumberInChapter);
                                long DistancesVerseDifferenceWithinChapter = DistancesVerseAfterWithinChapter - DistancesVerseBeforeWithinChapter;
                                long DistancesWordBeforeWithinBook = chapter_selection_mode ? GetDistancesWordBeforeChapter(verse.Chapter) : (word.Number - 1);
                                long DistancesWordWithinBook = chapter_selection_mode ? 0 : (word.Number);
                                long DistancesWordAfterWithinBook = chapter_selection_mode ? GetDistancesWordAfterChapter(verse.Chapter) : (word_count - word.Number);
                                long DistancesWordDifferenceWithinBook = DistancesWordAfterWithinBook - DistancesWordBeforeWithinBook;
                                long DistancesWordBeforeWithinChapter = chapter_selection_mode ? 0 : (word.NumberInChapter - 1);
                                long DistancesWordWithinChapter = chapter_selection_mode ? 0 : (word.NumberInChapter);
                                long DistancesWordAfterWithinChapter = chapter_selection_mode ? 0 : (verse.Chapter.WordCount - word.NumberInChapter);
                                long DistancesWordDifferenceWithinChapter = DistancesWordAfterWithinChapter - DistancesWordBeforeWithinChapter;
                                long DistancesWordBeforeWithinVerse = chapter_selection_mode ? 0 : (word.NumberInVerse - 1);
                                long DistancesWordWithinVerse = chapter_selection_mode ? 0 : (word.NumberInVerse);
                                long DistancesWordAfterWithinVerse = chapter_selection_mode ? 0 : (verse.Words.Count - word.NumberInVerse);
                                long DistancesWordDifferenceWithinVerse = DistancesWordAfterWithinVerse - DistancesWordBeforeWithinVerse;
                                // Running totals ...
                                long DistancesChapterBeforeWithinBookRunningTotal = GetDistancesChapterBeforeWithinBookRunningTotal(verse.Chapter);
                                long DistancesChapterWithinBookRunningTotal = GetDistancesChapterWithinBookRunningTotal(verse.Chapter);
                                long DistancesChapterAfterWithinBookRunningTotal = GetDistancesChapterAfterWithinBookRunningTotal(verse.Chapter);
                                long DistancesChapterDifferenceWithinBookRunningTotal = DistancesChapterAfterWithinBookRunningTotal - DistancesChapterBeforeWithinBookRunningTotal;
                                long DistancesVerseBeforeWithinBookRunningTotal = chapter_selection_mode ? GetDistancesVerseBeforeChapterRunningTotal(verse.Chapter) : GetDistancesVerseBeforeWithinBookRunningTotal(verse);
                                long DistancesVerseWithinBookRunningTotal = chapter_selection_mode ? 0 : GetDistancesVerseWithinBookRunningTotal(verse);
                                long DistancesVerseAfterWithinBookRunningTotal = chapter_selection_mode ? GetDistancesVerseAfterChapterRunningTotal(verse.Chapter) : GetDistancesVerseAfterWithinBookRunningTotal(verse);
                                long DistancesVerseDifferenceWithinBookRunningTotal = DistancesVerseAfterWithinBookRunningTotal - DistancesVerseBeforeWithinBookRunningTotal;
                                long DistancesVerseBeforeWithinChapterRunningTotal = chapter_selection_mode ? 0 : GetDistancesVerseBeforeWithinChapterRunningTotal(verse);
                                long DistancesVerseWithinChapterRunningTotal = chapter_selection_mode ? 0 : GetDistancesVerseWithinChapterRunningTotal(verse);
                                long DistancesVerseAfterWithinChapterRunningTotal = chapter_selection_mode ? 0 : GetDistancesVerseAfterWithinChapterRunningTotal(verse);
                                long DistancesVerseDifferenceWithinChapterRunningTotal = DistancesVerseAfterWithinChapterRunningTotal - DistancesVerseBeforeWithinChapterRunningTotal;
                                long DistancesWordBeforeWithinBookRunningTotal = chapter_selection_mode ? GetDistancesWordBeforeChapterRunningTotal(verse.Chapter) : GetDistancesWordBeforeWithinBookRunningTotal(word);
                                long DistancesWordWithinBookRunningTotal = chapter_selection_mode ? 0 : GetDistancesWordWithinBookRunningTotal(word);
                                long DistancesWordAfterWithinBookRunningTotal = chapter_selection_mode ? GetDistancesWordAfterChapterRunningTotal(verse.Chapter) : GetDistancesWordAfterWithinBookRunningTotal(word);
                                long DistancesWordDifferenceWithinBookRunningTotal = DistancesWordAfterWithinBookRunningTotal - DistancesWordBeforeWithinBookRunningTotal;
                                long DistancesWordBeforeWithinChapterRunningTotal = chapter_selection_mode ? 0 : GetDistancesWordBeforeWithinChapterRunningTotal(word);
                                long DistancesWordWithinChapterRunningTotal = chapter_selection_mode ? 0 : GetDistancesWordWithinChapterRunningTotal(word);
                                long DistancesWordAfterWithinChapterRunningTotal = chapter_selection_mode ? 0 : GetDistancesWordAfterWithinChapterRunningTotal(word);
                                long DistancesWordDifferenceWithinChapterRunningTotal = DistancesWordAfterWithinChapterRunningTotal - DistancesWordBeforeWithinChapterRunningTotal;
                                long DistancesWordBeforeWithinVerseRunningTotal = chapter_selection_mode ? 0 : GetDistancesWordBeforeWithinVerseRunningTotal(word);
                                long DistancesWordWithinVerseRunningTotal = chapter_selection_mode ? 0 : GetDistancesWordWithinVerseRunningTotal(word);
                                long DistancesWordAfterWithinVerseRunningTotal = chapter_selection_mode ? 0 : GetDistancesWordAfterWithinVerseRunningTotal(word);
                                long DistancesWordDifferenceWithinVerseRunningTotal = DistancesWordAfterWithinVerseRunningTotal - DistancesWordBeforeWithinVerseRunningTotal;

                                // .Text
                                DistancesChapterBeforeWithinBookTextBox.Text = DistancesChapterBeforeWithinBook.ToString();
                                DistancesChapterWithinBookTextBox.Text = DistancesChapterWithinBook.ToString();
                                DistancesChapterAfterWithinBookTextBox.Text = DistancesChapterAfterWithinBook.ToString();
                                DistancesChapterDifferenceWithinBookTextBox.Text = DistancesChapterDifferenceWithinBook.ToString();
                                DistancesVerseBeforeWithinBookTextBox.Text = DistancesVerseBeforeWithinBook.ToString();
                                DistancesVerseWithinBookTextBox.Text = chapter_selection_mode ? "" : DistancesVerseWithinBook.ToString();
                                DistancesVerseAfterWithinBookTextBox.Text = DistancesVerseAfterWithinBook.ToString();
                                DistancesVerseDifferenceWithinBookTextBox.Text = DistancesVerseDifferenceWithinBook.ToString();
                                DistancesVerseBeforeWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesVerseBeforeWithinChapter.ToString();
                                DistancesVerseWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesVerseWithinChapter.ToString();
                                DistancesVerseAfterWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesVerseAfterWithinChapter.ToString();
                                DistancesVerseDifferenceWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesVerseDifferenceWithinChapter.ToString();
                                DistancesWordBeforeWithinBookTextBox.Text = DistancesWordBeforeWithinBook.ToString();
                                DistancesWordWithinBookTextBox.Text = chapter_selection_mode ? "" : DistancesWordWithinBook.ToString();
                                DistancesWordAfterWithinBookTextBox.Text = DistancesWordAfterWithinBook.ToString();
                                DistancesWordDifferenceWithinBookTextBox.Text = DistancesWordDifferenceWithinBook.ToString();
                                DistancesWordBeforeWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesWordBeforeWithinChapter.ToString();
                                DistancesWordWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesWordWithinChapter.ToString();
                                DistancesWordAfterWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesWordAfterWithinChapter.ToString();
                                DistancesWordDifferenceWithinChapterTextBox.Text = chapter_selection_mode ? "" : DistancesWordDifferenceWithinChapter.ToString();
                                DistancesWordBeforeWithinVerseTextBox.Text = chapter_selection_mode ? "" : DistancesWordBeforeWithinVerse.ToString();
                                DistancesWordWithinVerseTextBox.Text = chapter_selection_mode ? "" : DistancesWordWithinVerse.ToString();
                                DistancesWordAfterWithinVerseTextBox.Text = chapter_selection_mode ? "" : DistancesWordAfterWithinVerse.ToString();
                                DistancesWordDifferenceWithinVerseTextBox.Text = chapter_selection_mode ? "" : DistancesWordDifferenceWithinVerse.ToString();
                                // Running totals ...
                                DistancesChapterBeforeWithinBookRunningTotalTextBox.Text = DistancesChapterBeforeWithinBookRunningTotal.ToString();
                                DistancesChapterWithinBookRunningTotalTextBox.Text = DistancesChapterWithinBookRunningTotal.ToString();
                                DistancesChapterAfterWithinBookRunningTotalTextBox.Text = DistancesChapterAfterWithinBookRunningTotal.ToString();
                                DistancesChapterDifferenceWithinBookRunningTotalTextBox.Text = DistancesChapterDifferenceWithinBookRunningTotal.ToString();
                                DistancesVerseBeforeWithinBookRunningTotalTextBox.Text = DistancesVerseBeforeWithinBookRunningTotal.ToString();
                                DistancesVerseWithinBookRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesVerseWithinBookRunningTotal.ToString();
                                DistancesVerseAfterWithinBookRunningTotalTextBox.Text = DistancesVerseAfterWithinBookRunningTotal.ToString();
                                DistancesVerseDifferenceWithinBookRunningTotalTextBox.Text = DistancesVerseDifferenceWithinBookRunningTotal.ToString();
                                DistancesVerseBeforeWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesVerseBeforeWithinChapterRunningTotal.ToString();
                                DistancesVerseWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesVerseWithinChapterRunningTotal.ToString();
                                DistancesVerseAfterWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesVerseAfterWithinChapterRunningTotal.ToString();
                                DistancesVerseDifferenceWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesVerseDifferenceWithinChapterRunningTotal.ToString();
                                DistancesWordBeforeWithinBookRunningTotalTextBox.Text = DistancesWordBeforeWithinBookRunningTotal.ToString();
                                DistancesWordWithinBookRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordWithinBookRunningTotal.ToString();
                                DistancesWordAfterWithinBookRunningTotalTextBox.Text = DistancesWordAfterWithinBookRunningTotal.ToString();
                                DistancesWordDifferenceWithinBookRunningTotalTextBox.Text = DistancesWordDifferenceWithinBookRunningTotal.ToString();
                                DistancesWordBeforeWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordBeforeWithinChapterRunningTotal.ToString();
                                DistancesWordWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordWithinChapterRunningTotal.ToString();
                                DistancesWordAfterWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordAfterWithinChapterRunningTotal.ToString();
                                DistancesWordDifferenceWithinChapterRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordDifferenceWithinChapterRunningTotal.ToString();
                                DistancesWordBeforeWithinVerseRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordBeforeWithinVerseRunningTotal.ToString();
                                DistancesWordWithinVerseRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordWithinVerseRunningTotal.ToString();
                                DistancesWordAfterWithinVerseRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordAfterWithinVerseRunningTotal.ToString();
                                DistancesWordDifferenceWithinVerseRunningTotalTextBox.Text = chapter_selection_mode ? "" : DistancesWordDifferenceWithinVerseRunningTotal.ToString();

                                // .ForeColor
                                DistancesChapterBeforeWithinBookTextBox.ForeColor = GetNumberTypeColor(DistancesChapterBeforeWithinBook);
                                DistancesChapterWithinBookTextBox.ForeColor = GetNumberTypeColor(DistancesChapterWithinBook);
                                DistancesChapterAfterWithinBookTextBox.ForeColor = GetNumberTypeColor(DistancesChapterAfterWithinBook);
                                DistancesChapterDifferenceWithinBookTextBox.ForeColor = GetNumberTypeColor(DistancesChapterDifferenceWithinBook);
                                DistancesVerseBeforeWithinBookTextBox.ForeColor = GetNumberTypeColor(DistancesVerseBeforeWithinBook);
                                DistancesVerseWithinBookTextBox.ForeColor = GetNumberTypeColor(DistancesVerseWithinBook);
                                DistancesVerseAfterWithinBookTextBox.ForeColor = GetNumberTypeColor(DistancesVerseAfterWithinBook);
                                DistancesVerseDifferenceWithinBookTextBox.ForeColor = GetNumberTypeColor(DistancesVerseDifferenceWithinBook);
                                DistancesVerseBeforeWithinChapterTextBox.ForeColor = GetNumberTypeColor(DistancesVerseBeforeWithinChapter);
                                DistancesVerseWithinChapterTextBox.ForeColor = GetNumberTypeColor(DistancesVerseWithinChapter);
                                DistancesVerseAfterWithinChapterTextBox.ForeColor = GetNumberTypeColor(DistancesVerseAfterWithinChapter);
                                DistancesVerseDifferenceWithinChapterTextBox.ForeColor = GetNumberTypeColor(DistancesVerseDifferenceWithinChapter);
                                DistancesWordBeforeWithinBookTextBox.ForeColor = GetNumberTypeColor(DistancesWordBeforeWithinBook);
                                DistancesWordWithinBookTextBox.ForeColor = GetNumberTypeColor(DistancesWordWithinBook);
                                DistancesWordAfterWithinBookTextBox.ForeColor = GetNumberTypeColor(DistancesWordAfterWithinBook);
                                DistancesWordDifferenceWithinBookTextBox.ForeColor = GetNumberTypeColor(DistancesWordDifferenceWithinBook);
                                DistancesWordBeforeWithinChapterTextBox.ForeColor = GetNumberTypeColor(DistancesWordBeforeWithinChapter);
                                DistancesWordWithinChapterTextBox.ForeColor = GetNumberTypeColor(DistancesWordWithinChapter);
                                DistancesWordAfterWithinChapterTextBox.ForeColor = GetNumberTypeColor(DistancesWordAfterWithinChapter);
                                DistancesWordDifferenceWithinChapterTextBox.ForeColor = GetNumberTypeColor(DistancesWordDifferenceWithinChapter);
                                DistancesWordBeforeWithinVerseTextBox.ForeColor = GetNumberTypeColor(DistancesWordBeforeWithinVerse);
                                DistancesWordWithinVerseTextBox.ForeColor = GetNumberTypeColor(DistancesWordWithinVerse);
                                DistancesWordAfterWithinVerseTextBox.ForeColor = GetNumberTypeColor(DistancesWordAfterWithinVerse);
                                DistancesWordDifferenceWithinVerseTextBox.ForeColor = GetNumberTypeColor(DistancesWordDifferenceWithinVerse);
                                // Running totals ...
                                DistancesChapterBeforeWithinBookRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesChapterBeforeWithinBookRunningTotal);
                                DistancesChapterWithinBookRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesChapterWithinBookRunningTotal);
                                DistancesChapterAfterWithinBookRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesChapterAfterWithinBookRunningTotal);
                                DistancesChapterDifferenceWithinBookRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesChapterDifferenceWithinBookRunningTotal);
                                DistancesVerseBeforeWithinBookRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesVerseBeforeWithinBookRunningTotal);
                                DistancesVerseWithinBookRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesVerseWithinBookRunningTotal);
                                DistancesVerseAfterWithinBookRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesVerseAfterWithinBookRunningTotal);
                                DistancesVerseDifferenceWithinBookRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesVerseDifferenceWithinBookRunningTotal);
                                DistancesVerseBeforeWithinChapterRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesVerseBeforeWithinChapterRunningTotal);
                                DistancesVerseWithinChapterRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesVerseWithinChapterRunningTotal);
                                DistancesVerseAfterWithinChapterRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesVerseAfterWithinChapterRunningTotal);
                                DistancesVerseDifferenceWithinChapterRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesVerseDifferenceWithinChapterRunningTotal);
                                DistancesWordBeforeWithinBookRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesWordBeforeWithinBookRunningTotal);
                                DistancesWordWithinBookRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesWordWithinBookRunningTotal);
                                DistancesWordAfterWithinBookRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesWordAfterWithinBookRunningTotal);
                                DistancesWordDifferenceWithinBookRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesWordDifferenceWithinBookRunningTotal);
                                DistancesWordBeforeWithinChapterRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesWordBeforeWithinChapterRunningTotal);
                                DistancesWordWithinChapterRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesWordWithinChapterRunningTotal);
                                DistancesWordAfterWithinChapterRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesWordAfterWithinChapterRunningTotal);
                                DistancesWordDifferenceWithinChapterRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesWordDifferenceWithinChapterRunningTotal);
                                DistancesWordBeforeWithinVerseRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesWordBeforeWithinVerseRunningTotal);
                                DistancesWordWithinVerseRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesWordWithinVerseRunningTotal);
                                DistancesWordAfterWithinVerseRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesWordAfterWithinVerseRunningTotal);
                                DistancesWordDifferenceWithinVerseRunningTotalTextBox.ForeColor = GetNumberTypeColor(DistancesWordDifferenceWithinVerseRunningTotal);

                                // Divisor coloring
                                DistancesChapterBeforeWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesChapterBeforeWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesChapterWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesChapterWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesChapterAfterWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesChapterAfterWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesChapterDifferenceWithinBookTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesChapterDifferenceWithinBook), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseBeforeWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesVerseBeforeWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesVerseWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseAfterWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesVerseAfterWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseDifferenceWithinBookTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesVerseDifferenceWithinBook), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseBeforeWithinChapterTextBox.BackColor = (Numbers.Compare((long)DistancesVerseBeforeWithinChapter, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseWithinChapterTextBox.BackColor = (Numbers.Compare((long)DistancesVerseWithinChapter, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseAfterWithinChapterTextBox.BackColor = (Numbers.Compare((long)DistancesVerseAfterWithinChapter, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseDifferenceWithinChapterTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesVerseDifferenceWithinChapter), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordBeforeWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesWordBeforeWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesWordWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordAfterWithinBookTextBox.BackColor = (Numbers.Compare((long)DistancesWordAfterWithinBook, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordDifferenceWithinBookTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesWordDifferenceWithinBook), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordBeforeWithinChapterTextBox.BackColor = (Numbers.Compare((long)DistancesWordBeforeWithinChapter, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordWithinChapterTextBox.BackColor = (Numbers.Compare((long)DistancesWordWithinChapter, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordAfterWithinChapterTextBox.BackColor = (Numbers.Compare((long)DistancesWordAfterWithinChapter, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordDifferenceWithinChapterTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesWordDifferenceWithinChapter), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordBeforeWithinVerseTextBox.BackColor = (Numbers.Compare((long)DistancesWordBeforeWithinVerse, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordWithinVerseTextBox.BackColor = (Numbers.Compare((long)DistancesWordWithinVerse, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordAfterWithinVerseTextBox.BackColor = (Numbers.Compare((long)DistancesWordAfterWithinVerse, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordDifferenceWithinVerseTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesWordDifferenceWithinVerse), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                // Running totals ...
                                DistancesChapterBeforeWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesChapterBeforeWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesChapterWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesChapterWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesChapterAfterWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesChapterAfterWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesChapterDifferenceWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesChapterDifferenceWithinBookRunningTotal), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseBeforeWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesVerseBeforeWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesVerseWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseAfterWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesVerseAfterWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseDifferenceWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesVerseDifferenceWithinBookRunningTotal), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseBeforeWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesVerseBeforeWithinChapterRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesVerseWithinChapterRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseAfterWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesVerseAfterWithinChapterRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesVerseDifferenceWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesVerseDifferenceWithinChapterRunningTotal), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordBeforeWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordBeforeWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordAfterWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordAfterWithinBookRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordDifferenceWithinBookRunningTotalTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesWordDifferenceWithinBookRunningTotal), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordBeforeWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordBeforeWithinChapterRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordWithinChapterRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordAfterWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordAfterWithinChapterRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordDifferenceWithinChapterRunningTotalTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesWordDifferenceWithinChapterRunningTotal), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordBeforeWithinVerseRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordBeforeWithinVerseRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordWithinVerseRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordWithinVerseRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordAfterWithinVerseRunningTotalTextBox.BackColor = (Numbers.Compare((long)DistancesWordAfterWithinVerseRunningTotal, m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;
                                DistancesWordDifferenceWithinVerseRunningTotalTextBox.BackColor = (Numbers.Compare((long)Math.Abs(DistancesWordDifferenceWithinVerseRunningTotal), m_distances_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.Window;

                                // Interesting numbers
                                if (DistancesChapterBeforeWithinBook.IsInteresting()) DistancesChapterBeforeWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesChapterWithinBook.IsInteresting()) DistancesChapterWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesChapterAfterWithinBook.IsInteresting()) DistancesChapterAfterWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesChapterDifferenceWithinBook).IsInteresting()) DistancesChapterDifferenceWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseBeforeWithinBook.IsInteresting()) DistancesVerseBeforeWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseWithinBook.IsInteresting()) DistancesVerseWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseAfterWithinBook.IsInteresting()) DistancesVerseAfterWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesVerseDifferenceWithinBook).IsInteresting()) DistancesVerseDifferenceWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseBeforeWithinChapter.IsInteresting()) DistancesVerseBeforeWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseWithinChapter.IsInteresting()) DistancesVerseWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseAfterWithinChapter.IsInteresting()) DistancesVerseAfterWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesVerseDifferenceWithinChapter).IsInteresting()) DistancesVerseDifferenceWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordBeforeWithinBook.IsInteresting()) DistancesWordBeforeWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordWithinBook.IsInteresting()) DistancesWordWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordAfterWithinBook.IsInteresting()) DistancesWordAfterWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesWordDifferenceWithinBook).IsInteresting()) DistancesWordDifferenceWithinBookTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordBeforeWithinChapter.IsInteresting()) DistancesWordBeforeWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordWithinChapter.IsInteresting()) DistancesWordWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordAfterWithinChapter.IsInteresting()) DistancesWordAfterWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesWordDifferenceWithinChapter).IsInteresting()) DistancesWordDifferenceWithinChapterTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordBeforeWithinVerse.IsInteresting()) DistancesWordBeforeWithinVerseTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordWithinVerse.IsInteresting()) DistancesWordWithinVerseTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordAfterWithinVerse.IsInteresting()) DistancesWordAfterWithinVerseTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesWordDifferenceWithinVerse).IsInteresting()) DistancesWordDifferenceWithinVerseTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                // Running totals ...
                                if (DistancesChapterBeforeWithinBookRunningTotal.IsInteresting()) DistancesChapterBeforeWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesChapterWithinBookRunningTotal.IsInteresting()) DistancesChapterWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesChapterAfterWithinBookRunningTotal.IsInteresting()) DistancesChapterAfterWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesChapterDifferenceWithinBookRunningTotal).IsInteresting()) DistancesChapterDifferenceWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseBeforeWithinBookRunningTotal.IsInteresting()) DistancesVerseBeforeWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseWithinBookRunningTotal.IsInteresting()) DistancesVerseWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseAfterWithinBookRunningTotal.IsInteresting()) DistancesVerseAfterWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesVerseDifferenceWithinBookRunningTotal).IsInteresting()) DistancesVerseDifferenceWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseBeforeWithinChapterRunningTotal.IsInteresting()) DistancesVerseBeforeWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseWithinChapterRunningTotal.IsInteresting()) DistancesVerseWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesVerseAfterWithinChapterRunningTotal.IsInteresting()) DistancesVerseAfterWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesVerseDifferenceWithinChapterRunningTotal).IsInteresting()) DistancesVerseDifferenceWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordBeforeWithinBookRunningTotal.IsInteresting()) DistancesWordBeforeWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordWithinBookRunningTotal.IsInteresting()) DistancesWordWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordAfterWithinBookRunningTotal.IsInteresting()) DistancesWordAfterWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesWordDifferenceWithinBookRunningTotal).IsInteresting()) DistancesWordDifferenceWithinBookRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordBeforeWithinChapterRunningTotal.IsInteresting()) DistancesWordBeforeWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordWithinChapterRunningTotal.IsInteresting()) DistancesWordWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordAfterWithinChapterRunningTotal.IsInteresting()) DistancesWordAfterWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesWordDifferenceWithinChapterRunningTotal).IsInteresting()) DistancesWordDifferenceWithinChapterRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordBeforeWithinVerseRunningTotal.IsInteresting()) DistancesWordBeforeWithinVerseRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordWithinVerseRunningTotal.IsInteresting()) DistancesWordWithinVerseRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (DistancesWordAfterWithinVerseRunningTotal.IsInteresting()) DistancesWordAfterWithinVerseRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                                if (Math.Abs(DistancesWordDifferenceWithinVerseRunningTotal).IsInteresting()) DistancesWordDifferenceWithinVerseRunningTotalTextBox.BackColor = INTERESTING_NUMBER_COLOR;
                            }
                        }
                    }
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region CVWLSequence
    ///////////////////////////////////////////////////////////////////////////////
    private enum CVWLSequenceType
    {
        _________________wLetters,
        Word_____________wLetters,
        Word_____________wLLLLL,
        VerseWord________wLetters,
        VerseWord________wLLLLL,
        ChapterVerseWord_wLetters,
        ChapterVerseWord_wLLLLL,

        _________________vLetters,
        _________________vWords,
        Verse____________vLetters,
        Verse____________vLLLLL,
        Verse____________vWords,
        Verse____________vWWWWW,
        ChapterVerse_____vLetters,
        ChapterVerse_____vLLLLL,
        ChapterVerse_____vWords,
        ChapterVerse_____vWWWWW,

        _________________cLetters,
        _________________cWords,
        _________________cVerses,
        Chapter__________cLetters,
        Chapter__________cLLLLL,
        Chapter__________cWords,
        Chapter__________cWWWWW,
        Chapter__________cVerses,
        Chapter__________cVVVVV,
    };
    private void PopulateCVWLSequenceTypeComboBox()
    {
        CVWLSequenceTypeComboBox.Items.Clear();

        try
        {
            for (int i = 0; i < 3; i++) CVWLSequenceTypeComboBox.SelectedIndexChanged -= new EventHandler(CVWLSequenceTypeComboBox_SelectedIndexChanged);

            CVWLSequenceTypeComboBox.BeginUpdate();
            CVWLSequenceTypeComboBox.Items.Clear();
            foreach (CVWLSequenceType item in Enum.GetValues(typeof(CVWLSequenceType)))
            {
                CVWLSequenceTypeComboBox.Items.Add(item);
            }
            if (CVWLSequenceTypeComboBox.Items.Count > 0)
            {
                CVWLSequenceTypeComboBox.SelectedIndex = 0;
            }
        }
        finally
        {
            CVWLSequenceTypeComboBox.EndUpdate();
            CVWLSequenceTypeComboBox.SelectedIndexChanged += new EventHandler(CVWLSequenceTypeComboBox_SelectedIndexChanged);
        }
    }
    private bool m_cvwl_sequence_show_factors = false;
    private void CVWLSequenceShowFactorsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_cvwl_sequence_show_factors = CVWLSequenceShowFactorsCheckBox.Checked;
        CVWLSequenceShowFactorsCheckBox.Refresh();

        DisplayCVWLSequence();
    }
    private void CVWLSequenceTypeComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (CVWLSequenceTypeComboBox.SelectedItem != null)
        {
            CVWLSequenceType cvwl_sequence_type = (CVWLSequenceType)Enum.Parse(typeof(CVWLSequenceType), CVWLSequenceTypeComboBox.SelectedItem.ToString());
            if (!String.IsNullOrEmpty(m_current_text))
            {
                if (m_cvwl_sequence_show_factors)
                {
                    string cvwl_str = BuildCVWLSequence(cvwl_sequence_type, m_current_text);
                    cvwl_str = cvwl_str.Replace("\r", "");

                    StringBuilder str = new StringBuilder();
                    string[] lines = cvwl_str.Split('\n');
                    foreach (string line in lines)
                    {
                        string factors_str = "";
                        if (line.Length <= 19) // max long is 19 digits long
                        {
                            long number = 0L;
                            if (long.TryParse(line, out number))
                            {
                                factors_str = Numbers.FactorizeToString(number);
                            }
                        }
                        str.AppendLine(line + "\t\t" + factors_str);
                    }

                    CVWLSequenceTextBox.Text = str.ToString();
                }
                else
                {
                    CVWLSequenceTextBox.Text = BuildCVWLSequence(cvwl_sequence_type, m_current_text);
                }
            }
        }
    }
    private string BuildCVWLSequence(CVWLSequenceType cvwl_sequence_type, string text)
    {
        if (String.IsNullOrEmpty(text)) return null;
        StringBuilder str = new StringBuilder();
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                if (m_client.Selection != null)
                {
                    text = text.SimplifyTo(m_client.NumerologySystem.TextMode);
                    text = text.Replace("\r", "");

                    if (m_cvwl_sequence_right_to_left)
                    {
                        switch (cvwl_sequence_type)
                        {
                            case CVWLSequenceType._________________wLetters:
                                R2L__________________wLetters(text, str);
                                break;
                            case CVWLSequenceType.Word_____________wLetters:
                                R2L_Word_____________wLetters(str);
                                break;
                            case CVWLSequenceType.Word_____________wLLLLL:
                                R2L_Word_____________wLLLLL(str);
                                break;
                            case CVWLSequenceType.VerseWord________wLetters:
                                R2L_VerseWord________wLetters(str);
                                break;
                            case CVWLSequenceType.VerseWord________wLLLLL:
                                R2L_VerseWord________wLLLLL(str);
                                break;
                            case CVWLSequenceType.ChapterVerseWord_wLetters:
                                R2L_ChapterVerseWord_wLetters(str);
                                break;
                            case CVWLSequenceType.ChapterVerseWord_wLLLLL:
                                R2L_ChapterVerseWord_wLLLLL(str);
                                break;
                            case CVWLSequenceType._________________vLetters:
                                R2L__________________vLetters(str);
                                break;
                            case CVWLSequenceType._________________vWords:
                                R2L__________________vWords(str);
                                break;
                            case CVWLSequenceType.Verse____________vLetters:
                                R2L_Verse____________vLetters(str);
                                break;
                            case CVWLSequenceType.Verse____________vLLLLL:
                                R2L_Verse____________vLLLLL(str);
                                break;
                            case CVWLSequenceType.Verse____________vWords:
                                R2L_Verse____________vWords(str);
                                break;
                            case CVWLSequenceType.Verse____________vWWWWW:
                                R2L_Verse____________vWWWWW(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vLetters:
                                R2L_ChapterVerse_____vLetters(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vLLLLL:
                                R2L_ChapterVerse_____vLLLLL(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vWords:
                                R2L_ChapterVerse_____vWords(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vWWWWW:
                                R2L_ChapterVerse_____vWWWWW(str);
                                break;
                            case CVWLSequenceType._________________cLetters:
                                R2L__________________cLetters(str);
                                break;
                            case CVWLSequenceType._________________cWords:
                                R2L__________________cWords(str);
                                break;
                            case CVWLSequenceType._________________cVerses:
                                R2L__________________cVerses(str);
                                break;
                            case CVWLSequenceType.Chapter__________cLetters:
                                R2L_Chapter__________cLetters(str);
                                break;
                            case CVWLSequenceType.Chapter__________cLLLLL:
                                R2L_Chapter__________cLLLLL(str);
                                break;
                            case CVWLSequenceType.Chapter__________cWords:
                                R2L_Chapter__________cWords(str);
                                break;
                            case CVWLSequenceType.Chapter__________cWWWWW:
                                R2L_Chapter__________cWWWWW(str);
                                break;
                            case CVWLSequenceType.Chapter__________cVerses:
                                R2L_Chapter__________cVerses(str);
                                break;
                            case CVWLSequenceType.Chapter__________cVVVVV:
                                R2L_Chapter__________cVVVVV(str);
                                break;
                            default:
                                break;
                        }
                    }
                    else // left to right
                    {
                        switch (cvwl_sequence_type)
                        {
                            case CVWLSequenceType._________________wLetters:
                                L2R__________________wLetters(text, str);
                                break;
                            case CVWLSequenceType.Word_____________wLetters:
                                L2R_Word_____________wLetters(str);
                                break;
                            case CVWLSequenceType.Word_____________wLLLLL:
                                L2R_Word_____________wLLLLL(str);
                                break;
                            case CVWLSequenceType.VerseWord________wLetters:
                                L2R_VerseWord________wLetters(str);
                                break;
                            case CVWLSequenceType.VerseWord________wLLLLL:
                                L2R_VerseWord________wLLLLL(str);
                                break;
                            case CVWLSequenceType.ChapterVerseWord_wLetters:
                                L2R_ChapterVerseWord_wLetters(str);
                                break;
                            case CVWLSequenceType.ChapterVerseWord_wLLLLL:
                                L2R_ChapterVerseWord_wLLLLL(str);
                                break;
                            case CVWLSequenceType._________________vLetters:
                                L2R__________________vLetters(str);
                                break;
                            case CVWLSequenceType._________________vWords:
                                L2R__________________vWords(str);
                                break;
                            case CVWLSequenceType.Verse____________vLetters:
                                L2R_Verse____________vLetters(str);
                                break;
                            case CVWLSequenceType.Verse____________vLLLLL:
                                L2R_Verse____________vLLLLL(str);
                                break;
                            case CVWLSequenceType.Verse____________vWords:
                                L2R_Verse____________vWords(str);
                                break;
                            case CVWLSequenceType.Verse____________vWWWWW:
                                L2R_Verse____________vWWWWW(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vLetters:
                                L2R_ChapterVerse_____vLetters(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vLLLLL:
                                L2R_ChapterVerse_____vLLLLL(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vWords:
                                L2R_ChapterVerse_____vWords(str);
                                break;
                            case CVWLSequenceType.ChapterVerse_____vWWWWW:
                                L2R_ChapterVerse_____vWWWWW(str);
                                break;
                            case CVWLSequenceType._________________cLetters:
                                L2R__________________cLetters(str);
                                break;
                            case CVWLSequenceType._________________cWords:
                                L2R__________________cWords(str);
                                break;
                            case CVWLSequenceType._________________cVerses:
                                L2R__________________cVerses(str);
                                break;
                            case CVWLSequenceType.Chapter__________cLetters:
                                L2R_Chapter__________cLetters(str);
                                break;
                            case CVWLSequenceType.Chapter__________cLLLLL:
                                L2R_Chapter__________cLLLLL(str);
                                break;
                            case CVWLSequenceType.Chapter__________cWords:
                                L2R_Chapter__________cWords(str);
                                break;
                            case CVWLSequenceType.Chapter__________cWWWWW:
                                L2R_Chapter__________cWWWWW(str);
                                break;
                            case CVWLSequenceType.Chapter__________cVerses:
                                L2R_Chapter__________cVerses(str);
                                break;
                            case CVWLSequenceType.Chapter__________cVVVVV:
                                L2R_Chapter__________cVVVVV(str);
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
        }
        return str.ToString().Trim();
    }
    private void R2L__________________wLetters(string text, StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                foreach (Word word in verse.Words)
                {
                    str.Insert(start, word.Letters.Count.ToString());
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            string[] lines = text.Split('\n');
            foreach (string line in lines)
            {
                string[] words = line.Split(' ');
                foreach (string word in words)
                {
                    if (word.Length > 0)
                    {
                        str.Insert(start, word.Length.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
    }
    private void R2L_Word_____________wLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                foreach (Word word in verse.Words)
                {
                    str.Insert(start, word.Letters.Count.ToString() + word.NumberInVerse.ToString());
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    foreach (Word word in verse.Words)
                    {
                        str.Insert(start, word.Letters.Count.ToString() + word.NumberInVerse.ToString());
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Word_____________wLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                foreach (Word word in verse.Words)
                {
                    str.Insert(start, word.NumberInVerse.ToString());
                    foreach (Letter letter in word.Letters)
                    {
                        str.Insert(start, letter.NumberInWord.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    foreach (Word word in verse.Words)
                    {
                        str.Insert(start, word.NumberInVerse.ToString());
                        foreach (Letter letter in word.Letters)
                        {
                            str.Insert(start, letter.NumberInWord.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_VerseWord________wLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    str.Insert(start, word.Letters.Count.ToString() + word.NumberInVerse.ToString());
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        str.Insert(start, word.Letters.Count.ToString() + word.NumberInVerse.ToString());
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_VerseWord________wLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    str.Insert(start, word.NumberInVerse.ToString());
                    foreach (Letter letter in word.Letters)
                    {
                        str.Insert(start, letter.NumberInWord.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        str.Insert(start, word.NumberInVerse.ToString());
                        foreach (Letter letter in word.Letters)
                        {
                            str.Insert(start, letter.NumberInWord.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_ChapterVerseWord_wLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Insert(start, verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            str.Insert(start, word.Letters.Count.ToString() + word.NumberInVerse.ToString());
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Insert(start, verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                str.Insert(start, word.Letters.Count.ToString() + word.NumberInVerse.ToString());
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_ChapterVerseWord_wLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Insert(start, verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            str.Insert(start, word.NumberInVerse.ToString());
                            foreach (Letter letter in word.Letters)
                            {
                                str.Insert(start, letter.NumberInWord.ToString());
                            }
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Insert(start, verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                str.Insert(start, word.NumberInVerse.ToString());
                                foreach (Letter letter in word.Letters)
                                {
                                    str.Insert(start, letter.NumberInWord.ToString());
                                }
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L__________________vLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.LetterCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.LetterCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L__________________vWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.Words.Count.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.Words.Count.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Verse____________vLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.LetterCount.ToString() + verse.NumberInChapter.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.LetterCount.ToString() + verse.NumberInChapter.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Verse____________vLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    foreach (Letter letter in word.Letters)
                    {
                        str.Insert(start, letter.NumberInVerse.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        foreach (Letter letter in word.Letters)
                        {
                            str.Insert(start, letter.NumberInVerse.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Verse____________vWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.Words.Count.ToString() + verse.NumberInChapter.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.Words.Count.ToString() + verse.NumberInChapter.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Verse____________vWWWWW(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Insert(start, verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    str.Insert(start, word.NumberInVerse.ToString());
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Insert(start, verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        str.Insert(start, word.NumberInVerse.ToString());
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_ChapterVerse_____vLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Insert(start, verse.LetterCount.ToString() + verse.NumberInChapter.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Insert(start, verse.LetterCount.ToString() + verse.NumberInChapter.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_ChapterVerse_____vLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Insert(start, verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            foreach (Letter letter in word.Letters)
                            {
                                str.Insert(start, letter.NumberInVerse.ToString());
                            }
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Insert(start, verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                foreach (Letter letter in word.Letters)
                                {
                                    str.Insert(start, letter.NumberInVerse.ToString());
                                }
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_ChapterVerse_____vWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Insert(start, verse.Words.Count.ToString() + verse.NumberInChapter.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Insert(start, verse.Words.Count.ToString() + verse.NumberInChapter.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_ChapterVerse_____vWWWWW(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Insert(start, verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            str.Insert(start, word.NumberInVerse.ToString());
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Insert(start, verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                str.Insert(start, word.NumberInVerse.ToString());
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L__________________cLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.LetterCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.LetterCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L__________________cWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.WordCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.WordCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L__________________cVerses(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.Verses.Count.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.Verses.Count.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Chapter__________cLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.LetterCount.ToString() + chapter.SortedNumber.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.LetterCount.ToString() + chapter.SortedNumber.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Chapter__________cLLLLL(StringBuilder str)//
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        foreach (Word word in verse.Words)
                        {
                            foreach (Letter letter in word.Letters)
                            {
                                str.Insert(start, letter.NumberInVerse.ToString());
                            }
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            foreach (Word word in verse.Words)
                            {
                                foreach (Letter letter in word.Letters)
                                {
                                    str.Insert(start, letter.NumberInVerse.ToString());
                                }
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Chapter__________cWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.WordCount.ToString() + chapter.SortedNumber.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.WordCount.ToString() + chapter.SortedNumber.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Chapter__________cWWWWW(StringBuilder str)//
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        foreach (Word word in verse.Words)
                        {
                            str.Append(word.NumberInChapter.ToString());
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            foreach (Word word in verse.Words)
                            {
                                str.Append(word.NumberInChapter.ToString());
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Chapter__________cVerses(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.Verses.Count.ToString() + chapter.SortedNumber.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.Verses.Count.ToString() + chapter.SortedNumber.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void R2L_Chapter__________cVVVVV(StringBuilder str)
    {
        if (m_selection_mode)
        {
            int start = 0;
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Insert(start, chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Insert(start, verse.NumberInChapter.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
                if (!m_active_textbox.WordWrap) start = str.Length;
            }
        }
        else
        {
            int start = 0;
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Insert(start, chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Insert(start, verse.NumberInChapter.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                    if (!m_active_textbox.WordWrap) start = str.Length;
                }
            }
        }
    }
    private void L2R__________________wLetters(string text, StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                foreach (Word word in verse.Words)
                {
                    str.Append(word.Letters.Count);
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            string[] lines = text.Split('\n');
            foreach (string line in lines)
            {
                string[] words = line.Split(' ');
                foreach (string word in words)
                {
                    if (word.Length > 0)
                    {
                        str.Append(word.Length);
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
    }
    private void L2R_Word_____________wLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                foreach (Word word in verse.Words)
                {
                    str.Append(word.NumberInVerse.ToString() + word.Letters.Count.ToString());
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    foreach (Word word in verse.Words)
                    {
                        str.Append(word.NumberInVerse.ToString() + word.Letters.Count.ToString());
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Word_____________wLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                foreach (Word word in verse.Words)
                {
                    str.Append(word.NumberInVerse.ToString());
                    foreach (Letter letter in word.Letters)
                    {
                        str.Append(letter.NumberInWord.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    foreach (Word word in verse.Words)
                    {
                        str.Append(word.NumberInVerse.ToString());
                        foreach (Letter letter in word.Letters)
                        {
                            str.Append(letter.NumberInWord.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_VerseWord________wLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    str.Append(word.NumberInVerse.ToString() + word.Letters.Count.ToString());
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        str.Append(word.NumberInVerse.ToString() + word.Letters.Count.ToString());
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_VerseWord________wLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    str.Append(word.NumberInVerse.ToString());
                    foreach (Letter letter in word.Letters)
                    {
                        str.Append(letter.NumberInWord.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        str.Append(word.NumberInVerse.ToString());
                        foreach (Letter letter in word.Letters)
                        {
                            str.Append(letter.NumberInWord.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_ChapterVerseWord_wLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Append(verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            str.Append(word.NumberInVerse.ToString() + word.Letters.Count.ToString());
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Append(verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                str.Append(word.NumberInVerse.ToString() + word.Letters.Count.ToString());
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_ChapterVerseWord_wLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Append(verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            str.Append(word.NumberInVerse.ToString());
                            foreach (Letter letter in word.Letters)
                            {
                                str.Append(letter.NumberInWord.ToString());
                            }
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Append(verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                str.Append(word.NumberInVerse.ToString());
                                foreach (Letter letter in word.Letters)
                                {
                                    str.Append(letter.NumberInWord.ToString());
                                }
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R__________________vLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.LetterCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.LetterCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R__________________vWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.Words.Count.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.Words.Count.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Verse____________vLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.NumberInChapter.ToString() + verse.LetterCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.NumberInChapter.ToString() + verse.LetterCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Verse____________vLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    foreach (Letter letter in word.Letters)
                    {
                        str.Append(letter.NumberInVerse.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        foreach (Letter letter in word.Letters)
                        {
                            str.Append(letter.NumberInVerse.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Verse____________vWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.NumberInChapter.ToString() + verse.Words.Count.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.NumberInChapter.ToString() + verse.Words.Count.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Verse____________vWWWWW(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Verse verse in m_client.Selection.Verses)
            {
                str.Append(verse.NumberInChapter.ToString());
                foreach (Word word in verse.Words)
                {
                    str.Append(word.NumberInVerse.ToString());
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Verse> verses = GetCurrentVerses();
            if (verses != null)
            {
                foreach (Verse verse in verses)
                {
                    str.Append(verse.NumberInChapter.ToString());
                    foreach (Word word in verse.Words)
                    {
                        str.Append(word.NumberInVerse.ToString());
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_ChapterVerse_____vLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Append(verse.NumberInChapter.ToString() + verse.LetterCount.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Append(verse.NumberInChapter.ToString() + verse.LetterCount.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_ChapterVerse_____vLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Append(verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            foreach (Letter letter in word.Letters)
                            {
                                str.Append(letter.NumberInVerse.ToString());
                            }
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Append(verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                foreach (Letter letter in word.Letters)
                                {
                                    str.Append(letter.NumberInVerse.ToString());
                                }
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_ChapterVerse_____vWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Append(verse.NumberInChapter.ToString() + verse.Words.Count.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Append(verse.NumberInChapter.ToString() + verse.Words.Count.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_ChapterVerse_____vWWWWW(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Append(verse.NumberInChapter.ToString());
                        foreach (Word word in verse.Words)
                        {
                            str.Append(word.NumberInVerse.ToString());
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Append(verse.NumberInChapter.ToString());
                            foreach (Word word in verse.Words)
                            {
                                str.Append(word.NumberInVerse.ToString());
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R__________________cLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.LetterCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.LetterCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R__________________cWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.WordCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.WordCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R__________________cVerses(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.Verses.Count.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.Verses.Count.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Chapter__________cLetters(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString() + chapter.LetterCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString() + chapter.LetterCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Chapter__________cLLLLL(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        foreach (Word word in verse.Words)
                        {
                            foreach (Letter letter in word.Letters)
                            {
                                str.Append(letter.NumberInChapter.ToString());
                            }
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            foreach (Word word in verse.Words)
                            {
                                foreach (Letter letter in word.Letters)
                                {
                                    str.Append(letter.NumberInChapter.ToString());
                                }
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Chapter__________cWords(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString() + chapter.WordCount.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString() + chapter.WordCount.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Chapter__________cWWWWW(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        foreach (Word word in verse.Words)
                        {
                            str.Append(word.NumberInChapter.ToString());
                        }
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            foreach (Word word in verse.Words)
                            {
                                str.Append(word.NumberInChapter.ToString());
                            }
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Chapter__________cVerses(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString() + chapter.Verses.Count.ToString());
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString() + chapter.Verses.Count.ToString());
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private void L2R_Chapter__________cVVVVV(StringBuilder str)
    {
        if (m_selection_mode)
        {
            foreach (Chapter chapter in m_client.Selection.Chapters)
            {
                str.Append(chapter.SortedNumber.ToString());
                foreach (Verse verse in chapter.Verses)
                {
                    if (m_client.Selection.Verses.Contains(verse))
                    {
                        str.Append(verse.NumberInChapter.ToString());
                    }
                }
                if (!m_active_textbox.WordWrap) str.AppendLine();
            }
        }
        else
        {
            List<Chapter> chapters = GetCurrentChapters();
            if (chapters != null)
            {
                foreach (Chapter chapter in chapters)
                {
                    str.Append(chapter.SortedNumber.ToString());
                    foreach (Verse verse in chapter.Verses)
                    {
                        if (m_client.Selection.Verses.Contains(verse))
                        {
                            str.Append(verse.NumberInChapter.ToString());
                        }
                    }
                    if (!m_active_textbox.WordWrap) str.AppendLine();
                }
            }
        }
    }
    private bool m_cvwl_sequence_right_to_left = true;
    private void CVWLSequenceDirectionLabel_Click(object sender, EventArgs e)
    {
        m_cvwl_sequence_right_to_left = !m_cvwl_sequence_right_to_left;
        //CVWLSequenceTextBox.RightToLeft = m_cvwl_sequence_right_to_left ? RightToLeft.Yes : RightToLeft.No;
        //CVWLSequenceDirectionLabel.Left = m_cvwl_sequence_right_to_left ? -2 : 633;
        //CVWLSequenceDirectionLabel.Anchor = m_cvwl_sequence_right_to_left ? (AnchorStyles.Top | AnchorStyles.Left) : (AnchorStyles.Top | AnchorStyles.Right);

        if (m_cvwl_sequence_right_to_left)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_left.png"))
            {
                CVWLSequenceDirectionLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_left.png");
            }
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_right.png"))
            {
                CVWLSequenceDirectionLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_right.png");
            }
        }
        CVWLSequenceDirectionLabel.Refresh();

        DisplayCVWLSequence();
    }
    private void DisplayCVWLSequence()
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            if (TabControl.SelectedTab == CVWLSequenceTabPage)
            {
                CVWLSequenceTypeComboBox_SelectedIndexChanged(null, null);
            }
        }
    }
    private void CVWLSequenceInspectLabel_Click(object sender, EventArgs e)
    {
        string cvwl_sequence_type_str = CVWLSequenceTypeComboBox.SelectedItem.ToString();
        string filename = (m_cvwl_sequence_right_to_left ? "R2L" : "L2R") + "_" + cvwl_sequence_type_str + Globals.OUTPUT_FILE_EXT;
        if (Directory.Exists(Globals.STATISTICS_FOLDER))
        {
            string path = Globals.STATISTICS_FOLDER + "/" + filename;
            FileHelper.SaveText(path, CVWLSequenceTextBox.Text);
            FileHelper.DisplayFile(path);
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region ValuesSequence
    ///////////////////////////////////////////////////////////////////////////////
    private int m_values_sequence_radix = DEFAULT_RADIX;
    private enum ValuesSequenceScope
    {
        LetterValues,
        WordValues,
        VerseValues,
        ChapterValues
    };
    private void PopulateValuesSequenceScopeComboBox()
    {
        ValuesSequenceScopeComboBox.Items.Clear();
        try
        {
            for (int i = 0; i < 3; i++) ValuesSequenceScopeComboBox.SelectedIndexChanged -= new EventHandler(ValuesSequenceScopeComboBox_SelectedIndexChanged);

            ValuesSequenceScopeComboBox.BeginUpdate();
            ValuesSequenceScopeComboBox.Items.Clear();
            foreach (ValuesSequenceScope item in Enum.GetValues(typeof(ValuesSequenceScope)))
            {
                ValuesSequenceScopeComboBox.Items.Add(item);
            }
            if (ValuesSequenceScopeComboBox.Items.Count > 0)
            {
                ValuesSequenceScopeComboBox.SelectedIndex = 0;
            }
        }
        finally
        {
            ValuesSequenceScopeComboBox.EndUpdate();
            ValuesSequenceScopeComboBox.SelectedIndexChanged += new EventHandler(ValuesSequenceScopeComboBox_SelectedIndexChanged);
        }
    }
    private void ValuesSequenceScopeComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (ValuesSequenceScopeComboBox.SelectedItem != null)
        {
            ValuesSequenceScope values_sequence_scope = (ValuesSequenceScope)Enum.Parse(typeof(ValuesSequenceScope), ValuesSequenceScopeComboBox.SelectedItem.ToString());
            if (!String.IsNullOrEmpty(m_current_text))
            {
                ValuesSequenceTextBox.Text = BuildValuesSequence(values_sequence_scope, m_current_text);
            }
        }
    }
    private void ValuesSequenceRadixNumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        m_values_sequence_radix = (int)ValuesSequenceRadixNumericUpDown.Value;
        DisplayValuesSequence();
    }
    private string BuildValuesSequence(ValuesSequenceScope values_sequence_scope, string text)
    {
        if (String.IsNullOrEmpty(text)) return null;

        StringBuilder str = new StringBuilder();

        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                if (m_client.Selection != null)
                {
                    text = text.SimplifyTo(m_client.NumerologySystem.TextMode);
                    text = text.Replace("\r", "");

                    if (m_values_sequence_right_to_left)
                    {
                        int line_start = 0;
                        switch (values_sequence_scope)
                        {
                            case ValuesSequenceScope.LetterValues:
                                {
                                    foreach (char c in text)
                                    {
                                        if (c == '\n')
                                        {
                                            str.AppendLine();
                                            line_start = str.Length;
                                        }
                                        else if (c == ' ')
                                        {
                                            str.Insert(line_start, c);
                                        }
                                        else
                                        {
                                            str.Insert(line_start, " ");
                                            long value = m_client.CalculateValue(c);
                                            str.Insert(line_start, Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 8, '0'));
                                        }
                                    }
                                }
                                break;
                            case ValuesSequenceScope.WordValues:
                                {
                                    string[] lines = text.Split('\n');
                                    foreach (string line in lines)
                                    {
                                        string[] words = line.Split(' ');
                                        foreach (string word in words)
                                        {
                                            long value = m_client.CalculateValue(word);
                                            str.Insert(line_start, Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 16, '0'));
                                            str.Insert(line_start, " ");
                                        }
                                        str.Remove(line_start, 1); // last ' '
                                        str.AppendLine();
                                        line_start = str.Length;
                                    }
                                }
                                break;
                            case ValuesSequenceScope.VerseValues:
                                {
                                    string[] lines = text.Split('\n');
                                    foreach (string line in lines)
                                    {
                                        long value = m_client.CalculateValue(line);
                                        str.AppendLine(Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 32, '0'));
                                    }
                                }
                                break;
                            case ValuesSequenceScope.ChapterValues:
                                {
                                    if (m_client.Book != null)
                                    {
                                        foreach (Chapter chapter in m_client.Selection.Chapters)
                                        {
                                            long value = m_client.CalculateValue(chapter);
                                            str.AppendLine(Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 64, '0'));
                                        }
                                    }
                                }
                                break;
                            default:
                                break;
                        }
                    }
                    else
                    {
                        switch (values_sequence_scope)
                        {
                            case ValuesSequenceScope.LetterValues:
                                {
                                    foreach (char c in text)
                                    {
                                        if (c == '\n')
                                        {
                                            str.Remove(str.Length - 1, 1); // last " "
                                            str.AppendLine();
                                        }
                                        else if (c == ' ')
                                        {
                                            str.Append(c);
                                        }
                                        else
                                        {
                                            long value = m_client.CalculateValue(c);
                                            str.Append(Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 8, '0'));
                                            str.Append(" ");
                                        }
                                    }
                                }
                                break;
                            case ValuesSequenceScope.WordValues:
                                {
                                    string[] lines = text.Split('\n');
                                    foreach (string line in lines)
                                    {
                                        string[] words = line.Split(' ');
                                        foreach (string word in words)
                                        {
                                            long value = m_client.CalculateValue(word);
                                            str.Append(Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 16, '0'));
                                            str.Append(" ");
                                        }
                                        str.Remove(str.Length - 1, 1); // last " "
                                        str.AppendLine();
                                    }
                                }
                                break;
                            case ValuesSequenceScope.VerseValues:
                                {
                                    string[] lines = text.Split('\n');
                                    foreach (string line in lines)
                                    {
                                        long value = m_client.CalculateValue(line);
                                        str.AppendLine(Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 32, '0'));
                                    }
                                }
                                break;
                            case ValuesSequenceScope.ChapterValues:
                                {
                                    foreach (Chapter chapter in m_client.Selection.Chapters)
                                    {
                                        if (m_client.Book != null)
                                        {
                                            long value = m_client.CalculateValue(chapter);
                                            str.AppendLine(Radix.Encode(value, m_values_sequence_radix).PadLeft((m_values_sequence_radix > 2) ? 0 : 64, '0'));
                                        }
                                    }
                                }
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
        }
        return str.ToString().Trim();
    }
    private bool m_values_sequence_right_to_left = true;
    private void ValuesSequenceDirectionLabel_Click(object sender, EventArgs e)
    {
        m_values_sequence_right_to_left = !m_values_sequence_right_to_left;
        //ValuesSequenceTextBox.RightToLeft = m_values_sequence_right_to_left ? RightToLeft.Yes : RightToLeft.No;
        //ValuesSequenceDirectionLabel.Left = m_values_sequence_right_to_left ? -2 : 633;
        //ValuesSequenceDirectionLabel.Anchor = m_values_sequence_right_to_left ? (AnchorStyles.Top | AnchorStyles.Left) : (AnchorStyles.Top | AnchorStyles.Right);

        if (m_values_sequence_right_to_left)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_left.png"))
            {
                ValuesSequenceDirectionLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_left.png");
            }
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_right.png"))
            {
                ValuesSequenceDirectionLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_right.png");
            }
        }
        ValuesSequenceDirectionLabel.Refresh();

        ValuesSequenceScopeComboBox_SelectedIndexChanged(null, null);
    }
    private void DisplayValuesSequence()
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            if (TabControl.SelectedTab == ValuesSequenceTabPage)
            {
                ValuesSequenceScopeComboBox_SelectedIndexChanged(null, null);
            }
        }
    }
    private void ValuesSequenceInspectLabel_Click(object sender, EventArgs e)
    {
        string filename = (m_values_sequence_right_to_left ? "R2L" : "L2R") + "_" + "Base" + m_values_sequence_radix + " " + ValuesSequenceScopeComboBox.SelectedItem.ToString() + Globals.OUTPUT_FILE_EXT;
        if (Directory.Exists(Globals.STATISTICS_FOLDER))
        {
            string path = Globals.STATISTICS_FOLDER + "/" + filename;
            FileHelper.SaveText(path, ValuesSequenceTextBox.Text);
            FileHelper.DisplayFile(path);
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region DNASequence
    ///////////////////////////////////////////////////////////////////////////////
    private void PopulateDNASequenceSystemComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) DNASequenceSystemComboBox.SelectedIndexChanged -= new EventHandler(DNASequenceSystemComboBox_SelectedIndexChanged);

            if (m_client != null)
            {
                if (m_client.LoadedDNASequenceSystems != null)
                {
                    DNASequenceSystemComboBox.BeginUpdate();

                    DNASequenceSystemComboBox.Items.Clear();
                    foreach (DNASequenceSystem dna_sequence_system in m_client.LoadedDNASequenceSystems.Values)
                    {
                        DNASequenceSystemComboBox.Items.Add(dna_sequence_system.Name);
                    }
                }
            }
        }
        finally
        {
            DNASequenceSystemComboBox.EndUpdate();
            DNASequenceSystemComboBox.SelectedIndexChanged += new EventHandler(DNASequenceSystemComboBox_SelectedIndexChanged);
        }
    }
    private void DNASequenceSystemComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (DNASequenceSystemComboBox.SelectedItem != null)
        {
            string dna_sequence_system_name = DNASequenceSystemComboBox.SelectedItem.ToString();
            if (!String.IsNullOrEmpty(m_current_text))
            {
                DNASequenceTextBox.Text = BuildDNASequence(dna_sequence_system_name, m_current_text);
            }
        }
    }
    private string BuildDNASequence(string dna_sequence_system_name, string text)
    {
        if (String.IsNullOrEmpty(text)) return null;

        StringBuilder str = new StringBuilder();

        if (m_client != null)
        {
            if (m_client.DNASequenceSystem != null)
            {
                if (m_client.DNASequenceSystem.Name != dna_sequence_system_name)
                {
                    LoadDNASequenceSystem(dna_sequence_system_name);
                }

                // recheck after Loading
                if (m_client.DNASequenceSystem != null)
                {
                    text = text.SimplifyTo(m_client.DNASequenceSystem.TextMode);
                    text = text.Replace("\r", "");

                    if (m_dna_sequence_right_to_left)
                    {
                        int line_start = 0;
                        foreach (char c in text)
                        {
                            if (c == '\n')
                            {
                                str.AppendLine();
                                line_start = str.Length;
                            }
                            else if (c == ' ')
                            {
                                str.Insert(line_start, c);
                            }
                            else
                            {
                                if (m_client.DNASequenceSystem.ContainsKey(c))
                                {
                                    char r = m_client.DNASequenceSystem[c];
                                    str.Insert(line_start, r);
                                }
                            }
                        }
                    }
                    else
                    {
                        foreach (char c in text)
                        {
                            if (c == '\n')
                            {
                                str.AppendLine();
                            }
                            else if (c == ' ')
                            {
                                str.Append(c);
                            }
                            else
                            {
                                if (m_client.DNASequenceSystem.ContainsKey(c))
                                {
                                    char r = m_client.DNASequenceSystem[c];
                                    str.Append(r);
                                }
                            }
                        }
                    }
                }
            }
        }

        return str.ToString().Trim();
    }
    private void LoadDNASequenceSystem(string dna_sequence_system_name)
    {
        if (m_client != null)
        {
            m_client.LoadDNASequenceSystem(dna_sequence_system_name);
        }
    }
    private bool m_dna_sequence_right_to_left = true;
    private void DNASequenceDirectionLabel_Click(object sender, EventArgs e)
    {
        m_dna_sequence_right_to_left = !m_dna_sequence_right_to_left;
        //DNASequenceTextBox.RightToLeft = m_dna_sequence_right_to_left ? RightToLeft.Yes : RightToLeft.No;
        //DNASequenceDirectionLabel.Left = m_dna_sequence_right_to_left ? -2 : 633;
        //DNASequenceDirectionLabel.Anchor = m_dna_sequence_right_to_left ? (AnchorStyles.Top | AnchorStyles.Left) : (AnchorStyles.Top | AnchorStyles.Right);

        if (m_dna_sequence_right_to_left)
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_left.png"))
            {
                DNASequenceDirectionLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_left.png");
            }
        }
        else
        {
            if (File.Exists(Globals.IMAGES_FOLDER + "/" + "arrow_right.png"))
            {
                DNASequenceDirectionLabel.Image = new Bitmap(Globals.IMAGES_FOLDER + "/" + "arrow_right.png");
            }
        }
        DNASequenceDirectionLabel.Refresh();

        DNASequenceSystemComboBox_SelectedIndexChanged(null, null);
    }
    private void DNASequenceSystemEditLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.DNASequenceSystem != null)
                {
                    // display the DNASequenceSystem file for live editing using ISubscriber
                    string filename = Globals.VALUES_FOLDER + "/" + m_client.DNASequenceSystem.Name + ".txt";
                    if (File.Exists(filename))
                    {
                        FileHelper.WaitForReady(filename);

                        System.Diagnostics.Process.Start("Notepad.exe", filename);
                    }
                }
            }

            DNASequenceSystemComboBox.Focus();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DisplayDNASequence()
    {
        if (
             (m_text_display_mode == TextDisplayMode.Both) ||
             (m_text_display_mode == TextDisplayMode.TranslationOnly)
           )
        {
            if (TabControl.SelectedTab == DNASequenceTabPage)
            {
                DNASequenceSystemComboBox_SelectedIndexChanged(null, null);
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region UserText
    ///////////////////////////////////////////////////////////////////////////////
    private bool m_mouse_down = false;
    private int m_user_text_selection_start = 0;
    private int m_user_text_selection_length = 0;
    private void CalculateUserTextValue(Point location)
    {
        if ((m_user_text_selection_start == UserTextTextBox.SelectionStart) && (m_user_text_selection_length == UserTextTextBox.SelectionLength))
        {
            return;
        }

        m_user_text_selection_length = UserTextTextBox.SelectionLength;
        m_user_text_selection_start = UserTextTextBox.SelectionStart;

        ////////////////////////////////////////////////////
        // overwrite m_current_text to show LetterStatistics
        ////////////////////////////////////////////////////
        if (UserTextTextBox.SelectionLength > 0)
        {
            // selected text only
            m_current_text = UserTextTextBox.SelectedText;
        }
        else
        {
            if ((location.X == 0) && (location.Y == 0))
            {
                // all text
                m_current_text = UserTextTextBox.Text;
            }
            else
            {
                // current line text
                int char_index = UserTextTextBox.GetCharIndexFromPosition(location);
                int line_index = UserTextTextBox.GetLineFromCharIndex(char_index);
                if ((line_index >= 0) && (line_index < UserTextTextBox.Lines.Length))
                {
                    m_current_text = UserTextTextBox.Lines[line_index].ToString();
                }
                else
                {
                    m_current_text = "";
                }
            }
        }

        if (!String.IsNullOrEmpty(m_current_text))
        {
            m_current_text = RemoveVerseAddresses(m_current_text);
            m_current_text = RemoveVerseEndMarks(m_current_text);
            m_current_text = m_current_text.Trim();
            m_current_text = m_current_text.Replace("\n", "\r\n");
        }

        // calculate Letters value
        CalculateValueAndDisplayFactors(m_current_text);

        // calculate and display verse_number_sum, word_number_sum, letter_number_sum
        CalculateAndDisplayCounts(m_current_text);

        BuildLetterFrequencies();
        DisplayLetterFrequencies();

        if (UserTextTextBox.SelectionLength > 0)
        {
            DisplayWordFrequencies();
            this.AcceptButton = null;  // prevent steeling focus by this.AcceptButton = FindByTextButton;
        }
        else
        {
            WordsListBoxLabel.Visible = false;
            WordsListBox.Visible = false;
            WordsListBox.SendToBack();
        }
    }
    private Point m_caret_position = new Point(0, 0);
    private void UserTextTextBox_KeyUp(object sender, KeyEventArgs e)
    {
        int char_index = UserTextTextBox.GetFirstCharIndexOfCurrentLine();
        if (char_index >= 0)
        {
            m_caret_position = UserTextTextBox.GetPositionFromCharIndex(char_index);
            CalculateUserTextValue(m_caret_position);
        }
    }
    private void UserTextTextBox_MouseDown(object sender, MouseEventArgs e)
    {
        m_mouse_down = true;
    }
    private void UserTextTextBox_MouseMove(object sender, MouseEventArgs e)
    {
        if (m_mouse_down)
        {
            CalculateUserTextValue(e.Location);
        }
    }
    private void UserTextTextBox_MouseUp(object sender, MouseEventArgs e)
    {
        m_mouse_down = false;
        CalculateUserTextValue(e.Location);

        // backup m_caret_position
        int char_index = UserTextTextBox.GetFirstCharIndexOfCurrentLine();
        if (char_index >= 0)
        {
            m_caret_position = UserTextTextBox.GetPositionFromCharIndex(char_index);
        }

    }
    private void UserTextTextBox_Enter(object sender, EventArgs e)
    {
        m_user_text_mode = true;
        CalculateUserTextValue(m_caret_position);
    }
    private void UserTextTextBox_Leave(object sender, EventArgs e)
    {
    }
    private void UserTextTextBox_TextChanged(object sender, EventArgs e)
    {
    }
    private void UserTextValueButton_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                long value = (long)UserTextValueNumericUpDown.Value;
                List<string> matches = new List<string>();

                string filename = Globals.DATA_FOLDER + "/" + "quran-words.txt";
                if (File.Exists(filename))
                {
                    List<string> lines = FileHelper.LoadLines(filename);

                    foreach (string line in lines)
                    {
                        if (m_client.CalculateValue(line) == value)
                        {
                            matches.Add(line);
                        }
                    }
                    matches.Sort();

                    StringBuilder str = new StringBuilder();
                    foreach (string line in matches)
                    {
                        str.AppendLine(line);
                    }
                    UserTextTextBox.Text = str.ToString();
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void UserTextValueNumericUpDown_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            UserTextValueButton_Click(null, null);
            e.Handled = true; // stop annoying beep
        }
    }
    private void UserTextValueNumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        UserTextValueButton_Click(null, null);
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Autocomplete/WordFrequency
    ///////////////////////////////////////////////////////////////////////////////
    private bool m_auto_complete_mode = false;
    private bool m_word_double_click = false;
    private bool m_sort_by_word_frequency = true;
    private Dictionary<string, int> m_word_frequency_dictionary = null;
    private void WordsListBox_Enter(object sender, EventArgs e)
    {
        this.AcceptButton = FindByTextButton;
    }
    private void WordsListBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            if (WordsListBox.SelectedIndices.Count > 1)
            {
                FindSelectedWordsMenuItem_Click(null, null);
            }
            else
            {
                WordsListBox_DoubleClick(sender, e);
            }
        }
        else if (e.KeyCode == Keys.Space)
        {
            FindByTextTextBox.Text += " ";
            FindByTextTextBox.Focus();
        }
        else if ((e.KeyCode == Keys.Left) || (e.KeyCode == Keys.Right))
        {
            FindByTextTextBox.Focus();
        }
        FindByTextTextBox.SelectionStart = FindByTextTextBox.Text.Length;
    }
    private void WordsListBox_MouseDown(object sender, MouseEventArgs e)
    {
        if (e.Button == MouseButtons.Right)
        {
            // set cursor at mouse RIGHT-click location so we know which word to Find
            if (WordsListBox.SelectedIndices.Count == 1)
            {
                WordsListBox.SelectedIndex = -1;
            }
            WordsListBox.SelectedIndex = WordsListBox.IndexFromPoint(e.X, e.Y);
        }
    }
    private void WordsListBox_MouseMove(object sender, MouseEventArgs e)
    {
        if (ModifierKeys == Keys.Control)
        {
            if (m_client != null)
            {
                int index = WordsListBox.IndexFromPoint(e.Location);
                if (index != m_previous_index)
                {
                    m_previous_index = index;
                    if ((index >= 0) && (index < WordsListBox.Items.Count))
                    {
                        char[] separators = { ' ' };
                        string[] parts = WordsListBox.Items[index].ToString().Split(separators, StringSplitOptions.RemoveEmptyEntries);
                        if (parts.Length > 1)
                        {
                            DisplayWordVerses(parts[1]);
                        }
                    }
                }
            }
        }
        else
        {
            ToolTip.SetToolTip(WordsListBox, null);
        }
    }
    private void WordsListBox_Click(object sender, EventArgs e)
    {
        // do nothing
    }
    private void WordsListBox_DoubleClick(object sender, EventArgs e)
    {
        m_word_double_click = true;
        if (WordsListBox.Items.Count > 0)
        {
            AddNextWordToFindText();
        }
        else
        {
            FindByTextButton_Click(null, null);
        }
        m_word_double_click = false;
    }
    private void WordsListBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        if (m_word_frequency_dictionary != null)
        {
            int count = 0;
            int total = 0;
            if (WordsListBox.SelectedIndices.Count > 1)
            {
                // update total(unique) counts
                foreach (object item in WordsListBox.SelectedItems)
                {
                    string[] parts = item.ToString().Split();
                    if (parts.Length > 0)
                    {
                        total += int.Parse(parts[0]);
                        count++;
                    }
                }
            }
            else
            {
                // restore total(unique) counts
                foreach (string key in m_word_frequency_dictionary.Keys)
                {
                    total += m_word_frequency_dictionary[key];
                    count++;
                }
            }

            WordsListBoxLabel.Text = total.ToString() + " (" + count.ToString() + ")";
            WordsListBoxLabel.ForeColor = GetNumberTypeColor(total);
            WordsListBoxLabel.Refresh();
        }
    }
    private void WordsListBoxLabel_Click(object sender, EventArgs e)
    {
        // Ctrl+Click factorizes number
        if (ModifierKeys == Keys.Control)
        {
            NumericUpDown_Enter(sender, e);
        }
        else
        {
            m_sort_by_word_frequency = !m_sort_by_word_frequency;
            ToolTip.SetToolTip(WordsListBoxLabel, (m_sort_by_word_frequency ? "sort alphabetically" : "sort by frequency"));

            if (m_auto_complete_mode)
            {
                PopulateWordsListBox();
            }
            else
            {
                PopulateWordsListBoxWithHighlightedWords();
            }
        }
    }
    private void AddNextWordToFindText()
    {
        if (WordsListBox.SelectedItem != null)
        {
            string word_to_add = WordsListBox.SelectedItem.ToString();
            int pos = word_to_add.LastIndexOf(' ');
            if (pos > -1)
            {
                word_to_add = word_to_add.Substring(pos + 1);
            }

            string text = FindByTextTextBox.Text;
            int index = text.LastIndexOf(' ');
            if (index != -1)
            {
                if (text.Length > index + 1)
                {
                    if ((text[index + 1] == '+') || (text[index + 1] == '-'))
                    {
                        index++;
                    }
                }

                text = text.Substring(0, index + 1);
                text += word_to_add;
                FindByTextTextBox.Text = text + " ";
                m_edited_by_hand = false;
            }
            else
            {
                FindByTextTextBox.Text = word_to_add + " ";
                m_edited_by_hand = false;
            }
            FindByTextTextBox.Refresh();
            FindByTextTextBox.SelectionStart = FindByTextTextBox.Text.Length;
        }
    }
    private void PopulateWordsListBox()
    {
        if (m_text_search_type == TextSearchType.Exact)
        {
            PopulateWordsListBoxWithCurrentOrNextWords();
        }
        else if (m_text_search_type == TextSearchType.Root)
        {
            PopulateWordsListBoxWithRoots();
        }
        else if (m_text_search_type == TextSearchType.Proximity)
        {
            PopulateWordsListBoxWithCurrentWords();
        }
    }
    private void PopulateWordsListBoxWithCurrentOrNextWords()
    {
        try
        {
            for (int i = 0; i < 3; i++) WordsListBox.SelectedIndexChanged -= new EventHandler(WordsListBox_SelectedIndexChanged);

            if (m_client != null)
            {
                //SearchGroupBox.Text = " Search by Exact words      ";
                //SearchGroupBox.Refresh();
                WordsListBoxLabel.Text = "000 (00)";
                WordsListBoxLabel.ForeColor = GetNumberTypeColor(0);
                //ToolTip.SetToolTip(WordsListBoxLabel, "total (unique)");
                WordsListBoxLabel.Refresh();

                WordsListBox.BeginUpdate();
                WordsListBox.Items.Clear();

                m_auto_complete_mode = true;

                string text = FindByTextTextBox.Text;
                if (!String.IsNullOrEmpty(text))
                {
                    if (text.EndsWith(" "))
                    {
                        m_word_frequency_dictionary = m_client.GetNextWords(text, m_text_location_in_chapter, m_text_location_in_verse, m_text_location_in_word, m_text_wordness, m_case_sensitive, m_with_diacritics);
                    }
                    else
                    {
                        m_word_frequency_dictionary = m_client.GetCurrentWords(text, m_text_location_in_chapter, m_text_location_in_verse, m_text_location_in_word, m_text_wordness, m_case_sensitive, m_with_diacritics);
                    }

                    if (m_word_frequency_dictionary != null)
                    {
                        // sort dictionary by value or key
                        List<KeyValuePair<string, int>> list = new List<KeyValuePair<string, int>>(m_word_frequency_dictionary);
                        if (m_sort_by_word_frequency)
                        {
                            list.Sort(
                                delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                {
                                    return nextPair.Value.CompareTo(firstPair.Value);
                                }
                            );
                        }
                        else
                        {
                            list.Sort(
                                delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                {
                                    return firstPair.Key.CompareTo(nextPair.Key);
                                }
                            );
                        }

                        int count = 0;
                        int total = 0;
                        foreach (KeyValuePair<string, int> pair in list)
                        {
                            //string value_str = found_words[key].ToString().PadRight(3, ' ');
                            //string key_str = key.PadLeft(10, ' ');
                            //string entry = String.Format("{0} {1}", value_str, key_str);
                            string entry = String.Format("{0,-3} {1,10}", pair.Value, pair.Key);
                            WordsListBox.Items.Add(entry);
                            total += pair.Value;
                            count++;
                        }

                        if (WordsListBox.Items.Count > 0)
                        {
                            WordsListBox.SelectedIndex = 0;
                        }
                        else // no match [either current text_mode doesn't have a match or it was last word in verse]
                        {
                            // m_word_frequency_list_double_click == false if input was via keyboard
                            // m_word_frequency_list_double_click == true  if input was via double click
                            // if no more word when double click, then it means it was the last word in the verse
                            // else the user has entered non-matching text

                            // if last word in verse, remove the extra space after it
                            if ((m_word_double_click) && (WordsListBox.Items.Count == 0) && (FindByTextTextBox.Text.EndsWith(" ")))
                            {
                                for (int i = 0; i < 3; i++) FindByTextTextBox.TextChanged -= new EventHandler(FindByTextTextBox_TextChanged);
                                try
                                {
                                    FindByTextTextBox.Text = FindByTextTextBox.Text.Remove(FindByTextTextBox.Text.Length - 1);
                                }
                                finally
                                {
                                    FindByTextTextBox.TextChanged += new EventHandler(FindByTextTextBox_TextChanged);
                                }
                            }
                        }

                        WordsListBoxLabel.Text = total.ToString() + " (" + count.ToString() + ")";
                        WordsListBoxLabel.ForeColor = GetNumberTypeColor(total);
                        WordsListBoxLabel.Refresh();
                    }
                }
            }
        }
        finally
        {
            WordsListBox.EndUpdate();
            WordsListBox.SelectedIndexChanged += new EventHandler(WordsListBox_SelectedIndexChanged);
        }
    }
    private void PopulateWordsListBoxWithCurrentWords()
    {
        try
        {
            for (int i = 0; i < 3; i++) WordsListBox.SelectedIndexChanged -= new EventHandler(WordsListBox_SelectedIndexChanged);

            if (m_client != null)
            {
                //SearchGroupBox.Text = " Search by Proximity        ";
                //SearchGroupBox.Refresh();
                WordsListBoxLabel.Text = "000 (00)";
                WordsListBoxLabel.ForeColor = GetNumberTypeColor(0);
                //ToolTip.SetToolTip(WordsListBoxLabel, "total (unique)");
                WordsListBoxLabel.Refresh();

                WordsListBox.BeginUpdate();
                WordsListBox.Items.Clear();

                m_auto_complete_mode = true;

                string text = FindByTextTextBox.Text;
                if (!String.IsNullOrEmpty(text))
                {
                    string[] text_parts = text.Split();
                    text = text_parts[text_parts.Length - 1];
                    if (!String.IsNullOrEmpty(text))
                    {
                        m_word_frequency_dictionary = m_client.GetCurrentWords(text, m_text_location_in_chapter, m_text_location_in_verse, m_text_location_in_word, m_text_wordness, m_case_sensitive, m_with_diacritics);
                        if (m_word_frequency_dictionary != null)
                        {
                            // sort dictionary by value or key
                            List<KeyValuePair<string, int>> list = new List<KeyValuePair<string, int>>(m_word_frequency_dictionary);
                            if (m_sort_by_word_frequency)
                            {
                                list.Sort(
                                    delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                    {
                                        return nextPair.Value.CompareTo(firstPair.Value);
                                    }
                                );
                            }
                            else
                            {
                                list.Sort(
                                    delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                    {
                                        return firstPair.Key.CompareTo(nextPair.Key);
                                    }
                                );
                            }

                            int count = 0;
                            int total = 0;
                            foreach (KeyValuePair<string, int> pair in list)
                            {
                                //string value_str = found_words[key].ToString().PadRight(3, ' ');
                                //string key_str = key.PadLeft(10, ' ');
                                //string entry = String.Format("{0} {1}", value_str, key_str);
                                string entry = String.Format("{0,-3} {1,10}", pair.Value, pair.Key);
                                WordsListBox.Items.Add(entry);
                                total += pair.Value;
                                count++;
                            }

                            if (WordsListBox.Items.Count > 0)
                            {
                                WordsListBox.SelectedIndex = 0;
                            }
                            else
                            {
                                // if not a valid word, keep word as is
                            }

                            WordsListBoxLabel.Text = total.ToString() + " (" + count.ToString() + ")";
                            WordsListBoxLabel.ForeColor = GetNumberTypeColor(total);
                            WordsListBoxLabel.Refresh();
                        }
                    }
                }
            }
        }
        finally
        {
            WordsListBox.EndUpdate();
            WordsListBox.SelectedIndexChanged += new EventHandler(WordsListBox_SelectedIndexChanged);
        }
    }
    private void PopulateWordsListBoxWithRoots()
    {
        try
        {
            for (int i = 0; i < 3; i++) WordsListBox.SelectedIndexChanged -= new EventHandler(WordsListBox_SelectedIndexChanged);

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    //SearchGroupBox.Text = " Search by Roots            ";
                    //SearchGroupBox.Refresh();
                    WordsListBoxLabel.Text = "000 (00)";
                    WordsListBoxLabel.ForeColor = GetNumberTypeColor(0);
                    //ToolTip.SetToolTip(WordsListBoxLabel, "total (unique)");
                    WordsListBoxLabel.Refresh();

                    WordsListBox.BeginUpdate();
                    WordsListBox.Items.Clear();

                    m_auto_complete_mode = true;

                    string text = FindByTextTextBox.Text;

                    // to support multi root search take the last word a user is currently writing
                    string[] text_parts = text.Split();
                    if (text_parts.Length > 0)
                    {
                        text = text_parts[text_parts.Length - 1];
                    }

                    m_word_frequency_dictionary = new Dictionary<string, int>();
                    if (m_word_frequency_dictionary != null)
                    {
                        switch (m_client.SearchScope)
                        {
                            case SearchScope.Book:
                                {
                                    m_word_frequency_dictionary = m_client.Book.GetWordRoots(m_client.Book.Verses, text, m_text_location_in_word);
                                }
                                break;
                            case SearchScope.Selection:
                                {
                                    m_word_frequency_dictionary = m_client.Book.GetWordRoots(m_client.Selection.Verses, text, m_text_location_in_word);
                                }
                                break;
                            case SearchScope.Result:
                                {
                                    m_word_frequency_dictionary = m_client.Book.GetWordRoots(m_client.FoundVerses, text, m_text_location_in_word);
                                }
                                break;
                        }

                        if (m_word_frequency_dictionary != null)
                        {
                            // sort dictionary by value or key
                            List<KeyValuePair<string, int>> list = new List<KeyValuePair<string, int>>(m_word_frequency_dictionary);
                            if (m_sort_by_word_frequency)
                            {
                                list.Sort(
                                    delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                    {
                                        return nextPair.Value.CompareTo(firstPair.Value);
                                    }
                                );
                            }
                            else
                            {
                                list.Sort(
                                    delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                    {
                                        return firstPair.Key.CompareTo(nextPair.Key);
                                    }
                                );
                            }

                            int count = 0;
                            int total = 0;
                            foreach (KeyValuePair<string, int> pair in list)
                            {
                                //string value_str = found_words[key].ToString().PadRight(3, ' ');
                                //string key_str = key.PadLeft(10, ' ');
                                //string entry = String.Format("{0} {1}", value_str, key_str);
                                string entry = String.Format("{0,-3} {1,10}", pair.Value, pair.Key);
                                WordsListBox.Items.Add(entry);
                                total += pair.Value;
                                count++;
                            }

                            if (WordsListBox.Items.Count > 0)
                            {
                                WordsListBox.SelectedIndex = 0;
                            }
                            else
                            {
                                // if not a valid root, put word as is so we can find same rooted words
                                WordsListBox.Items.Add(text);
                            }
                            WordsListBoxLabel.Text = total.ToString() + " (" + count.ToString() + ")";
                            WordsListBoxLabel.ForeColor = GetNumberTypeColor(total);
                            WordsListBoxLabel.Refresh();
                        }
                    }
                }
            }
        }
        finally
        {
            WordsListBox.EndUpdate();
            WordsListBox.SelectedIndexChanged += new EventHandler(WordsListBox_SelectedIndexChanged);
        }
    }
    private void PopulateWordsListBoxWithHighlightedWords()
    {
        try
        {
            for (int i = 0; i < 3; i++) WordsListBox.SelectedIndexChanged -= new EventHandler(WordsListBox_SelectedIndexChanged);

            if (m_client != null)
            {
                WordsListBox.BeginUpdate();
                WordsListBox.Items.Clear();

                m_auto_complete_mode = false;

                //CalculateCurrentText();
                string text = m_current_text;
                if (!String.IsNullOrEmpty(text))
                {
                    text = text.Replace("\n", " ");
                    text = text.Replace("\r", "");
                    text = text.Replace("\t", "");
                    text = text.Replace("_", "");
                    text = text.Replace(Constants.OPEN_BRACKET, "");
                    text = text.Replace(Constants.CLOSE_BRACKET, "");
                    foreach (char character in Constants.INDIAN_DIGITS)
                    {
                        text = text.Replace(character.ToString(), "");
                    }
                    foreach (char character in Constants.QURANMARKS)
                    {
                        text = text.Replace(character.ToString(), "");
                    }
                    foreach (char character in Constants.STOPMARKS)
                    {
                        text = text.Replace(character.ToString(), "");
                    }
                    while (text.Contains("  "))
                    {
                        text = text.Replace("  ", " ");
                    }
                    text = text.Trim();

                    string[] words = text.Split();
                    m_word_frequency_dictionary = new Dictionary<string, int>();
                    if (m_word_frequency_dictionary != null)
                    {
                        foreach (string word in words)
                        {
                            if (m_word_frequency_dictionary.ContainsKey(word))
                            {
                                m_word_frequency_dictionary[word]++;
                            }
                            else
                            {
                                m_word_frequency_dictionary.Add(word, 1);
                            }
                        }

                        // sort dictionary by value or key
                        List<KeyValuePair<string, int>> list = new List<KeyValuePair<string, int>>(m_word_frequency_dictionary);
                        if (m_sort_by_word_frequency)
                        {
                            list.Sort(
                                delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                {
                                    return nextPair.Value.CompareTo(firstPair.Value);
                                }
                            );
                        }
                        else
                        {
                            list.Sort(
                                delegate(KeyValuePair<string, int> firstPair, KeyValuePair<string, int> nextPair)
                                {
                                    return firstPair.Key.CompareTo(nextPair.Key);
                                }
                            );
                        }

                        int count = 0;
                        int total = 0;
                        foreach (KeyValuePair<string, int> pair in list)
                        {
                            string entry = String.Format("{0,-3} {1,10}", pair.Value, pair.Key);
                            WordsListBox.Items.Add(entry);
                            total += pair.Value;
                            count++;
                        }

                        if (WordsListBox.Items.Count > 0)
                        {
                            WordsListBox.SelectedIndex = 0;
                        }
                        else
                        {
                            // if not a valid word, keep word as is
                        }

                        WordsListBoxLabel.Text = total.ToString() + " (" + count.ToString() + ")";
                        WordsListBoxLabel.ForeColor = GetNumberTypeColor(total);
                        WordsListBoxLabel.Refresh();
                    }
                }
            }
        }
        finally
        {
            WordsListBox.EndUpdate();
            WordsListBox.SelectedIndexChanged += new EventHandler(WordsListBox_SelectedIndexChanged);
        }
    }
    private void DisplayWordFrequencies()
    {
        PopulateWordsListBoxWithHighlightedWords();
        EnableFindByTextControls();
        FindByTextControls_Enter(null, null);
    }
    private void DisplayWordVerses(string item_text)
    {
        if (!String.IsNullOrEmpty(item_text))
        {
            if (m_client != null)
            {
                List<Verse> backup_found_verses = null;
                List<Phrase> backup_found_phrases = null;
                if (m_client.FoundVerses != null)
                {
                    backup_found_verses = new List<Verse>(m_client.FoundVerses);
                }
                if (m_client.FoundPhrases != null)
                {
                    backup_found_phrases = new List<Phrase>(m_client.FoundPhrases);
                }

                // get startup text from FindTextBox
                string[] startup_words = FindByTextTextBox.Text.Split();
                int count = startup_words.Length;
                // ignore final incomplete word
                if (!FindByTextTextBox.Text.EndsWith(" "))
                {
                    count--;
                }
                string startup_text = "";
                for (int i = 0; i < count; i++)
                {
                    startup_text += startup_words[i] + " ";
                }
                if (startup_text.Length > 0)
                {
                    startup_text = startup_text.Remove(startup_text.Length - 1, 1);
                }

                List<string> word_texts = new List<string>();
                char[] separators = { ' ' };
                string[] parts = item_text.Split(separators, StringSplitOptions.RemoveEmptyEntries);
                if (parts.Length == 1)  // root
                {
                    word_texts.Add(parts[0]);
                }
                else if (parts.Length == 2) // exact or proximity
                {
                    word_texts.Add(parts[1]);
                }

                // setup search parameters
                string text = "";
                //string translation = Client.DEFAULT_TRANSLATION;

                // update m_text_location_in_verse and m_text_location_in_word
                UpdateFindByTextOptions();

                List<Verse> total_verses = new List<Verse>();
                if (word_texts.Count > 0)
                {
                    foreach (string word_text in word_texts)
                    {
                        if (startup_text.Length > 0)
                        {
                            text = startup_text + " " + word_text;
                        }
                        else
                        {
                            text = word_text;
                        }

                        if (!String.IsNullOrEmpty(text))
                        {
                            switch (m_text_search_type)
                            {
                                case TextSearchType.Exact:
                                    {
                                        m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_language_type, null, m_text_location_in_chapter, m_text_location_in_verse, m_text_location_in_word, TextWordness.WholeWord, m_case_sensitive, m_with_diacritics, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                                    }
                                    break;
                                case TextSearchType.Root:
                                    {
                                        m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                                    }
                                    break;
                                case TextSearchType.Proximity:
                                    {
                                        m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_language_type, null, m_text_proximity_type, TextWordness.WholeWord, m_case_sensitive, m_with_diacritics);
                                    }
                                    break;
                            }

                            total_verses = total_verses.Union(m_client.FoundVerses);
                        }
                    }

                    int i = 0;
                    StringBuilder str = new StringBuilder();
                    foreach (Verse verse in total_verses)
                    {
                        i++;
                        if (i > 114) break;
                        str.AppendLine(verse.Text);
                    }
                    ToolTip.SetToolTip(WordsListBox, str.ToString());
                }

                if (backup_found_verses != null)
                {
                    m_client.FoundVerses = backup_found_verses;
                }
                if (backup_found_phrases != null)
                {
                    m_client.FoundPhrases = backup_found_phrases;
                }
            }
        }
    }
    private void FindSelectedWordsMenuItem_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            // get startup text from FindTextBox
            string[] startup_words = FindByTextTextBox.Text.Split();
            int count = startup_words.Length;
            // ignore final incomplete word
            if (!FindByTextTextBox.Text.EndsWith(" "))
            {
                count--;
            }

            string startup_text = "";
            if (m_auto_complete_mode)
            {
                for (int i = 0; i < count; i++)
                {
                    startup_text += startup_words[i] + " ";
                }
                if (startup_text.Length > 0)
                {
                    startup_text = startup_text.Remove(startup_text.Length - 1, 1);
                }
            }

            // get selected word texts
            List<string> word_texts = new List<string>();
            if (WordsListBox.SelectedIndices.Count > 0)
            {
                char[] separators = { ' ' };
                foreach (object item in WordsListBox.SelectedItems)
                {
                    string[] parts = item.ToString().Split(separators, StringSplitOptions.RemoveEmptyEntries);
                    if (parts.Length == 1)  // root
                    {
                        word_texts.Add(parts[0]);
                    }
                    else if (parts.Length == 2) // exact or proximity
                    {
                        word_texts.Add(parts[1]);
                    }
                }
            }

            // setup search parameters
            string text = "";
            //string translation = Client.DEFAULT_TRANSLATION;

            // update m_text_location_in_verse and m_text_location_in_word
            UpdateFindByTextOptions();

            List<Phrase> total_phrases = new List<Phrase>();
            List<Verse> total_verses = new List<Verse>();
            if (word_texts.Count > 0)
            {
                foreach (string word_text in word_texts)
                {
                    if (startup_text.Length > 0)
                    {
                        text = startup_text + " " + word_text;
                    }
                    else
                    {
                        text = word_text;
                    }

                    if (!String.IsNullOrEmpty(text))
                    {
                        switch (m_text_search_type)
                        {
                            case TextSearchType.Exact:
                                {
                                    if (FindByTextTextBox.Text.EndsWith(" "))
                                    {
                                        m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_language_type, null, m_text_location_in_chapter, m_text_location_in_verse, m_text_location_in_word, TextWordness.Any, m_case_sensitive, m_with_diacritics, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                                    }
                                    else
                                    {
                                        m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_language_type, null, m_text_location_in_chapter, m_text_location_in_verse, m_text_location_in_word, TextWordness.WholeWord, m_case_sensitive, m_with_diacritics, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                                    }
                                }
                                break;
                            case TextSearchType.Root:
                                {
                                    m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                                }
                                break;
                            case TextSearchType.Proximity:
                                {
                                    m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_language_type, null, m_text_proximity_type, TextWordness.Any, m_case_sensitive, m_with_diacritics);
                                }
                                break;
                        }

                        total_phrases = total_phrases.Union(m_client.FoundPhrases);
                        total_verses = total_verses.Union(m_client.FoundVerses);
                    }
                }

                // write final result to m_client
                m_client.FoundPhrases = total_phrases;
                m_client.FoundVerses = total_verses;
            }

            // display results
            if (m_client.FoundPhrases != null)
            {
                int phrase_count = GetPhraseCount(m_client.FoundPhrases);
                if (m_client.FoundVerses != null)
                {
                    int verse_count = m_client.FoundVerses.Count;
                    m_find_result_header = phrase_count + " matches in " + verse_count + ((verse_count == 1) ? " verse" : " verses") + " with " + text + " C_" + m_text_location_in_chapter.ToString() + " V_" + m_text_location_in_verse.ToString() + " W_" + m_text_location_in_word.ToString() + " in " + m_client.SearchScope.ToString();
                    DisplayFoundVerses(true, true);

                    SearchResultTextBox.Focus();
                    SearchResultTextBox.Refresh();

                    WordsListBoxLabel.Visible = false;
                    WordsListBox.Visible = false;
                }
            }
        }
    }
    private void InspectWordFrequencies()
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            string text = FindByTextTextBox.Text;

            if (Directory.Exists(Globals.STATISTICS_FOLDER))
            {
                string filename = Globals.STATISTICS_FOLDER + "/" + ((m_text_search_type == TextSearchType.Root) ? "root_" : "") + text + ".txt";
                using (StreamWriter writer = new StreamWriter(filename, false, Encoding.Unicode))
                {
                    StringBuilder str = new StringBuilder();
                    str.AppendLine("-----------------");
                    str.AppendLine(((m_text_search_type == TextSearchType.Root) ? "Root" : "Word") + "\t" + "Frequency");
                    str.AppendLine("-----------------");

                    int count = 0;
                    int total = 0;
                    char[] separators = { ' ' };
                    if (WordsListBox.SelectedIndices.Count > 1)
                    {
                        count = WordsListBox.SelectedIndices.Count;
                        foreach (object item in WordsListBox.SelectedItems)
                        {
                            string[] parts = item.ToString().Split(separators, StringSplitOptions.RemoveEmptyEntries);
                            if (parts.Length == 2)
                            {
                                str.AppendLine(parts[1] + "\t" + parts[0]);
                                total += int.Parse(parts[0]);
                            }
                        }
                    }
                    else
                    {
                        count = WordsListBox.Items.Count;
                        foreach (object item in WordsListBox.Items)
                        {
                            string[] parts = item.ToString().Split(separators, StringSplitOptions.RemoveEmptyEntries);
                            if (parts.Length == 2)
                            {
                                str.AppendLine(parts[1] + "\t" + parts[0]);
                                total += int.Parse(parts[0]);
                            }
                        }
                    }
                    str.AppendLine("-----------------");
                    str.AppendLine("Count = " + count.ToString());
                    str.AppendLine("Total = " + total.ToString());

                    writer.Write(str.ToString());
                }

                // show file content after save
                if (File.Exists(filename))
                {
                    FileHelper.WaitForReady(filename);

                    System.Diagnostics.Process.Start("Notepad.exe", filename);
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Search Setup
    ///////////////////////////////////////////////////////////////////////////////
    private SearchType m_search_type = SearchType.Text; // named with private to indicate must set via Property, not directly by field
    private LanguageType m_language_type = LanguageType.RightToLeft;
    private void SearchScopeBookLabel_Click(object sender, EventArgs e)
    {
        m_client.SearchScope = SearchScope.Book;
        FindByTextTextBox_TextChanged(null, null);
    }
    private void SearchScopeSelectionLabel_Click(object sender, EventArgs e)
    {
        m_client.SearchScope = SearchScope.Selection;
        FindByTextTextBox_TextChanged(null, null);
    }
    private void SearchScopeResultLabel_Click(object sender, EventArgs e)
    {
        m_client.SearchScope = SearchScope.Result;
        FindByTextTextBox_TextChanged(null, null);
    }
    private void SearchGroupBox_Enter(object sender, EventArgs e)
    {
    }
    private void SearchGroupBox_Leave(object sender, EventArgs e)
    {
        //if (!WordsListBox.Focused)
        //{
        //    ToolTip.SetToolTip(ChaptersInspectLabel, "Inspect chapters");
        //    WordsListBoxLabel.Visible = false;
        //    WordsListBox.Visible = false;
        //}
    }
    private void ClearFindMatches()
    {
        PlayerStopLabel_Click(null, null);

        m_find_matches = new List<FindMatch>();
        m_find_match_index = -1;
    }
    private void UpdateFindByTextOptions()
    {
        if (FindByTextAtChapterAnywhereRadioButton.Checked)
        {
            m_text_location_in_chapter = TextLocationInChapter.Anywhere;
        }
        else if (FindByTextAtChapterStartRadioButton.Checked)
        {
            m_text_location_in_chapter = TextLocationInChapter.AtStart;
        }
        else if (FindByTextAtChapterMiddleRadioButton.Checked)
        {
            m_text_location_in_chapter = TextLocationInChapter.AtMiddle;
        }
        else if (FindByTextAtChapterEndRadioButton.Checked)
        {
            m_text_location_in_chapter = TextLocationInChapter.AtEnd;
        }

        if (FindByTextAtVerseAnywhereRadioButton.Checked)
        {
            m_text_location_in_verse = TextLocationInVerse.Anywhere;
        }
        else if (FindByTextAtVerseStartRadioButton.Checked)
        {
            m_text_location_in_verse = TextLocationInVerse.AtStart;
        }
        else if (FindByTextAtVerseMiddleRadioButton.Checked)
        {
            m_text_location_in_verse = TextLocationInVerse.AtMiddle;
        }
        else if (FindByTextAtVerseEndRadioButton.Checked)
        {
            m_text_location_in_verse = TextLocationInVerse.AtEnd;
        }

        if (FindByTextAtWordAnywhereRadioButton.Checked)
        {
            m_text_location_in_word = TextLocationInWord.Anywhere;
        }
        else if (FindByTextAtWordStartRadioButton.Checked)
        {
            m_text_location_in_word = TextLocationInWord.AtStart;
        }
        else if (FindByTextAtWordMiddleRadioButton.Checked)
        {
            m_text_location_in_word = TextLocationInWord.AtMiddle;
        }
        else if (FindByTextAtWordEndRadioButton.Checked)
        {
            m_text_location_in_word = TextLocationInWord.AtEnd;
        }

        switch (FindByTextWordnessCheckBox.CheckState)
        {
            case CheckState.Checked:
                m_text_wordness = TextWordness.WholeWord;
                break;
            case CheckState.Indeterminate:
                m_text_wordness = TextWordness.PartOfWord;
                break;
            case CheckState.Unchecked:
                m_text_wordness = TextWordness.Any;
                break;
        }

        m_case_sensitive = FindByTextCaseSensitiveCheckBox.Checked;

        m_with_diacritics = FindByTextWithDiacriticsCheckBox.Checked;

        m_multiplicity = FindByTextMultiplicityNumericUpDown.Enabled ? (int)FindByTextMultiplicityNumericUpDown.Value : -1;
    }
    private int GetPhraseCount(List<Phrase> phrases)
    {
        int count = 0;
        foreach (Phrase phrase in phrases)
        {
            if (phrase != null)
            {
                if (!String.IsNullOrEmpty(phrase.Text))
                {
                    count++;
                }
            }
        }
        return count;
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Search By Text
    ///////////////////////////////////////////////////////////////////////////////
    private TextSearchType m_text_search_type = TextSearchType.Exact;
    private TextSearchBlockSize m_text_search_block_size = TextSearchBlockSize.Verse;
    private TextLocationInChapter m_text_location_in_chapter = TextLocationInChapter.Anywhere;
    private TextLocationInVerse m_text_location_in_verse = TextLocationInVerse.Anywhere;
    private TextLocationInWord m_text_location_in_word = TextLocationInWord.Anywhere;
    private TextProximityType m_text_proximity_type = TextProximityType.AllWords;
    private TextWordness m_text_wordness = TextWordness.Any;
    private bool m_case_sensitive = false;
    private bool m_with_diacritics = false;
    private int m_multiplicity = -1;
    private NumberType m_multiplicity_number_type = NumberType.None;
    private ComparisonOperator m_multiplicity_comparison_operator = ComparisonOperator.Equal;
    private int m_multiplicity_remainder = -1;
    private void SetLanguageType(LanguageType language_type)
    {
        if (language_type == LanguageType.RightToLeft)
        {
            m_language_type = language_type;
        }
        else if (language_type == LanguageType.LeftToRight)
        {
            if (m_text_search_type == TextSearchType.Root)
            {
                m_language_type = LanguageType.RightToLeft;
            }
            else
            {
                m_language_type = language_type;
            }
        }
    }
    private void FindByTextExactSearchTypeLabel_Click(object sender, EventArgs e)
    {
        m_text_search_type = TextSearchType.Exact;
        PopulateWordsListBoxWithCurrentOrNextWords();
        FindByTextAtVerseAnywhereRadioButton.Checked = true;

        EnableFindByTextControls();
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextProximitySearchTypeLabel_Click(object sender, EventArgs e)
    {
        m_text_search_type = TextSearchType.Proximity;
        PopulateWordsListBoxWithCurrentWords();
        FindByTextAllWordsRadioButton.Checked = true;

        EnableFindByTextControls();
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextRootSearchTypeLabel_Click(object sender, EventArgs e)
    {
        m_text_search_type = TextSearchType.Root;
        PopulateWordsListBoxWithRoots();

        EnableFindByTextControls();
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizeVerseLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Verse;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizeChapterLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Chapter;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizePageLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Page;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizeStationLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Station;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizePartLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Part;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizeGroupLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Group;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizeHalfLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Half;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizeQuarterLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Quarter;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextSearchBlockSizeBowingLabel_Click(object sender, EventArgs e)
    {
        m_text_search_block_size = TextSearchBlockSize.Bowing;
        FindByTextControls_Enter(null, null);
    }
    private void FindByTextRadioButton_CheckedChanged(object sender, EventArgs e)
    {
        UpdateFindByTextOptions();
        PopulateWordsListBox();
    }
    private void FindByTextWithDiacriticsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                m_with_diacritics = FindByTextWithDiacriticsCheckBox.Checked;
                m_client.Book.WithDiacritics = m_with_diacritics;

                PopulateWordsListBox();

                if ((Globals.EDITION == Edition.Standard || Globals.EDITION == Edition.Grammar))
                {
                    BuildLetterFrequencies();
                    DisplayLetterFrequencies();
                }
            }
        }
        LetterFrequencyWithDiacriticsCheckBox.Checked = FindByTextWithDiacriticsCheckBox.Checked && (Globals.EDITION == Edition.Standard || Globals.EDITION == Edition.Grammar);
    }
    private void LetterFrequencyWithDiacriticsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        FindByTextWithDiacriticsCheckBox.Checked = LetterFrequencyWithDiacriticsCheckBox.Checked;
    }
    private void FindByTextWordnessCheckBox_CheckStateChanged(object sender, EventArgs e)
    {
        EnableFindByTextControls();
        UpdateFindByTextOptions();
        PopulateWordsListBox();

        if (PictureBox.Visible)
        {
            if (m_current_drawing_type == DrawingType.SearchTerms)
            {
                RedrawImage();
            }
        }
    }
    private void FindByTextCaseSensitiveCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        EnableFindByTextControls();
        UpdateFindByTextOptions();
        PopulateWordsListBox();
    }
    private void FindByTextMultiplicityCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        FindByTextMultiplicityComparisonOperatorLabel.Enabled = (FindByTextMultiplicityCheckBox.Enabled) && (FindByTextMultiplicityCheckBox.Checked);
        FindByTextMultiplicityNumericUpDown.Enabled = (FindByTextMultiplicityCheckBox.Enabled) && (FindByTextMultiplicityCheckBox.Checked);
        FindByTextMultiplicityNumberTypeLabel.Enabled = (FindByTextMultiplicityCheckBox.Enabled) && (FindByTextMultiplicityCheckBox.Checked);

        UpdateFindByTextOptions();
        PopulateWordsListBox();

        UpdateMultiplicityParameters();
    }
    private void UpdateMultiplicityParameters()
    {
        // 1. number types
        string multiplicity_symbol = FindByTextMultiplicityNumberTypeLabel.Enabled ? FindByTextMultiplicityNumberTypeLabel.Text : "";
        m_multiplicity_number_type =
            (multiplicity_symbol == "P") ? NumberType.Prime :
            (multiplicity_symbol == "AP") ? NumberType.AdditivePrime :
            (multiplicity_symbol == "XP") ? NumberType.NonAdditivePrime :
            (multiplicity_symbol == "C") ? NumberType.Composite :
            (multiplicity_symbol == "AC") ? NumberType.AdditiveComposite :
            (multiplicity_symbol == "XC") ? NumberType.NonAdditiveComposite :
            (multiplicity_symbol == "O") ? NumberType.Odd :
            (multiplicity_symbol == "E") ? NumberType.Even :
            (multiplicity_symbol == "^2") ? NumberType.Square :
            (multiplicity_symbol == "^3") ? NumberType.Cubic :
            (multiplicity_symbol == "^4") ? NumberType.Quartic :
            (multiplicity_symbol == "^5") ? NumberType.Quintic :
            (multiplicity_symbol == "^6") ? NumberType.Sextic :
            (multiplicity_symbol == "^7") ? NumberType.Septic :
            (multiplicity_symbol == "") ? NumberType.None :
                                           NumberType.Natural;

        // 2. numbers
        m_multiplicity = FindByTextMultiplicityNumericUpDown.Enabled ? (int)FindByTextMultiplicityNumericUpDown.Value : -1;

        // 3. comparison operators = ≠ < ≤ > ≥ ÷ !÷ Ʃ
        string multiplicity_operator_symbol = FindByTextMultiplicityComparisonOperatorLabel.Text;
        m_multiplicity_comparison_operator =
            (multiplicity_operator_symbol == "=") ? ComparisonOperator.Equal :
            (multiplicity_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
            (multiplicity_operator_symbol == "<") ? ComparisonOperator.LessThan :
            (multiplicity_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
            (multiplicity_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
            (multiplicity_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
            (multiplicity_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
            (multiplicity_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
            (multiplicity_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                     ComparisonOperator.Reserved;

        // 4. remainders for % comparison operator
        m_multiplicity_remainder = -1;
        if (m_multiplicity_comparison_operator == ComparisonOperator.DivisibleBy)
        {
            try
            {
                m_multiplicity_remainder = int.Parse(FindByTextMultiplicityNumberTypeLabel.Text);
            }
            catch
            {
                // keep as -1
            }
        }
    }
    private void FindByTextMultiplicityNumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        UpdateMultiplicityNumberTypeLabelTags();

        UpdateFindByTextOptions();
        PopulateWordsListBox();
        if (ModifierKeys == Keys.Control)
        {
            FindByTextButton_Click(null, null);
        }
    }
    private void FindByTextControls_Enter(object sender, EventArgs e)
    {
        this.AcceptButton = FindByTextButton;

        FindByTextButton.Enabled = true;
        FindBySimilarityButton.Enabled = false;
        FindByNumbersButton.Enabled = false;
        FindByProstrationTypeButton.Enabled = false;
        FindByFrequencyButton.Enabled = false;

        if (m_text_search_type == TextSearchType.Root)
        {
            ToolTip.SetToolTip(ChaptersInspectLabel, "Inspect root frequencies");
        }
        else
        {
            ToolTip.SetToolTip(ChaptersInspectLabel, "Inspect word frequencies");
        }
        WordsListBoxLabel.Visible = true;
        WordsListBox.Visible = true;
        WordsListBoxLabel.BringToFront();
        WordsListBox.BringToFront();

        ResetFindByTextSearchTypeLabels();
        ResetFindByTextSearchBlockSizeLabels();
        ResetFindBySimilarityResultTypeLabels();
        ResetFindByNumbersResultTypeLabels();
        ResetFindByFrequencyResultTypeLabels();

        switch (m_text_search_type)
        {
            case TextSearchType.Exact:
                {
                    FindByTextExactSearchTypeLabel.BackColor = Color.SteelBlue;
                    FindByTextExactSearchTypeLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchType.Proximity:
                {
                    FindByTextProximitySearchTypeLabel.BackColor = Color.SteelBlue;
                    FindByTextProximitySearchTypeLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchType.Root:
                {
                    FindByTextRootSearchTypeLabel.BackColor = Color.SteelBlue;
                    FindByTextRootSearchTypeLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            default:
                break;
        }

        switch (m_text_search_block_size)
        {
            case TextSearchBlockSize.Verse:
                {
                    FindByTextSearchBlockSizeVerseLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizeVerseLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Chapter:
                {
                    FindByTextSearchBlockSizeChapterLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizeChapterLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Page:
                {
                    FindByTextSearchBlockSizePageLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizePageLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Station:
                {
                    FindByTextSearchBlockSizeStationLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizeStationLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Part:
                {
                    FindByTextSearchBlockSizePartLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizePartLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Group:
                {
                    FindByTextSearchBlockSizeGroupLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizeGroupLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Half:
                {
                    FindByTextSearchBlockSizeHalfLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizeHalfLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Quarter:
                {
                    FindByTextSearchBlockSizeQuarterLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizeQuarterLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case TextSearchBlockSize.Bowing:
                {
                    FindByTextSearchBlockSizeBowingLabel.BackColor = Color.SteelBlue;
                    FindByTextSearchBlockSizeBowingLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            default:
                break;
        }
    }
    private void FindByTextControls_Leave(object sender, EventArgs e)
    {
        NumericUpDown control = sender as NumericUpDown;
        if (control != null)
        {
            if (String.IsNullOrEmpty(control.Text))
            {
                control.Value = 0;
                control.Refresh();
            }
        }

        UpdateMultiplicityNumberTypeLabelTags();
    }
    private void FindByTextPanel_Leave(object sender, EventArgs e)
    {
        SearchGroupBox_Leave(null, null);
    }
    private bool m_edited_by_hand = false;
    private void FindByTextTextBox_Enter(object sender, EventArgs e)
    {
        FindByTextTextBox_TextChanged(null, null);
    }
    private void FindByTextTextBox_TextChanged(object sender, EventArgs e)
    {
        m_edited_by_hand = true;

        EnableFindByTextControls();

        PopulateWordsListBox();

        UpdateLanguageType(FindByTextTextBox.Text);

        UpdateSearchScope();

        if (PictureBox.Visible)
        {
            if (m_current_drawing_type == DrawingType.SearchTerms)
            {
                RedrawImage();
            }
        }
    }

    private void UpdateSearchScope()
    {
        SearchScopeBookLabel.BackColor = Color.DarkGray;
        SearchScopeBookLabel.BorderStyle = BorderStyle.None;
        SearchScopeSelectionLabel.BackColor = Color.DarkGray;
        SearchScopeSelectionLabel.BorderStyle = BorderStyle.None;
        SearchScopeResultLabel.BackColor = Color.DarkGray;
        SearchScopeResultLabel.BorderStyle = BorderStyle.None;

        switch (m_client.SearchScope)
        {
            case SearchScope.Book:
                {
                    SearchScopeBookLabel.BackColor = Color.SteelBlue;
                    SearchScopeBookLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case SearchScope.Selection:
                {
                    SearchScopeSelectionLabel.BackColor = Color.SteelBlue;
                    SearchScopeSelectionLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case SearchScope.Result:
                {
                    SearchScopeResultLabel.BackColor = Color.SteelBlue;
                    SearchScopeResultLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            default:
                break;
        }
    }
    private void FindByTextTextBox_KeyPress(object sender, KeyPressEventArgs e)
    {
        FixMicrosoft(sender, e);

        if (e.KeyChar == ' ')
        {
            // prevent double spaces
            if (FindByTextTextBox.SelectionStart > 0)
            {
                if (FindByTextTextBox.Text[FindByTextTextBox.SelectionStart - 1] == ' ')
                {
                    e.Handled = true;
                }
            }
        }
    }
    private void FindByTextTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (ModifierKeys == Keys.Control)
        {
            if (e.KeyCode == Keys.A)
            {
                if (sender is TextBoxBase)
                {
                    (sender as TextBoxBase).SelectAll();
                }
            }
        }
        else if ((e.KeyCode == Keys.Up) || (e.KeyCode == Keys.Down))
        {
            WordsListBox.Focus();
        }
    }
    private void FindByTextButton_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            ClearFindMatches();

            switch (m_text_search_type)
            {
                case TextSearchType.Exact:
                    {
                        if (WordsListBox.SelectedIndices.Count > 1)
                        {
                            FindSelectedWordsMenuItem_Click(null, null);
                        }
                        else
                        {
                            FindByExact();
                        }
                    }
                    break;
                case TextSearchType.Proximity:
                    {
                        FindByProximity();
                    }
                    break;
                case TextSearchType.Root:
                    {
                        if (WordsListBox.SelectedIndices.Count > 1)
                        {
                            FindSelectedWordsMenuItem_Click(null, null);
                        }
                        else
                        {
                            FindByRoot();
                        }
                    }
                    break;
                default:
                    {
                        FindByExact();
                    }
                    break;
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }

        SearchGroupBox_Leave(null, null);
    }
    private void FindByExact()
    {
        if (m_client != null)
        {
            string text = FindByTextTextBox.Text;
            if (text.Length > 0)
            {
                ClearFindMatches();

                if (!m_edited_by_hand)
                {
                    text = text.Trim(); // as space was added by WordFrequency double-click
                }

                if (!String.IsNullOrEmpty(text))
                {
                    string translation = Client.DEFAULT_TRANSLATION;
                    if (m_show_all_translations)
                    {
                        translation = null; // all translations
                    }
                    else
                    {
                        if (TranslatorComboBox.SelectedItem != null)
                        {
                            translation = m_client.GetTranslationKey(TranslatorComboBox.SelectedItem.ToString());
                        }
                    }

                    UpdateFindByTextOptions();

                    //FindByExact(text, m_language_type, translation);
                    FindByExact(text, m_language_type, null); // find in all installed translations if not Arabic
                }
            }
        }
    }
    private void FindByExact(string text, LanguageType language_type, string translation)
    {
        m_search_type = SearchType.Text;

        if (m_client != null)
        {
            if (!String.IsNullOrEmpty(text))
            {
                m_client.FindPhrases(m_text_search_block_size, text, language_type, translation, m_text_location_in_chapter, m_text_location_in_verse, m_text_location_in_word, m_text_wordness, m_case_sensitive, m_with_diacritics, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                if (m_client.FoundPhrases != null)
                {
                    string multiplicity_text = "";
                    if (m_multiplicity != -1)
                    {
                        if (m_multiplicity_number_type == NumberType.None)
                        {
                            if (m_multiplicity_comparison_operator == ComparisonOperator.DivisibleBy)
                            {
                                multiplicity_text = FindByTextMultiplicityComparisonOperatorLabel.Text + m_multiplicity + "r" + m_multiplicity_remainder;
                            }
                            else
                            {
                                if (m_multiplicity_comparison_operator == ComparisonOperator.Equal)
                                {
                                    multiplicity_text = "" + m_multiplicity;
                                }
                                else
                                {
                                    multiplicity_text = FindByTextMultiplicityComparisonOperatorLabel.Text + m_multiplicity;
                                }
                            }
                        }
                        else
                        {
                            multiplicity_text = m_multiplicity_number_type + " " + m_multiplicity;
                        }
                    }

                    if (m_client.FoundVerses != null)
                    {
                        int phrase_count = GetPhraseCount(m_client.FoundPhrases);
                        string block_name = ((m_multiplicity_comparison_operator == ComparisonOperator.Equal) && (m_text_search_block_size != TextSearchBlockSize.Verse)) ? m_text_search_block_size.ToString() : "verse";
                        int block_count = ((m_multiplicity_comparison_operator == ComparisonOperator.Equal) && (m_text_search_block_size != TextSearchBlockSize.Verse)) ? phrase_count / Math.Abs(m_multiplicity) : m_client.FoundVerses.Count;
                        if (m_multiplicity == 0)
                        {
                            m_find_result_header = block_count + " " + ((block_count == 1) ? block_name : (block_name + "s")) + " without " + text + " C_" + m_text_location_in_chapter.ToString() + " V_" + m_text_location_in_verse.ToString() + " W_" + m_text_location_in_word.ToString() + " in " + m_client.SearchScope.ToString();
                        }
                        else
                        {
                            m_find_result_header = phrase_count + " matches in " + block_count + " " + ((block_count == 1) ? block_name : (block_name + "s")) + " with " + multiplicity_text + " " + text + " C_" + m_text_location_in_chapter.ToString() + " V_" + m_text_location_in_verse.ToString() + " W_" + m_text_location_in_word.ToString() + " in " + m_client.SearchScope.ToString();
                        }
                        DisplayFoundVerses(true, true);

                        SearchResultTextBox.Focus();
                        SearchResultTextBox.Refresh();

                        WordsListBoxLabel.Visible = false;
                        WordsListBox.Visible = false;
                    }
                }
            }
        }
    }
    private void FindByProximity()
    {
        if (m_client != null)
        {
            ClearFindMatches();

            string text = FindByTextTextBox.Text;
            if (text.Length > 0)
            {
                string translation = Client.DEFAULT_TRANSLATION;
                if (m_show_all_translations)
                {
                    translation = null; // all translations
                }
                else
                {
                    if (TranslatorComboBox.SelectedItem != null)
                    {
                        translation = m_client.GetTranslationKey(TranslatorComboBox.SelectedItem.ToString());
                    }
                }

                if (FindByTextAllWordsRadioButton.Checked)
                {
                    m_text_proximity_type = TextProximityType.AllWords;
                }
                else if (FindByTextAnyWordRadioButton.Checked)
                {
                    m_text_proximity_type = TextProximityType.AnyWord;
                }

                //FindByProximity(text, m_language_type, translation, m_text_proximity_type);
                FindByProximity(text, m_language_type, null, m_text_proximity_type);
            }
        }
    }
    private void FindByProximity(string text, LanguageType language_type, string translation, TextProximityType text_proximity_type)
    {
        m_search_type = SearchType.Text;

        if (m_client != null)
        {
            if (!String.IsNullOrEmpty(text))
            {
                m_client.FindPhrases(m_text_search_block_size, text, language_type, translation, text_proximity_type, m_text_wordness, m_case_sensitive, m_with_diacritics);
                if (m_client.FoundPhrases != null)
                {
                    if (m_client.FoundVerses != null)
                    {
                        int phrase_count = GetPhraseCount(m_client.FoundPhrases);
                        string block_name = "verse";
                        //string block_name = ((m_multiplicity_comparison_operator == ComparisonOperator.Equal) && (m_text_search_block_size != TextSearchBlockSize.Verse)) ? m_text_search_block_size.ToString() : "verse";
                        int block_count = ((m_multiplicity_comparison_operator == ComparisonOperator.Equal) && (m_text_search_block_size != TextSearchBlockSize.Verse)) ? phrase_count / Math.Abs(m_multiplicity) : m_client.FoundVerses.Count;
                        m_find_result_header = phrase_count + " matches in " + block_count + " " + ((block_count == 1) ? block_name : (block_name + "s")) + " with " + text_proximity_type.ToString() + " in " + m_client.SearchScope.ToString();
                        DisplayFoundVerses(true, true);

                        SearchResultTextBox.Focus();
                        SearchResultTextBox.Refresh();

                        WordsListBoxLabel.Visible = false;
                        WordsListBox.Visible = false;
                    }
                }
            }
        }
    }
    private void FindByRoot()
    {
        ClearFindMatches();

        if (FindByTextTextBox.Text.Length > 0)
        {
            // get startup text from FindTextBox
            string[] startup_words = FindByTextTextBox.Text.Split();
            int count = startup_words.Length;
            // ignore final incomplete word
            if (!FindByTextTextBox.Text.EndsWith(" "))
            {
                count--;
            }

            string startup_text = "";
            if (m_auto_complete_mode)
            {
                for (int i = 0; i < count; i++)
                {
                    startup_text += startup_words[i] + " ";
                }
                if (startup_text.Length > 0)
                {
                    startup_text = startup_text.Remove(startup_text.Length - 1, 1);
                }
            }

            // get selected word texts
            List<string> word_texts = new List<string>();
            if (WordsListBox.SelectedIndices.Count > 0)
            {
                char[] separators = { ' ' };
                foreach (object item in WordsListBox.SelectedItems)
                {
                    string[] parts = item.ToString().Split(separators, StringSplitOptions.RemoveEmptyEntries);
                    if (parts.Length == 1)  // root
                    {
                        word_texts.Add(parts[0]);
                    }
                    else if (parts.Length == 2) // exact or proximity
                    {
                        word_texts.Add(parts[1]);
                    }
                }
            }

            // setup search parameters
            string text = "";
            //string translation = Client.DEFAULT_TRANSLATION;

            // update m_text_location_in_verse and m_text_location_in_word
            UpdateFindByTextOptions();

            List<Phrase> total_phrases = new List<Phrase>();
            List<Verse> total_verses = new List<Verse>();
            if (word_texts.Count > 0)
            {
                foreach (string word_text in word_texts)
                {
                    if (startup_text.Length > 0)
                    {
                        text = startup_text + " " + word_text;
                    }
                    else
                    {
                        text = word_text;
                    }

                    if (!String.IsNullOrEmpty(text))
                    {
                        m_client.FindPhrases(TextSearchBlockSize.Verse, text, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);

                        total_phrases = total_phrases.Union(m_client.FoundPhrases);
                        total_verses = total_verses.Union(m_client.FoundVerses);
                    }
                }

                // write final result to m_client
                m_client.FoundPhrases = total_phrases;
                m_client.FoundVerses = total_verses;
            }

            // display results
            if (m_client.FoundPhrases != null)
            {
                int phrase_count = GetPhraseCount(m_client.FoundPhrases);
                if (m_client.FoundVerses != null)
                {
                    int verse_count = m_client.FoundVerses.Count;
                    m_find_result_header = phrase_count + " matches in " + verse_count + ((verse_count == 1) ? " verse" : " verses") + " with " + text + " C_" + m_text_location_in_chapter.ToString() + " V_" + m_text_location_in_verse.ToString() + " W_" + m_text_location_in_word.ToString() + " in " + m_client.SearchScope.ToString();
                    DisplayFoundVerses(true, true);

                    SearchResultTextBox.Focus();
                    SearchResultTextBox.Refresh();

                    WordsListBoxLabel.Visible = false;
                    WordsListBox.Visible = false;
                }
            }
        }
    }
    private void FindByRoot(string text)
    {
        m_search_type = SearchType.Text;

        if (m_client != null)
        {
            if (!String.IsNullOrEmpty(text))
            {
                m_client.FindPhrases(m_text_search_block_size, text, m_multiplicity, m_multiplicity_number_type, m_multiplicity_comparison_operator, m_multiplicity_remainder);
                if (m_client.FoundPhrases != null)
                {
                    string multiplicity_text = "";
                    if (m_multiplicity != -1)
                    {
                        if (m_multiplicity_number_type == NumberType.None)
                        {
                            if (m_multiplicity_comparison_operator == ComparisonOperator.DivisibleBy)
                            {
                                multiplicity_text = FindByTextMultiplicityComparisonOperatorLabel.Text + m_multiplicity + "r" + m_multiplicity_remainder;
                            }
                            else
                            {
                                if (m_multiplicity_comparison_operator == ComparisonOperator.Equal)
                                {
                                    multiplicity_text = "" + m_multiplicity;
                                }
                                else
                                {
                                    multiplicity_text = FindByTextMultiplicityComparisonOperatorLabel.Text + m_multiplicity;
                                }
                            }
                        }
                        else
                        {
                            multiplicity_text = m_multiplicity_number_type + " " + m_multiplicity;
                        }
                    }

                    int phrase_count = GetPhraseCount(m_client.FoundPhrases);
                    string block_name = ((m_multiplicity_comparison_operator == ComparisonOperator.Equal) && (m_text_search_block_size != TextSearchBlockSize.Verse)) ? m_text_search_block_size.ToString() : "verse";
                    int block_count = ((m_multiplicity_comparison_operator == ComparisonOperator.Equal) && (m_text_search_block_size != TextSearchBlockSize.Verse)) ? phrase_count / Math.Abs(m_multiplicity) : m_client.FoundVerses.Count;
                    if (m_multiplicity == 0)
                    {
                        m_find_result_header = block_count + " " + ((block_count == 1) ? block_name : (block_name + "s")) + " without " + multiplicity_text + " root " + text + " in " + m_client.SearchScope.ToString();
                    }
                    else
                    {
                        m_find_result_header = phrase_count + " matches in " + block_count + " " + ((block_count == 1) ? block_name : (block_name + "s")) + " with " + multiplicity_text + " root " + text + " in " + m_client.SearchScope.ToString();
                    }
                    DisplayFoundVerses(true, true);

                    SearchResultTextBox.Focus();
                    SearchResultTextBox.Refresh();
                }
            }
        }
    }
    private void FindByTextKeyboardLabel_Click(object sender, EventArgs e)
    {
        Control control = (sender as Control);
        if (control != null)
        {
            control.BackColor = Color.LightSteelBlue;
            control.Refresh();

            // prevent double spaces
            if (control == FindByTextSpaceLabel)
            {
                if (FindByTextTextBox.SelectionStart > 0)
                {
                    if (FindByTextTextBox.Text[FindByTextTextBox.SelectionStart - 1] == ' ')
                    {
                        return;
                    }
                }
            }

            string letter = control.Text[0].ToString();
            int pos = FindByTextTextBox.SelectionStart;
            int len = FindByTextTextBox.SelectionLength;
            if (pos > -1)
            {
                if (len > 0)
                {
                    FindByTextTextBox.Text = FindByTextTextBox.Text.Remove(pos, len);
                }
                else
                {
                    // do nothing
                }
                FindByTextTextBox.Text = FindByTextTextBox.Text.Insert(pos, letter);
                FindByTextTextBox.SelectionStart = pos + 1;
                FindByTextTextBox.Refresh();
            }

            Thread.Sleep(100);
            control.BackColor = Color.LightGray;
            control.Refresh();

            FindByTextKeyboardLabel_MouseEnter(sender, e);
            FindByTextControls_Enter(null, null);

            FindByTextTextBox.Focus();
        }
    }
    private void FindByTextBackspaceLabel_Click(object sender, EventArgs e)
    {
        Control control = (sender as Control);
        if (control != null)
        {
            control.BackColor = Color.LightSteelBlue;
            control.Refresh();

            int pos = FindByTextTextBox.SelectionStart;
            int len = FindByTextTextBox.SelectionLength;
            if ((len == 0) && (pos > 0))        // delete character prior to cursor
            {
                FindByTextTextBox.Text = FindByTextTextBox.Text.Remove(pos - 1, 1);
                FindByTextTextBox.SelectionStart = pos - 1;
            }
            else if ((len > 0) && (pos >= 0))   // delete current highlighted characters
            {
                FindByTextTextBox.Text = FindByTextTextBox.Text.Remove(pos, len);
                FindByTextTextBox.SelectionStart = pos;
            }
            else                  // nothing to delete
            {
            }
            FindByTextTextBox.Refresh();

            Thread.Sleep(100);
            control.BackColor = Color.LightGray;
            control.Refresh();

            FindByTextKeyboardLabel_MouseEnter(sender, e);
            FindByTextControls_Enter(null, null);

            FindByTextTextBox.Focus();
        }
    }
    private void FindByTextKeyboardLabel_MouseEnter(object sender, EventArgs e)
    {
        Control control = (sender as Control);
        if (control != null)
        {
            if (control == FindByTextBackspaceLabel)
            {
                control.BackColor = Color.DarkGray;
            }
            else
            {
                control.BackColor = Color.White;
            }
            control.Refresh();
        }
    }
    private void FindByTextKeyboardLabel_MouseLeave(object sender, EventArgs e)
    {
        Control control = (sender as Control);
        if (control != null)
        {
            control.BackColor = Color.LightGray;
            control.Refresh();
        }
    }
    private void FindByTextKeyboardModifierLabel_MouseLeave(object sender, EventArgs e)
    {
        Control control = (sender as Control);
        if (control != null)
        {
            control.BackColor = Color.Silver;
            control.Refresh();
        }
    }
    private void FindByTextOrLabel_MouseHover(object sender, EventArgs e)
    {
        char[] idhaar_characters = { 'ء', 'أ', 'إ', 'ح', 'خ', 'ع', 'غ', 'ه', 'ة', 'ى' };
        char[] wasl_characters = { 'ٱ' };
        char[] med_characters = { 'ا', 'آ' };
        char[] iqlaab_characters = { 'ب' };
        char[] idghaam_characters = { 'ر', 'ل' };
        char[] idghaam_ghunna_characters = { 'م', 'ن', 'و', 'ؤ', 'ي', 'ئ' };
        char[] ikhfaa_characters = { 'ت', 'ث', 'ج', 'د', 'ذ', 'ز', 'س', 'ش', 'ص', 'ض', 'ط', 'ظ', 'ف', 'ق', 'ك' };

        Control control = (sender as Control);
        if (control != null)
        {
            string character_sound = null;

            if (character_sound == null)
            {
                foreach (char character in med_characters)
                {
                    if (character == control.Text[0])
                    {
                        character_sound = "مدّ";
                        break;
                    }
                }
            }
            if (character_sound == null)
            {
                foreach (char character in wasl_characters)
                {
                    if (character == control.Text[0])
                    {
                        character_sound = "إيصال";
                        break;
                    }
                }
            }
            if (character_sound == null)
            {
                foreach (char character in iqlaab_characters)
                {
                    if (character == control.Text[0])
                    {
                        character_sound = "إقلاب";
                        break;
                    }
                }
            }
            if (character_sound == null)
            {
                foreach (char character in idghaam_ghunna_characters)
                {
                    if (character == control.Text[0])
                    {
                        character_sound = "إدغام بغنة";
                        break;
                    }
                }
            }
            if (character_sound == null)
            {
                foreach (char character in idghaam_characters)
                {
                    if (character == control.Text[0])
                    {
                        //character_sound = "إدغام بلا غنة";
                        character_sound = "إدغام";
                        break;
                    }
                }
            }
            if (character_sound == null)
            {
                foreach (char character in idhaar_characters)
                {
                    if (character == control.Text[0])
                    {
                        character_sound = "إظهار";
                        break;
                    }
                }
            }
            if (character_sound == null)
            {
                foreach (char character in ikhfaa_characters)
                {
                    if (character == control.Text[0])
                    {
                        //character_sound = "إخفاء بغنة";
                        character_sound = "إخفاء";
                        break;
                    }
                }
            }

            int start = "FindByText".Length;
            int length = control.Name.Length - start - "Label".Length;
            ToolTip.SetToolTip(control, control.Name.Substring(start, length) + " " + character_sound);
        }
    }
    private void ResetFindByTextSearchTypeLabels()
    {
        FindByTextExactSearchTypeLabel.BackColor = Color.DarkGray;
        FindByTextExactSearchTypeLabel.BorderStyle = BorderStyle.None;
        FindByTextProximitySearchTypeLabel.BackColor = Color.DarkGray;
        FindByTextProximitySearchTypeLabel.BorderStyle = BorderStyle.None;
        FindByTextRootSearchTypeLabel.BackColor = Color.DarkGray;
        FindByTextRootSearchTypeLabel.BorderStyle = BorderStyle.None;
    }
    private void ResetFindByTextSearchBlockSizeLabels()
    {
        FindByTextSearchBlockSizeVerseLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizeVerseLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizeChapterLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizeChapterLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizePageLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizePageLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizeStationLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizeStationLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizePartLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizePartLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizeGroupLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizeGroupLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizeHalfLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizeHalfLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizeQuarterLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizeQuarterLabel.BorderStyle = BorderStyle.None;
        FindByTextSearchBlockSizeBowingLabel.BackColor = Color.DarkGray;
        FindByTextSearchBlockSizeBowingLabel.BorderStyle = BorderStyle.None;
    }
    private void FindByTextMultiplicityComparisonOperatorLabel_Click(object sender, EventArgs e)
    {
        UpdateMultiplicityNumberTypeLabelTags();

        Control control = sender as Control;
        if (control != null)
        {
            if (UpdateComparisonOperator(control))
            {
                if (FindByTextMultiplicityComparisonOperatorLabel.Text == "÷")
                {
                    int remainder = 0;
                    FindByTextMultiplicityNumberTypeLabel.Tag = remainder;
                    FindByTextMultiplicityNumberTypeLabel.Text = remainder.ToString();
                    FindByTextMultiplicityNumberTypeLabel.ForeColor = Color.Black;
                    FindByTextMultiplicityNumberTypeLabel.Enabled = true;
                    ToolTip.SetToolTip(FindByTextMultiplicityNumberTypeLabel, "remainder");
                }
                else
                {
                    FindByTextMultiplicityNumberTypeLabel.Text = "";
                    ToolTip.SetToolTip(FindByTextMultiplicityNumberTypeLabel, null);
                }

                UpdateMultiplicityParameters();

                FindByTextControls_Enter(null, null);
            }
        }
    }
    private void FindByTextMultiplicityNumberTypeLabel_Click(object sender, EventArgs e)
    {
        UpdateMultiplicityNumberTypeLabelTags();

        Control control = sender as Control;
        if (control != null)
        {
            if (UpdateNumberType(control))
            {
                FindByTextMultiplicityComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                FindByTextMultiplicityNumericUpDown.Enabled = (control.Text == "");
                if (control.Text.Length > 0)
                {
                    FindByTextMultiplicityComparisonOperatorLabel.Text = "=";
                    FindByTextMultiplicityNumericUpDown.Value = -1;
                }
                else
                {
                    FindByTextMultiplicityNumericUpDown.Focus();
                }

                UpdateMultiplicityParameters();

                FindByTextControls_Enter(null, null);
            }
        }
    }
    private void UpdateMultiplicityNumberTypeLabelTags()
    {
        FindByTextMultiplicityNumberTypeLabel.Tag = (int)FindByTextMultiplicityNumericUpDown.Value;

        int number;
        if (int.TryParse(FindByTextMultiplicityNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByTextMultiplicityNumericUpDown.Value)
            {
                number = (int)FindByTextMultiplicityNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByTextMultiplicityNumberTypeLabel.Text = number.ToString();
            }
        }

        UpdateMultiplicityParameters();
    }
    private void FindByTextControl_EnabledChanged(object sender, EventArgs e)
    {
        Control control = sender as Control;
        if (control != null)
        {
            control.BackColor = (control.Enabled) ? SystemColors.Window : Color.LightGray;
        }
    }
    private void UpdateKeyboard(string text_mode)
    {
        FindByTextWithDiacriticsCheckBox.Visible = false;
        LetterFrequencyWithDiacriticsCheckBox.Visible = false;
        FindByTextHamzaLabel.Visible = false;
        FindByTextTaaMarbootaLabel.Visible = false;
        FindByTextElfMaqsuraLabel.Visible = false;
        FindByTextElfWaslLabel.Visible = false;
        FindByTextHamzaAboveElfLabel.Visible = false;
        FindByTextHamzaBelowElfLabel.Visible = false;
        FindByTextHamzaAboveWawLabel.Visible = false;
        FindByTextHamzaAboveYaaLabel.Visible = false;

        if (text_mode == "Simplified28")
        {
            // do nothing
        }
        else if (text_mode == "Simplified29")
        {
            FindByTextHamzaLabel.Visible = true;
        }
        else if (text_mode == "Simplified30")
        {
            FindByTextTaaMarbootaLabel.Visible = true;
            FindByTextElfMaqsuraLabel.Visible = true;
        }
        else if (text_mode == "Simplified31")
        {
            FindByTextHamzaLabel.Visible = true;
            FindByTextTaaMarbootaLabel.Visible = true;
            FindByTextElfMaqsuraLabel.Visible = true;
        }
        else if (text_mode == "Simplified36")
        {
            FindByTextHamzaLabel.Visible = true;

            FindByTextTaaMarbootaLabel.Visible = true;
            FindByTextElfMaqsuraLabel.Visible = true;

            FindByTextElfWaslLabel.Visible = true;
            FindByTextHamzaAboveElfLabel.Visible = true;
            FindByTextHamzaBelowElfLabel.Visible = true;
            FindByTextHamzaAboveWawLabel.Visible = true;
            FindByTextHamzaAboveYaaLabel.Visible = true;
        }
        else if (text_mode == "Original")
        {
            FindByTextHamzaLabel.Visible = true;

            FindByTextTaaMarbootaLabel.Visible = true;
            FindByTextElfMaqsuraLabel.Visible = true;

            FindByTextElfWaslLabel.Visible = true;
            FindByTextHamzaAboveElfLabel.Visible = true;
            FindByTextHamzaBelowElfLabel.Visible = true;
            FindByTextHamzaAboveWawLabel.Visible = true;
            FindByTextHamzaAboveYaaLabel.Visible = true;

            FindByTextWithDiacriticsCheckBox.Visible = true;
            LetterFrequencyWithDiacriticsCheckBox.Visible = (Globals.EDITION == Edition.Standard || Globals.EDITION == Edition.Grammar);
            //FindByTextWithDiacriticsCheckBox.Text = "ā";
            //ToolTip.SetToolTip(FindByTextWithDiacriticsCheckBox, "with diacritics  مع الحركات");
        }
        else
        {
            // do nothing
        }
    }
    private void EnableFindByTextControls()
    {
        FindByTextExactSearchTypeLabel.BackColor = (m_text_search_type == TextSearchType.Exact) ? Color.SteelBlue : Color.DarkGray;
        FindByTextExactSearchTypeLabel.BorderStyle = (m_text_search_type == TextSearchType.Exact) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextProximitySearchTypeLabel.BackColor = (m_text_search_type == TextSearchType.Proximity) ? Color.SteelBlue : Color.DarkGray;
        FindByTextProximitySearchTypeLabel.BorderStyle = (m_text_search_type == TextSearchType.Proximity) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextRootSearchTypeLabel.BackColor = (m_text_search_type == TextSearchType.Root) ? Color.SteelBlue : Color.DarkGray;
        FindByTextRootSearchTypeLabel.BorderStyle = (m_text_search_type == TextSearchType.Root) ? BorderStyle.Fixed3D : BorderStyle.None;

        FindByTextSearchBlockSizeVerseLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Verse) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizeVerseLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Verse) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextSearchBlockSizeChapterLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Chapter) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizeChapterLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Chapter) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextSearchBlockSizePageLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Page) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizePageLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Page) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextSearchBlockSizeStationLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Station) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizeStationLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Station) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextSearchBlockSizePartLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Part) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizePartLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Part) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextSearchBlockSizeGroupLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Group) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizeGroupLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Group) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextSearchBlockSizeHalfLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Half) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizeHalfLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Half) ? BorderStyle.Fixed3D : BorderStyle.None;
        FindByTextSearchBlockSizeQuarterLabel.BackColor = (m_text_search_block_size == TextSearchBlockSize.Quarter) ? Color.SteelBlue : Color.DarkGray;
        FindByTextSearchBlockSizeQuarterLabel.BorderStyle = (m_text_search_block_size == TextSearchBlockSize.Quarter) ? BorderStyle.Fixed3D : BorderStyle.None;

        FindByTextAtChapterStartRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);
        FindByTextAtChapterMiddleRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);
        FindByTextAtChapterEndRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);
        FindByTextAtChapterAnywhereRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);

        FindByTextAtVerseStartRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);
        FindByTextAtVerseMiddleRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);
        FindByTextAtVerseEndRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);
        FindByTextAtVerseAnywhereRadioButton.Enabled = (m_text_search_type == TextSearchType.Exact);

        FindByTextAllWordsRadioButton.Enabled = (m_text_search_type == TextSearchType.Proximity);
        FindByTextAnyWordRadioButton.Enabled = (m_text_search_type == TextSearchType.Proximity)
                                                && (!FindByTextTextBox.Text.Contains("-"))
                                                && (!FindByTextTextBox.Text.Contains("+"));
        FindByTextPlusLabel.Visible = ((m_text_search_type == TextSearchType.Proximity) || (m_text_search_type == TextSearchType.Root));
        FindByTextMinusLabel.Visible = ((m_text_search_type == TextSearchType.Proximity) || (m_text_search_type == TextSearchType.Root));

        FindByTextWordnessCheckBox.Enabled = ((m_text_search_type == TextSearchType.Exact) || (m_text_search_type == TextSearchType.Proximity));

        FindByTextAtWordStartRadioButton.Enabled = ((m_text_search_type == TextSearchType.Exact) || (m_text_search_type == TextSearchType.Root));
        FindByTextAtWordMiddleRadioButton.Enabled = ((m_text_search_type == TextSearchType.Exact) || (m_text_search_type == TextSearchType.Root));
        FindByTextAtWordEndRadioButton.Enabled = ((m_text_search_type == TextSearchType.Exact) || (m_text_search_type == TextSearchType.Root));
        FindByTextAtWordAnywhereRadioButton.Enabled = ((m_text_search_type == TextSearchType.Exact) || (m_text_search_type == TextSearchType.Root));

        FindByTextMultiplicityCheckBox.Enabled = ((m_text_search_type == TextSearchType.Exact) || (m_text_search_type == TextSearchType.Root));
        FindByTextMultiplicityComparisonOperatorLabel.Enabled = (FindByTextMultiplicityCheckBox.Enabled) && (FindByTextMultiplicityCheckBox.Checked);
        FindByTextMultiplicityNumericUpDown.Enabled = (FindByTextMultiplicityCheckBox.Enabled) && (FindByTextMultiplicityCheckBox.Checked);
        FindByTextMultiplicityNumberTypeLabel.Enabled = (FindByTextMultiplicityCheckBox.Enabled) && (FindByTextMultiplicityCheckBox.Checked);

        FindByTextCaseSensitiveCheckBox.Enabled = (m_language_type == LanguageType.LeftToRight);
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Search By Numbers
    ///////////////////////////////////////////////////////////////////////////////
    private NumbersResultType m_numbers_result_type = NumbersResultType.Verses;
    private bool m_find_by_numbers_sets = false;
    private void FindByNumbersSetsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_find_by_numbers_sets = FindByNumbersSetsCheckBox.Checked;
        UpdateFindByNumbersResultType();
    }
    private void FindByNumbersLabel_Click(object sender, EventArgs e)
    {
        FindByNumbersControls_Enter(null, null);
    }
    private NumberScope m_word_number_scope = NumberScope.NumberInVerse;
    private NumberScope m_verse_number_scope = NumberScope.NumberInChapter;
    private NumberScope m_chapter_number_scope = NumberScope.Number;
    private void UpdateFindByNumbersNumberLabel()
    {
        switch (m_numbers_result_type)
        {
            case NumbersResultType.Words:
                {
                    if (m_word_number_scope == NumberScope.Number)
                    {
                        m_word_number_scope = NumberScope.Number;
                        FindByNumbersNumberLabel.Text = "number";
                    }
                    else if (m_word_number_scope == NumberScope.NumberInChapter)
                    {
                        m_word_number_scope = NumberScope.NumberInChapter;
                        FindByNumbersNumberLabel.Text = "in chapter";
                    }
                    else if (m_word_number_scope == NumberScope.NumberInVerse)
                    {
                        m_word_number_scope = NumberScope.NumberInVerse;
                        FindByNumbersNumberLabel.Text = "in verse";
                    }
                }
                break;
            case NumbersResultType.WordRanges:
            case NumbersResultType.WordSets:
                {
                    FindByNumbersNumberLabel.Text = "sum";
                }
                break;
            case NumbersResultType.Sentences:
                {
                    FindByNumbersNumberLabel.Text = "number";
                }
                break;
            case NumbersResultType.Verses:
                {
                    if (m_verse_number_scope == NumberScope.Number)
                    {
                        m_verse_number_scope = NumberScope.Number;
                        FindByNumbersNumberLabel.Text = "number";
                    }
                    else if (m_verse_number_scope == NumberScope.NumberInChapter)
                    {
                        m_verse_number_scope = NumberScope.NumberInChapter;
                        FindByNumbersNumberLabel.Text = "in chapter";
                    }
                }
                break;
            case NumbersResultType.VerseRanges:
            case NumbersResultType.VerseSets:
                {
                    FindByNumbersNumberLabel.Text = "sum";
                }
                break;
            case NumbersResultType.Chapters:
                {
                    if (m_chapter_number_scope == NumberScope.Number)
                    {
                        m_chapter_number_scope = NumberScope.Number;
                        FindByNumbersNumberLabel.Text = "number";
                    }
                }
                break;
            case NumbersResultType.ChapterRanges:
            case NumbersResultType.ChapterSets:
                {
                    FindByNumbersNumberLabel.Text = "sum";
                }
                break;
            default:
                break;
        }
    }
    private void FindByNumbersNumberLabel_Click(object sender, EventArgs e)
    {
        FindByNumbersControls_Enter(null, null);

        switch (m_numbers_result_type)
        {
            case NumbersResultType.Words:
                {
                    if (m_word_number_scope == NumberScope.Number)
                    {
                        m_word_number_scope = NumberScope.NumberInChapter;
                        FindByNumbersNumberLabel.Text = "in chapter";
                    }
                    else if (m_word_number_scope == NumberScope.NumberInChapter)
                    {
                        m_word_number_scope = NumberScope.NumberInVerse;
                        FindByNumbersNumberLabel.Text = "in verse";
                    }
                    else if (m_word_number_scope == NumberScope.NumberInVerse)
                    {
                        m_word_number_scope = NumberScope.Number;
                        FindByNumbersNumberLabel.Text = "number";
                    }
                }
                break;
            case NumbersResultType.WordRanges:
            case NumbersResultType.WordSets:
                {
                    FindByNumbersNumberLabel.Text = "sum";
                }
                break;
            case NumbersResultType.Sentences:
                {
                    FindByNumbersNumberLabel.Text = "number";
                }
                break;
            case NumbersResultType.Verses:
                {
                    if (m_verse_number_scope == NumberScope.Number)
                    {
                        m_verse_number_scope = NumberScope.NumberInChapter;
                        FindByNumbersNumberLabel.Text = "in chapter";
                    }
                    else if (m_verse_number_scope == NumberScope.NumberInChapter)
                    {
                        m_verse_number_scope = NumberScope.Number;
                        FindByNumbersNumberLabel.Text = "number";
                    }
                }
                break;
            case NumbersResultType.VerseRanges:
            case NumbersResultType.VerseSets:
                {
                    FindByNumbersNumberLabel.Text = "sum";
                }
                break;
            case NumbersResultType.Chapters:
                {
                    if (m_chapter_number_scope == NumberScope.Number)
                    {
                        m_chapter_number_scope = NumberScope.Number;
                        FindByNumbersNumberLabel.Text = "number";
                    }
                }
                break;
            case NumbersResultType.ChapterRanges:
            case NumbersResultType.ChapterSets:
                {
                    FindByNumbersNumberLabel.Text = "sum";
                }
                break;
            default:
                break;
        }
    }
    private void FindByNumbersResultTypeWordsLabel_Click(object sender, EventArgs e)
    {
        m_numbers_result_type = NumbersResultType.Words;
        //                          num   Cs     Vs     Ws    Ls    uLs   value dsum  droot
        EnableFindByNumbersControls(true, false, false, true, true, true, true, true, true);

        FindByNumbersControls_Enter(null, null);

        FindByNumbersNumberNumericUpDown.Value = 0;
        FindByNumbersChaptersNumericUpDown.Value = 0;
        FindByNumbersVersesNumericUpDown.Value = 0;
        FindByNumbersWordsNumericUpDown.Value = 1;
        FindByNumbersLettersNumericUpDown.Focus();

        UpdateFindByNumbersNumberLabel();
    }
    private void FindByNumbersResultTypeSentencesLabel_Click(object sender, EventArgs e)
    {
        m_numbers_result_type = NumbersResultType.Sentences;
        //                           num   Cs     Vs     Ws    Ls    uLs   value dsum  droot
        EnableFindByNumbersControls(true, false, false, true, true, true, true, true, true);

        FindByNumbersControls_Enter(null, null);

        FindByNumbersNumberNumericUpDown.Value = 0;
        FindByNumbersChaptersNumericUpDown.Value = 0;
        FindByNumbersVersesNumericUpDown.Value = 0;
        FindByNumbersWordsNumericUpDown.Value = 0; // must be 0 for any sentence length
        FindByNumbersWordsNumericUpDown.Focus();
    }
    private void FindByNumbersResultTypeVersesLabel_Click(object sender, EventArgs e)
    {
        m_numbers_result_type = NumbersResultType.Verses;
        //                           num   Cs     Vs    Ws    Ls    uLs   value dsum  droot
        EnableFindByNumbersControls(true, false, true, true, true, true, true, true, true);

        FindByNumbersControls_Enter(null, null);

        FindByNumbersNumberNumericUpDown.Value = 0;
        FindByNumbersChaptersNumericUpDown.Value = 0;
        FindByNumbersVersesNumericUpDown.Value = 1;
        FindByNumbersWordsNumericUpDown.Value = 0;
        FindByNumbersWordsNumericUpDown.Focus();
    }
    private void FindByNumbersResultTypeChaptersLabel_Click(object sender, EventArgs e)
    {
        m_numbers_result_type = NumbersResultType.Chapters;
        //                           num   Cs    Vs    Ws    Ls    uLs   value dsum  droot
        EnableFindByNumbersControls(true, true, true, true, true, true, true, true, true);

        FindByNumbersControls_Enter(null, null);

        FindByNumbersNumberNumericUpDown.Value = 0;
        FindByNumbersChaptersNumericUpDown.Value = 1;
        FindByNumbersVersesNumericUpDown.Value = 0;
        FindByNumbersWordsNumericUpDown.Value = 0;
        FindByNumbersVersesNumericUpDown.Focus();
    }
    private void EnableFindByNumbersControls(
                    bool enable_number,
                    bool enable_chapters,
                    bool enable_verses,
                    bool enable_words,
                    bool enable_letters,
                    bool enable_unique_letters,
                    bool enable_value,
                    bool enable_value_digit_sum,
                    bool enable_value_digital_root
                 )
    {
        bool not_number_number_type = ((FindByNumbersNumberNumberTypeLabel.Text.Length == 0) || (Char.IsDigit(FindByNumbersNumberNumberTypeLabel.Text[0])));
        FindByNumbersNumberLabel.Enabled = enable_number;
        FindByNumbersNumberComparisonOperatorLabel.Enabled = enable_number && not_number_number_type;
        FindByNumbersNumberNumericUpDown.Enabled = enable_number && not_number_number_type;
        FindByNumbersNumberNumberTypeLabel.Enabled = enable_number;
        if (enable_number == false)
        {
            FindByNumbersNumberComparisonOperatorLabel.Text = "=";
            FindByNumbersNumberNumericUpDown.Value = 0;
        }

        bool not_chapters_number_type = ((FindByNumbersChaptersNumberTypeLabel.Text.Length == 0) || (Char.IsDigit(FindByNumbersChaptersNumberTypeLabel.Text[0])));
        FindByNumbersChaptersLabel.Enabled = enable_chapters;
        FindByNumbersChaptersComparisonOperatorLabel.Enabled = enable_chapters && not_chapters_number_type;
        FindByNumbersChaptersNumericUpDown.Enabled = enable_chapters && not_chapters_number_type;
        FindByNumbersChaptersNumberTypeLabel.Enabled = enable_chapters;
        if (enable_chapters == false)
        {
            FindByNumbersChaptersComparisonOperatorLabel.Text = "=";
            FindByNumbersChaptersNumericUpDown.Value = 0;
        }

        bool not_verses_number_type = ((FindByNumbersVersesNumberTypeLabel.Text.Length == 0) || (Char.IsDigit(FindByNumbersVersesNumberTypeLabel.Text[0])));
        FindByNumbersVersesLabel.Enabled = enable_verses;
        FindByNumbersVersesComparisonOperatorLabel.Enabled = enable_verses && not_verses_number_type;
        FindByNumbersVersesNumericUpDown.Enabled = enable_verses && not_verses_number_type;
        FindByNumbersVersesNumberTypeLabel.Enabled = enable_verses;
        if (enable_verses == false)
        {
            FindByNumbersVersesComparisonOperatorLabel.Text = "=";
            FindByNumbersVersesNumericUpDown.Value = 0;
        }

        bool not_words_number_type = ((FindByNumbersWordsNumberTypeLabel.Text.Length == 0) || (Char.IsDigit(FindByNumbersWordsNumberTypeLabel.Text[0])));
        FindByNumbersWordsLabel.Enabled = enable_words;
        FindByNumbersWordsComparisonOperatorLabel.Enabled = enable_words && not_words_number_type;
        FindByNumbersWordsNumericUpDown.Enabled = enable_words && not_words_number_type;
        FindByNumbersWordsNumberTypeLabel.Enabled = enable_words;
        if (enable_words == false)
        {
            FindByNumbersWordsComparisonOperatorLabel.Text = "=";
            FindByNumbersWordsNumericUpDown.Value = 0;
        }

        bool not_letters_number_type = ((FindByNumbersLettersNumberTypeLabel.Text.Length == 0) || (Char.IsDigit(FindByNumbersLettersNumberTypeLabel.Text[0])));
        FindByNumbersLettersLabel.Enabled = enable_letters;
        FindByNumbersLettersComparisonOperatorLabel.Enabled = enable_letters && not_letters_number_type;
        FindByNumbersLettersNumericUpDown.Enabled = enable_letters && not_letters_number_type;
        FindByNumbersLettersNumberTypeLabel.Enabled = enable_letters;
        if (enable_letters == false)
        {
            FindByNumbersLettersComparisonOperatorLabel.Text = "=";
            FindByNumbersLettersNumericUpDown.Value = 0;
        }

        bool not_unique_letters_number_type = ((FindByNumbersUniqueLettersNumberTypeLabel.Text.Length == 0) || (Char.IsDigit(FindByNumbersUniqueLettersNumberTypeLabel.Text[0])));
        FindByNumbersUniqueLettersLabel.Enabled = enable_unique_letters;
        FindByNumbersUniqueLettersComparisonOperatorLabel.Enabled = enable_unique_letters && not_unique_letters_number_type;
        FindByNumbersUniqueLettersNumericUpDown.Enabled = enable_unique_letters && not_unique_letters_number_type;
        FindByNumbersUniqueLettersNumberTypeLabel.Enabled = enable_unique_letters;
        if (enable_unique_letters == false)
        {
            FindByNumbersUniqueLettersComparisonOperatorLabel.Text = "=";
            FindByNumbersUniqueLettersNumericUpDown.Value = 0;
        }

        bool not_value_number_type = ((FindByNumbersValueNumberTypeLabel.Text.Length == 0) || (Char.IsDigit(FindByNumbersValueNumberTypeLabel.Text[0])));
        FindByNumbersValueLabel.Enabled = enable_value;
        FindByNumbersValueComparisonOperatorLabel.Enabled = enable_value && not_value_number_type;
        FindByNumbersValueNumericUpDown.Enabled = enable_value && not_value_number_type;
        FindByNumbersValueNumberTypeLabel.Enabled = enable_value;
        if (enable_value == false)
        {
            FindByNumbersValueComparisonOperatorLabel.Text = "=";
            FindByNumbersValueNumericUpDown.Value = 0;
        }
    }
    private void ResetFindByNumbersControls()
    {
        FindByNumbersNumberComparisonOperatorLabel.Text = "=";
        FindByNumbersNumberNumericUpDown.Value = 0;
        FindByNumbersNumberNumberTypeLabel.Text = null;

        FindByNumbersChaptersComparisonOperatorLabel.Text = "=";
        FindByNumbersChaptersNumericUpDown.Value = 0;
        FindByNumbersChaptersNumberTypeLabel.Text = null;

        FindByNumbersVersesComparisonOperatorLabel.Text = "=";
        FindByNumbersVersesNumericUpDown.Value = 0;
        FindByNumbersVersesNumberTypeLabel.Text = null;

        FindByNumbersWordsComparisonOperatorLabel.Text = "=";
        FindByNumbersWordsNumericUpDown.Value = 0;
        FindByNumbersWordsNumberTypeLabel.Text = null;

        FindByNumbersLettersComparisonOperatorLabel.Text = "=";
        FindByNumbersLettersNumericUpDown.Value = 0;
        FindByNumbersLettersNumberTypeLabel.Text = null;

        FindByNumbersUniqueLettersComparisonOperatorLabel.Text = "=";
        FindByNumbersUniqueLettersNumericUpDown.Value = 0;
        FindByNumbersUniqueLettersNumberTypeLabel.Text = null;

        FindByNumbersValueComparisonOperatorLabel.Text = "=";
        FindByNumbersValueNumericUpDown.Value = 0;
        FindByNumbersValueNumberTypeLabel.Text = null;
    }
    private void ResetFindByNumbersNumberTypeControl(Control control)
    {
        if (control != null)
        {
            control.Text = null;
            control.ForeColor = Color.Black;
            ToolTip.SetToolTip(control, null);
        }
    }
    private void ResetFindByNumbersResultTypeLabels()
    {
        FindByNumbersResultTypeWordsLabel.BackColor = Color.DarkGray;
        FindByNumbersResultTypeWordsLabel.BorderStyle = BorderStyle.None;

        FindByNumbersResultTypeSentencesLabel.BackColor = Color.DarkGray;
        FindByNumbersResultTypeSentencesLabel.BorderStyle = BorderStyle.None;

        FindByNumbersResultTypeVersesLabel.BackColor = Color.DarkGray;
        FindByNumbersResultTypeVersesLabel.BorderStyle = BorderStyle.None;

        FindByNumbersResultTypeChaptersLabel.BackColor = Color.DarkGray;
        FindByNumbersResultTypeChaptersLabel.BorderStyle = BorderStyle.None;

        UpdateFindByNumbersResultType();
    }
    private void ResetFindByNumbersComparisonOperatorLabels()
    {
        FindByNumbersNumberComparisonOperatorLabel.Text = "=";
        FindByNumbersChaptersComparisonOperatorLabel.Text = "=";
        FindByNumbersVersesComparisonOperatorLabel.Text = "=";
        FindByNumbersWordsComparisonOperatorLabel.Text = "=";
        FindByNumbersLettersComparisonOperatorLabel.Text = "=";
        FindByNumbersUniqueLettersComparisonOperatorLabel.Text = "=";
        FindByNumbersValueComparisonOperatorLabel.Text = "=";

        FindByNumbersNumberComparisonOperatorLabel.Enabled = false;
        FindByNumbersChaptersComparisonOperatorLabel.Enabled = false;
        FindByNumbersVersesComparisonOperatorLabel.Enabled = false;
        FindByNumbersWordsComparisonOperatorLabel.Enabled = false;
        FindByNumbersLettersComparisonOperatorLabel.Enabled = false;
        FindByNumbersUniqueLettersComparisonOperatorLabel.Enabled = false;
        FindByNumbersValueComparisonOperatorLabel.Enabled = false;
    }
    private void UpdateFindByNumbersResultType()
    {
        switch (m_numbers_result_type)
        {
            case NumbersResultType.Words:
            case NumbersResultType.WordRanges:
            case NumbersResultType.WordSets:
                {
                    if ((FindByNumbersWordsNumericUpDown.Value == 1) && (FindByNumbersWordsNumberTypeLabel.Text.Length == 0))
                    {
                        m_numbers_result_type = NumbersResultType.Words;
                    }
                    else if ((FindByNumbersWordsNumericUpDown.Value != 1) || (FindByNumbersWordsNumberTypeLabel.Text.Length > 0))
                    {
                        if (!m_find_by_numbers_sets)
                        {
                            m_numbers_result_type = NumbersResultType.WordRanges;
                        }
                        else
                        {
                            m_numbers_result_type = NumbersResultType.WordSets;
                        }
                    }
                }
                break;
            case NumbersResultType.Sentences:
                {
                    m_numbers_result_type = NumbersResultType.Sentences;
                }
                break;
            case NumbersResultType.Verses:
            case NumbersResultType.VerseRanges:
            case NumbersResultType.VerseSets:
                {
                    if ((FindByNumbersVersesNumericUpDown.Value == 1) && (FindByNumbersVersesNumberTypeLabel.Text.Length == 0))
                    {
                        m_numbers_result_type = NumbersResultType.Verses;
                    }
                    else if ((FindByNumbersVersesNumericUpDown.Value != 1) || (FindByNumbersVersesNumberTypeLabel.Text.Length > 0))
                    {
                        if (!m_find_by_numbers_sets)
                        {
                            m_numbers_result_type = NumbersResultType.VerseRanges;
                        }
                        else
                        {
                            m_numbers_result_type = NumbersResultType.VerseSets;
                        }
                    }
                }
                break;
            case NumbersResultType.Chapters:
            case NumbersResultType.ChapterRanges:
            case NumbersResultType.ChapterSets:
                {
                    if ((FindByNumbersChaptersNumericUpDown.Value == 1) && (FindByNumbersChaptersNumberTypeLabel.Text.Length == 0))
                    {
                        m_numbers_result_type = NumbersResultType.Chapters;
                    }
                    else if ((FindByNumbersChaptersNumericUpDown.Value != 1) || (FindByNumbersChaptersNumberTypeLabel.Text.Length > 0))
                    {
                        if (!m_find_by_numbers_sets)
                        {
                            m_numbers_result_type = NumbersResultType.ChapterRanges;
                        }
                        else
                        {
                            m_numbers_result_type = NumbersResultType.ChapterSets;
                        }
                    }
                }
                break;
            default:
                break;
        }


        // reset Words label
        FindByNumbersResultTypeWordsLabel.Text = "W";
        ToolTip.SetToolTip(FindByNumbersResultTypeWordsLabel, "find words");
        ToolTip.SetToolTip(FindByNumbersNumberLabel, "word number");
        // reset Sentences label
        FindByNumbersResultTypeSentencesLabel.Text = "S";
        ToolTip.SetToolTip(FindByNumbersResultTypeSentencesLabel, "find sentences across verses");
        // reset Verses label
        FindByNumbersResultTypeVersesLabel.Text = "V";
        ToolTip.SetToolTip(FindByNumbersResultTypeVersesLabel, "find verses");
        ToolTip.SetToolTip(FindByNumbersNumberLabel, "verse number");
        // reset Chapters label
        FindByNumbersResultTypeChaptersLabel.Text = "C";
        ToolTip.SetToolTip(FindByNumbersResultTypeChaptersLabel, "find chapters");
        ToolTip.SetToolTip(FindByNumbersNumberLabel, "chapter number");

        // overwrite label and tooltips
        if (m_numbers_result_type == NumbersResultType.Words)
        {
            FindByNumbersResultTypeWordsLabel.Text = "W";
            ToolTip.SetToolTip(FindByNumbersResultTypeWordsLabel, "find words");
            // update Text based on m_number_scope
            switch (m_word_number_scope)
            {
                case NumberScope.Number:
                    FindByNumbersNumberLabel.Text = "number";
                    break;
                case NumberScope.NumberInChapter:
                    FindByNumbersNumberLabel.Text = "in chapter";
                    break;
                case NumberScope.NumberInVerse:
                    FindByNumbersNumberLabel.Text = "in verse";
                    break;
                default:
                    FindByNumbersNumberLabel.Text = "number";
                    break;
            }
            ToolTip.SetToolTip(FindByNumbersNumberLabel, "word number");
        }
        else if (m_numbers_result_type == NumbersResultType.WordRanges)
        {
            FindByNumbersResultTypeWordsLabel.Text = "-W-";
            ToolTip.SetToolTip(FindByNumbersResultTypeWordsLabel, "find word ranges");
            FindByNumbersNumberLabel.Text = "sum";
            ToolTip.SetToolTip(FindByNumbersNumberLabel, "sum of word numbers");
        }
        else if (m_numbers_result_type == NumbersResultType.WordSets)
        {
            FindByNumbersResultTypeWordsLabel.Text = "Ws";
            ToolTip.SetToolTip(FindByNumbersResultTypeWordsLabel, "find word sets");
            FindByNumbersNumberLabel.Text = "sum";
            ToolTip.SetToolTip(FindByNumbersNumberLabel, "sum of word numbers");
        }
        else if (m_numbers_result_type == NumbersResultType.Verses)
        {
            FindByNumbersResultTypeVersesLabel.Text = "V";
            ToolTip.SetToolTip(FindByNumbersResultTypeVersesLabel, "find verses");
            // update Text based on m_number_scope
            switch (m_verse_number_scope)
            {
                case NumberScope.Number:
                    FindByNumbersNumberLabel.Text = "number";
                    break;
                case NumberScope.NumberInChapter:
                    FindByNumbersNumberLabel.Text = "in chapter";
                    break;
                default:
                    FindByNumbersNumberLabel.Text = "number";
                    break;
            }
            ToolTip.SetToolTip(FindByNumbersNumberLabel, "verse number");
        }
        else if (m_numbers_result_type == NumbersResultType.VerseRanges)
        {
            FindByNumbersResultTypeVersesLabel.Text = "-V-";
            ToolTip.SetToolTip(FindByNumbersResultTypeVersesLabel, "find verse ranges");
            FindByNumbersNumberLabel.Text = "sum";
            ToolTip.SetToolTip(FindByNumbersNumberLabel, "sum of verse numbers");
        }
        else if (m_numbers_result_type == NumbersResultType.VerseSets)
        {
            FindByNumbersResultTypeVersesLabel.Text = "Vs";
            ToolTip.SetToolTip(FindByNumbersResultTypeVersesLabel, "find verse sets");
            FindByNumbersNumberLabel.Text = "sum";
            ToolTip.SetToolTip(FindByNumbersNumberLabel, "sum of verse numbers");
        }
        else if (m_numbers_result_type == NumbersResultType.Chapters)
        {
            FindByNumbersResultTypeChaptersLabel.Text = "C";
            ToolTip.SetToolTip(FindByNumbersResultTypeChaptersLabel, "find chapters");
            // update Text based on m_number_scope
            switch (m_chapter_number_scope)
            {
                case NumberScope.Number:
                    FindByNumbersNumberLabel.Text = "number";
                    break;
                default:
                    FindByNumbersNumberLabel.Text = "number";
                    break;
            }
            ToolTip.SetToolTip(FindByNumbersNumberLabel, "chapter number");
        }
        else if (m_numbers_result_type == NumbersResultType.ChapterRanges)
        {
            FindByNumbersResultTypeChaptersLabel.Text = "-C-";
            ToolTip.SetToolTip(FindByNumbersResultTypeChaptersLabel, "find chapter ranges");
            FindByNumbersNumberLabel.Text = "sum";
            ToolTip.SetToolTip(FindByNumbersNumberLabel, "sum of chapter numbers");
        }
        else if (m_numbers_result_type == NumbersResultType.ChapterSets)
        {
            FindByNumbersResultTypeChaptersLabel.Text = "Cs";
            ToolTip.SetToolTip(FindByNumbersResultTypeChaptersLabel, "find chapter sets");
            FindByNumbersNumberLabel.Text = "sum";
            ToolTip.SetToolTip(FindByNumbersNumberLabel, "sum of chapter numbers");
        }

        switch (m_numbers_result_type)
        {
            case NumbersResultType.Words:
            case NumbersResultType.WordRanges:
            case NumbersResultType.WordSets:
                {
                    FindByNumbersWordsComparisonOperatorLabel.Text = "=";
                    FindByNumbersWordsComparisonOperatorLabel.Enabled = false;
                    FindByNumbersWordsNumberTypeLabel.Text = "";
                    FindByNumbersWordsNumberTypeLabel.Enabled = false;
                }
                break;
            case NumbersResultType.Sentences:
                {
                    FindByNumbersNumberLabel.Enabled = false;
                    FindByNumbersNumberComparisonOperatorLabel.Enabled = false;
                    FindByNumbersNumberNumericUpDown.Enabled = false;
                    FindByNumbersNumberNumberTypeLabel.Enabled = false;
                    FindByNumbersNumberComparisonOperatorLabel.Text = "=";
                    FindByNumbersNumberNumericUpDown.Value = 0;
                }
                break;
            case NumbersResultType.Verses:
            case NumbersResultType.VerseRanges:
            case NumbersResultType.VerseSets:
                {
                    FindByNumbersVersesComparisonOperatorLabel.Text = "=";
                    FindByNumbersVersesComparisonOperatorLabel.Enabled = false;
                    FindByNumbersVersesNumberTypeLabel.Text = "";
                    FindByNumbersVersesNumberTypeLabel.Enabled = false;
                }
                break;
            case NumbersResultType.Chapters:
            case NumbersResultType.ChapterRanges:
            case NumbersResultType.ChapterSets:
                {
                    FindByNumbersChaptersComparisonOperatorLabel.Text = "=";
                    FindByNumbersChaptersComparisonOperatorLabel.Enabled = false;
                    FindByNumbersChaptersNumberTypeLabel.Text = "";
                    FindByNumbersChaptersNumberTypeLabel.Enabled = false;
                }
                break;
            default:
                break;
        }
    }
    private bool UpdateComparisonOperator(Control control)
    {
        if (control == null) return false;

        if (ModifierKeys == Keys.Shift)
        {
            if (control.Text == "=")
            {
                control.Text = "Ʃ";
                ToolTip.SetToolTip(control, "equals to sum");
            }
            else if (control.Text == "Ʃ")
            {
                control.Text = "!÷";
                ToolTip.SetToolTip(control, "indivisible by");
            }
            else if (control.Text == "!÷")
            {
                control.Text = "÷";
                ToolTip.SetToolTip(control, "divisible by (with remainder)");
            }
            else if (control.Text == "÷")
            {
                control.Text = "≥";
                ToolTip.SetToolTip(control, "greater than or equals to");
            }
            else if (control.Text == "≥")
            {
                control.Text = ">";
                ToolTip.SetToolTip(control, "greater than");
            }
            else if (control.Text == ">")
            {
                control.Text = "≤";
                ToolTip.SetToolTip(control, "less than or equals to");
            }
            else if (control.Text == "≤")
            {
                control.Text = "<";
                ToolTip.SetToolTip(control, "less than");
            }
            else if (control.Text == "<")
            {
                control.Text = "≠";
                ToolTip.SetToolTip(control, "not equals to");
            }
            else if (control.Text == "≠")
            {
                control.Text = "=";
                ToolTip.SetToolTip(control, "equals to");
            }
            else
            {
                // do nothing
            }
        }
        else
        {
            if (control.Text == "=")
            {
                control.Text = "≠";
                ToolTip.SetToolTip(control, "not equals to");
            }
            else if (control.Text == "≠")
            {
                control.Text = "<";
                ToolTip.SetToolTip(control, "less than");
            }
            else if (control.Text == "<")
            {
                control.Text = "≤";
                ToolTip.SetToolTip(control, "less than or equals to");
            }
            else if (control.Text == "≤")
            {
                control.Text = ">";
                ToolTip.SetToolTip(control, "greater than");
            }
            else if (control.Text == ">")
            {
                control.Text = "≥";
                ToolTip.SetToolTip(control, "greater than or equals to");
            }
            else if (control.Text == "≥")
            {
                control.Text = "÷";
                ToolTip.SetToolTip(control, "divisible by (with remainder)");
            }
            else if (control.Text == "÷")
            {
                control.Text = "!÷";
                ToolTip.SetToolTip(control, "indivisible by");
            }
            else if (control.Text == "!÷")
            {
                control.Text = "Ʃ";
                ToolTip.SetToolTip(control, "equals to sum");
            }
            else if (control.Text == "Ʃ")
            {
                control.Text = "=";
                ToolTip.SetToolTip(control, "equals to");
            }
            else
            {
                // do nothing
            }
        }
        return true;
    }
    private bool UpdateNumberType(Control control)
    {
        if (control == null) return false;

        // inc/dec remainder
        int remainder;
        if (int.TryParse(control.Text, out remainder))
        {
            if (control.Tag != null)
            {
                int max;
                if (int.TryParse(control.Tag.ToString(), out max))
                {
                    int max_remainder = max - 1;
                    if (max_remainder < -1) max_remainder = -1;

                    if (ModifierKeys != Keys.Shift)
                    {
                        remainder++;
                        if (remainder > max_remainder) remainder = -1;
                    }
                    else
                    {
                        remainder--;
                        if (remainder < -1) remainder = max_remainder;
                    }

                    control.Text = remainder.ToString();
                }
            }
            return false;
        }
        else
        {
            if (ModifierKeys != Keys.Shift)
            {
                if (control.Text == "")
                {
                    control.Text = "#";
                    control.ForeColor = GetNumberTypeColor(0L);
                    string text = null;
                    switch (m_numbers_result_type)
                    {
                        case NumbersResultType.Words: { text = "word number"; break; }
                        case NumbersResultType.Verses: { text = "verse number"; break; }
                        case NumbersResultType.Chapters: { text = "chapter number"; break; }
                        default: { text = "number"; break; }
                    }
                    ToolTip.SetToolTip(control, text);
                }
                else if (control.Text == "#")
                {
                    control.Text = "P";
                    control.ForeColor = GetNumberTypeColor(19L);
                    ToolTip.SetToolTip(control, "prime = divisible by itself only");
                }
                else if (control.Text == "P")
                {
                    control.Text = "AP";
                    control.ForeColor = GetNumberTypeColor(47L);
                    ToolTip.SetToolTip(control, "additive prime = prime with a prime digit sum");
                }
                else if (control.Text == "AP")
                {
                    control.Text = "XP";
                    control.ForeColor = GetNumberTypeColor(19L);
                    ToolTip.SetToolTip(control, "non-additive prime = prime with a composite digit sum");
                }
                else if (control.Text == "XP")
                {
                    control.Text = "C";
                    control.ForeColor = GetNumberTypeColor(14L);
                    ToolTip.SetToolTip(control, "composite = divisible by prime(s) below it");
                }
                else if (control.Text == "C")
                {
                    control.Text = "AC";
                    control.ForeColor = GetNumberTypeColor(114L);
                    ToolTip.SetToolTip(control, "additive composite = composite with a composite digit sum");
                }
                else if (control.Text == "AC")
                {
                    control.Text = "XC";
                    control.ForeColor = GetNumberTypeColor(25L);
                    ToolTip.SetToolTip(control, "non-additive composite = composite with a prime digit sum");
                }
                else if (control.Text == "XC")
                {
                    control.Text = "O";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "odd number");
                }
                else if (control.Text == "O")
                {
                    control.Text = "E";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "even number");
                }
                else if (control.Text == "E")
                {
                    control.Text = "^2";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "square number");
                }
                else if (control.Text == "^2")
                {
                    control.Text = "^3";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "cubic number");
                }
                else if (control.Text == "^3")
                {
                    control.Text = "^4";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "quartic number");
                }
                else if (control.Text == "^4")
                {
                    control.Text = "^5";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "quintic number");
                }
                else if (control.Text == "^5")
                {
                    control.Text = "^6";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "sextic number");
                }
                else if (control.Text == "^6")
                {
                    control.Text = "^7";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "septic number");
                }
                else if (control.Text == "^7")
                {
                    control.Text = "";
                    control.ForeColor = control.BackColor;
                    ToolTip.SetToolTip(control, "");
                }
            }
            else // if (ModifierKeys == Keys.Shift)
            {
                if (control.Text == "")
                {
                    control.Text = "^7";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "septic number");
                }
                else if (control.Text == "^7")
                {
                    control.Text = "^6";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "sextic number");
                }
                else if (control.Text == "^6")
                {
                    control.Text = "^5";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "quartic number");
                }
                else if (control.Text == "^5")
                {
                    control.Text = "^4";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "quartic number");
                }
                else if (control.Text == "^4")
                {
                    control.Text = "^3";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "cubic number");
                }
                else if (control.Text == "^3")
                {
                    control.Text = "^2";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "square number");
                }
                else if (control.Text == "^2")
                {
                    control.Text = "E";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "even number");
                }
                else if (control.Text == "E")
                {
                    control.Text = "O";
                    control.ForeColor = GetNumberTypeColor(0L);
                    ToolTip.SetToolTip(control, "odd number");
                }
                else if (control.Text == "O")
                {
                    control.Text = "XC";
                    control.ForeColor = GetNumberTypeColor(25L);
                    ToolTip.SetToolTip(control, "non-additive composite = composite with a prime digit sum");
                }
                else if (control.Text == "XC")
                {
                    control.Text = "AC";
                    control.ForeColor = GetNumberTypeColor(114L);
                    ToolTip.SetToolTip(control, "additive composite = composite with a composite digit sum");
                }
                else if (control.Text == "AC")
                {
                    control.Text = "C";
                    control.ForeColor = GetNumberTypeColor(14L);
                    ToolTip.SetToolTip(control, "composite = divisible by prime(s) below it");
                }
                else if (control.Text == "C")
                {
                    control.Text = "XP";
                    control.ForeColor = GetNumberTypeColor(19L);
                    ToolTip.SetToolTip(control, "non-additive prime = prime with a composite digit sum");
                }
                else if (control.Text == "XP")
                {
                    control.Text = "AP";
                    control.ForeColor = GetNumberTypeColor(47L);
                    ToolTip.SetToolTip(control, "additive prime = prime with a prime digit sum");
                }
                else if (control.Text == "AP")
                {
                    control.Text = "P";
                    control.ForeColor = GetNumberTypeColor(19L);
                    ToolTip.SetToolTip(control, "prime = divisible by itself only");
                }
                else if (control.Text == "P")
                {
                    control.Text = "#";
                    control.ForeColor = GetNumberTypeColor(0L);
                    string text = null;
                    switch (m_numbers_result_type)
                    {
                        case NumbersResultType.Words: { text = "word number"; break; }
                        case NumbersResultType.Verses: { text = "verse number"; break; }
                        case NumbersResultType.Chapters: { text = "chapter number"; break; }
                        default: { text = "number"; break; }
                    }
                    ToolTip.SetToolTip(control, text);
                }
                else if (control.Text == "#")
                {
                    control.Text = "";
                    control.ForeColor = control.BackColor;
                    ToolTip.SetToolTip(control, "");
                }
            }
            return true;
        }
    }
    private void FindByNumbersComparisonOperatorLabel_Click(object sender, EventArgs e)
    {
        UpdateNumberTypeLabelTags();

        Control control = sender as Control;
        if (control != null)
        {
            if (UpdateComparisonOperator(control))
            {
                if (control == FindByNumbersNumberComparisonOperatorLabel)
                {
                    if (FindByNumbersNumberComparisonOperatorLabel.Text == "÷")
                    {
                        int remainder = 0;
                        FindByNumbersNumberNumberTypeLabel.Tag = remainder;
                        FindByNumbersNumberNumberTypeLabel.Text = remainder.ToString();
                        FindByNumbersNumberNumberTypeLabel.ForeColor = Color.Black;
                        FindByNumbersNumberNumberTypeLabel.Enabled = true;
                        ToolTip.SetToolTip(FindByNumbersNumberNumberTypeLabel, "remainder");
                    }
                    else
                    {
                        FindByNumbersNumberNumberTypeLabel.Text = "";
                        ToolTip.SetToolTip(FindByNumbersNumberNumberTypeLabel, null);
                    }
                }
                else if (control == FindByNumbersChaptersComparisonOperatorLabel)
                {
                    if (FindByNumbersChaptersComparisonOperatorLabel.Text == "÷")
                    {
                        int remainder = 0;
                        FindByNumbersChaptersNumberTypeLabel.Tag = remainder;
                        FindByNumbersChaptersNumberTypeLabel.Text = remainder.ToString();
                        FindByNumbersChaptersNumberTypeLabel.ForeColor = Color.Black;
                        FindByNumbersChaptersNumberTypeLabel.Enabled = true;
                        ToolTip.SetToolTip(FindByNumbersChaptersNumberTypeLabel, "remainder");
                    }
                    else
                    {
                        FindByNumbersChaptersNumberTypeLabel.Text = "";
                        ToolTip.SetToolTip(FindByNumbersChaptersNumberTypeLabel, null);
                    }
                }
                else if (control == FindByNumbersVersesComparisonOperatorLabel)
                {
                    if (FindByNumbersVersesComparisonOperatorLabel.Text == "÷")
                    {
                        int remainder = 0;
                        FindByNumbersVersesNumberTypeLabel.Tag = remainder;
                        FindByNumbersVersesNumberTypeLabel.Text = remainder.ToString();
                        FindByNumbersVersesNumberTypeLabel.ForeColor = Color.Black;
                        FindByNumbersVersesNumberTypeLabel.Enabled = true;
                        ToolTip.SetToolTip(FindByNumbersVersesNumberTypeLabel, "remainder");
                    }
                    else
                    {
                        FindByNumbersVersesNumberTypeLabel.Text = "";
                        ToolTip.SetToolTip(FindByNumbersVersesNumberTypeLabel, null);
                    }
                }
                else if (control == FindByNumbersWordsComparisonOperatorLabel)
                {
                    if (FindByNumbersWordsComparisonOperatorLabel.Text == "÷")
                    {
                        int remainder = 0;
                        FindByNumbersWordsNumberTypeLabel.Tag = remainder;
                        FindByNumbersWordsNumberTypeLabel.Text = remainder.ToString();
                        FindByNumbersWordsNumberTypeLabel.ForeColor = Color.Black;
                        FindByNumbersWordsNumberTypeLabel.Enabled = true;
                        ToolTip.SetToolTip(FindByNumbersWordsNumberTypeLabel, "remainder");
                    }
                    else
                    {
                        FindByNumbersWordsNumberTypeLabel.Text = "";
                        ToolTip.SetToolTip(FindByNumbersWordsNumberTypeLabel, null);
                    }
                }
                else if (control == FindByNumbersLettersComparisonOperatorLabel)
                {
                    if (FindByNumbersLettersComparisonOperatorLabel.Text == "÷")
                    {
                        int remainder = 0;
                        FindByNumbersLettersNumberTypeLabel.Tag = remainder;
                        FindByNumbersLettersNumberTypeLabel.Text = remainder.ToString();
                        FindByNumbersLettersNumberTypeLabel.ForeColor = Color.Black;
                        FindByNumbersLettersNumberTypeLabel.Enabled = true;
                        ToolTip.SetToolTip(FindByNumbersLettersNumberTypeLabel, "remainder");
                    }
                    else
                    {
                        FindByNumbersLettersNumberTypeLabel.Text = "";
                        ToolTip.SetToolTip(FindByNumbersLettersNumberTypeLabel, null);
                    }
                }
                else if (control == FindByNumbersUniqueLettersComparisonOperatorLabel)
                {
                    if (FindByNumbersUniqueLettersComparisonOperatorLabel.Text == "÷")
                    {
                        int remainder = 0;
                        FindByNumbersUniqueLettersNumberTypeLabel.Tag = remainder;
                        FindByNumbersUniqueLettersNumberTypeLabel.Text = remainder.ToString();
                        FindByNumbersUniqueLettersNumberTypeLabel.ForeColor = Color.Black;
                        FindByNumbersUniqueLettersNumberTypeLabel.Enabled = true;
                        ToolTip.SetToolTip(FindByNumbersUniqueLettersNumberTypeLabel, "remainder");
                    }
                    else
                    {
                        FindByNumbersUniqueLettersNumberTypeLabel.Text = "";
                        ToolTip.SetToolTip(FindByNumbersUniqueLettersNumberTypeLabel, null);
                    }
                }
                else if (control == FindByNumbersValueComparisonOperatorLabel)
                {
                    if (FindByNumbersValueComparisonOperatorLabel.Text == "÷")
                    {
                        int remainder = 0;
                        FindByNumbersValueNumberTypeLabel.Tag = remainder;
                        FindByNumbersValueNumberTypeLabel.Text = remainder.ToString();
                        FindByNumbersValueNumberTypeLabel.ForeColor = Color.Black;
                        FindByNumbersValueNumberTypeLabel.Enabled = true;
                        ToolTip.SetToolTip(FindByNumbersValueNumberTypeLabel, "remainder");
                    }
                    else
                    {
                        FindByNumbersValueNumberTypeLabel.Text = "";
                        ToolTip.SetToolTip(FindByNumbersValueNumberTypeLabel, null);
                    }
                }
                else
                {
                    // do nothing
                }

                FindByNumbersControls_Enter(null, null);
            }
        }
    }
    private void FindByNumbersNumberTypeLabel_Click(object sender, EventArgs e)
    {
        UpdateNumberTypeLabelTags();

        Control control = sender as Control;
        if (control != null)
        {
            if (UpdateNumberType(control))
            {
                if (control == FindByNumbersNumberNumberTypeLabel)
                {
                    FindByNumbersNumberComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersNumberNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersNumberComparisonOperatorLabel.Text = "=";
                        FindByNumbersNumberNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersNumberNumericUpDown.Focus();
                    }
                }
                else if (control == FindByNumbersChaptersNumberTypeLabel)
                {
                    FindByNumbersChaptersComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersChaptersNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersChaptersComparisonOperatorLabel.Text = "=";
                        FindByNumbersChaptersNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersChaptersNumericUpDown.Focus();
                    }
                }
                else if (control == FindByNumbersVersesNumberTypeLabel)
                {
                    FindByNumbersVersesComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersVersesNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersVersesComparisonOperatorLabel.Text = "=";
                        FindByNumbersVersesNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersVersesNumericUpDown.Focus();
                    }
                }
                else if (control == FindByNumbersWordsNumberTypeLabel)
                {
                    FindByNumbersWordsComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersWordsNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersWordsComparisonOperatorLabel.Text = "=";
                        FindByNumbersWordsNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersWordsNumericUpDown.Focus();
                    }
                }
                else if (control == FindByNumbersLettersNumberTypeLabel)
                {
                    FindByNumbersLettersComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersLettersNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersLettersComparisonOperatorLabel.Text = "=";
                        FindByNumbersLettersNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersLettersNumericUpDown.Focus();
                    }
                }
                else if (control == FindByNumbersUniqueLettersNumberTypeLabel)
                {
                    FindByNumbersUniqueLettersComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersUniqueLettersNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersUniqueLettersComparisonOperatorLabel.Text = "=";
                        FindByNumbersUniqueLettersNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersUniqueLettersNumericUpDown.Focus();
                    }
                }
                else if (control == FindByNumbersValueNumberTypeLabel)
                {
                    FindByNumbersValueComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByNumbersValueNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByNumbersValueComparisonOperatorLabel.Text = "=";
                        FindByNumbersValueNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByNumbersValueNumericUpDown.Focus();
                    }
                }
                else
                {
                    // do nothing
                }

                FindByNumbersControls_Enter(null, null);
            }
        }
    }
    private void FindByNumbersControl_EnabledChanged(object sender, EventArgs e)
    {
        Control control = sender as Control;
        if (control != null)
        {
            control.BackColor = (control.Enabled) ? SystemColors.Window : Color.LightGray;
        }
    }
    private void FindByNumbersControls_Enter(object sender, EventArgs e)
    {
        this.AcceptButton = FindByNumbersButton;

        FindByTextButton.Enabled = false;
        FindBySimilarityButton.Enabled = false;
        FindByNumbersButton.Enabled = true;
        FindByProstrationTypeButton.Enabled = false;
        FindByFrequencyButton.Enabled = false;

        ToolTip.SetToolTip(ChaptersInspectLabel, "Inspect chapters");
        WordsListBoxLabel.Visible = false;
        WordsListBox.Visible = false;

        ResetFindByTextSearchBlockSizeLabels();
        ResetFindByTextSearchTypeLabels();
        ResetFindBySimilarityResultTypeLabels();
        ResetFindByNumbersResultTypeLabels();
        ResetFindByFrequencyResultTypeLabels();

        switch (m_numbers_result_type)
        {
            case NumbersResultType.Words:
            case NumbersResultType.WordRanges:
            case NumbersResultType.WordSets:
                {
                    FindByNumbersResultTypeWordsLabel.BackColor = Color.SteelBlue;
                    FindByNumbersResultTypeWordsLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case NumbersResultType.Sentences:
                {
                    FindByNumbersResultTypeSentencesLabel.BackColor = Color.SteelBlue;
                    FindByNumbersResultTypeSentencesLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case NumbersResultType.Verses:
            case NumbersResultType.VerseRanges:
            case NumbersResultType.VerseSets:
                {
                    FindByNumbersResultTypeVersesLabel.BackColor = Color.SteelBlue;
                    FindByNumbersResultTypeVersesLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case NumbersResultType.Chapters:
            case NumbersResultType.ChapterRanges:
            case NumbersResultType.ChapterSets:
                {
                    FindByNumbersResultTypeChaptersLabel.BackColor = Color.SteelBlue;
                    FindByNumbersResultTypeChaptersLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            default:
                break;
        }
    }
    private void FindByNumbersNumericUpDown_Leave(object sender, EventArgs e)
    {
        NumericUpDown control = sender as NumericUpDown;
        if (control != null)
        {
            if (String.IsNullOrEmpty(control.Text))
            {
                control.Value = 0;
                control.Refresh();
            }
        }

        UpdateNumberTypeLabelTags();
    }
    private void FindByNumbersNumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        UpdateFindByNumbersResultType();

        UpdateNumberTypeLabelTags();

        // don't auto-find as user may not have finished setting all parameters yet
        // some operations take too long and would frustrate user
        //FindByNumbers();
    }
    private void UpdateNumberTypeLabelTags()
    {
        FindByNumbersNumberNumberTypeLabel.Tag = (int)FindByNumbersNumberNumericUpDown.Value;
        FindByNumbersChaptersNumberTypeLabel.Tag = (int)FindByNumbersChaptersNumericUpDown.Value;
        FindByNumbersVersesNumberTypeLabel.Tag = (int)FindByNumbersVersesNumericUpDown.Value;
        FindByNumbersWordsNumberTypeLabel.Tag = (int)FindByNumbersWordsNumericUpDown.Value;
        FindByNumbersLettersNumberTypeLabel.Tag = (int)FindByNumbersLettersNumericUpDown.Value;
        FindByNumbersUniqueLettersNumberTypeLabel.Tag = (int)FindByNumbersUniqueLettersNumericUpDown.Value;
        FindByNumbersValueNumberTypeLabel.Tag = (int)FindByNumbersValueNumericUpDown.Value;

        int number;
        if (int.TryParse(FindByNumbersNumberNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByNumbersNumberNumericUpDown.Value)
            {
                number = (int)FindByNumbersNumberNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByNumbersNumberNumberTypeLabel.Text = number.ToString();
            }
        }

        if (int.TryParse(FindByNumbersChaptersNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByNumbersChaptersNumericUpDown.Value)
            {
                number = (int)FindByNumbersChaptersNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByNumbersChaptersNumberTypeLabel.Text = number.ToString();
            }
        }

        if (int.TryParse(FindByNumbersVersesNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByNumbersVersesNumericUpDown.Value)
            {
                number = (int)FindByNumbersVersesNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByNumbersVersesNumberTypeLabel.Text = number.ToString();
            }
        }

        if (int.TryParse(FindByNumbersWordsNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByNumbersWordsNumericUpDown.Value)
            {
                number = (int)FindByNumbersWordsNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByNumbersWordsNumberTypeLabel.Text = number.ToString();
            }
        }

        if (int.TryParse(FindByNumbersLettersNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByNumbersLettersNumericUpDown.Value)
            {
                number = (int)FindByNumbersLettersNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByNumbersLettersNumberTypeLabel.Text = number.ToString();
            }
        }

        if (int.TryParse(FindByNumbersUniqueLettersNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByNumbersUniqueLettersNumericUpDown.Value)
            {
                number = (int)FindByNumbersUniqueLettersNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByNumbersUniqueLettersNumberTypeLabel.Text = number.ToString();
            }
        }

        if (int.TryParse(FindByNumbersValueNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByNumbersValueNumericUpDown.Value)
            {
                number = (int)FindByNumbersValueNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByNumbersValueNumericUpDown.Text = number.ToString();
            }
        }
    }
    private void FindByNumbersButton_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            FindByNumbers();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void FindByNumbers()
    {
        m_search_type = SearchType.Numbers;

        if (m_client != null)
        {
            ClearFindMatches();

            // 1. number types
            string number_symbol = FindByNumbersNumberNumberTypeLabel.Enabled ? FindByNumbersNumberNumberTypeLabel.Text : "";
            NumberType number_number_type =
                (number_symbol == "P") ? NumberType.Prime :
                (number_symbol == "AP") ? NumberType.AdditivePrime :
                (number_symbol == "XP") ? NumberType.NonAdditivePrime :
                (number_symbol == "C") ? NumberType.Composite :
                (number_symbol == "AC") ? NumberType.AdditiveComposite :
                (number_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (number_symbol == "O") ? NumberType.Odd :
                (number_symbol == "E") ? NumberType.Even :
                (number_symbol == "^2") ? NumberType.Square :
                (number_symbol == "^3") ? NumberType.Cubic :
                (number_symbol == "^4") ? NumberType.Quartic :
                (number_symbol == "^5") ? NumberType.Quintic :
                (number_symbol == "^6") ? NumberType.Sextic :
                (number_symbol == "^7") ? NumberType.Septic :
                (number_symbol == "#") ? NumberType.Natural :
                (number_symbol == "") ? NumberType.None :
                                        NumberType.None;
            string chapter_count_symbol = FindByNumbersChaptersNumberTypeLabel.Enabled ? FindByNumbersChaptersNumberTypeLabel.Text : "";
            NumberType chapter_count_number_type =
                (chapter_count_symbol == "P") ? NumberType.Prime :
                (chapter_count_symbol == "AP") ? NumberType.AdditivePrime :
                (chapter_count_symbol == "XP") ? NumberType.NonAdditivePrime :
                (chapter_count_symbol == "C") ? NumberType.Composite :
                (chapter_count_symbol == "AC") ? NumberType.AdditiveComposite :
                (chapter_count_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (chapter_count_symbol == "O") ? NumberType.Odd :
                (chapter_count_symbol == "E") ? NumberType.Even :
                (chapter_count_symbol == "^2") ? NumberType.Square :
                (chapter_count_symbol == "^3") ? NumberType.Cubic :
                (chapter_count_symbol == "^4") ? NumberType.Quartic :
                (chapter_count_symbol == "^5") ? NumberType.Quintic :
                (chapter_count_symbol == "^6") ? NumberType.Sextic :
                (chapter_count_symbol == "^7") ? NumberType.Septic :
                (chapter_count_symbol == "#") ? NumberType.Natural :
                (chapter_count_symbol == "") ? NumberType.None :
                                               NumberType.None;
            string verse_count_symbol = FindByNumbersVersesNumberTypeLabel.Enabled ? FindByNumbersVersesNumberTypeLabel.Text : "";
            NumberType verse_count_number_type =
                (verse_count_symbol == "P") ? NumberType.Prime :
                (verse_count_symbol == "AP") ? NumberType.AdditivePrime :
                (verse_count_symbol == "XP") ? NumberType.NonAdditivePrime :
                (verse_count_symbol == "C") ? NumberType.Composite :
                (verse_count_symbol == "AC") ? NumberType.AdditiveComposite :
                (verse_count_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (verse_count_symbol == "O") ? NumberType.Odd :
                (verse_count_symbol == "E") ? NumberType.Even :
                (verse_count_symbol == "^2") ? NumberType.Square :
                (verse_count_symbol == "^3") ? NumberType.Cubic :
                (verse_count_symbol == "^4") ? NumberType.Quartic :
                (verse_count_symbol == "^5") ? NumberType.Quintic :
                (verse_count_symbol == "^6") ? NumberType.Sextic :
                (verse_count_symbol == "^7") ? NumberType.Septic :
                (verse_count_symbol == "#") ? NumberType.Natural :
                (verse_count_symbol == "") ? NumberType.None :
                                             NumberType.None;
            string word_count_symbol = FindByNumbersWordsNumberTypeLabel.Enabled ? FindByNumbersWordsNumberTypeLabel.Text : "";
            NumberType word_count_number_type =
                (word_count_symbol == "P") ? NumberType.Prime :
                (word_count_symbol == "AP") ? NumberType.AdditivePrime :
                (word_count_symbol == "XP") ? NumberType.NonAdditivePrime :
                (word_count_symbol == "C") ? NumberType.Composite :
                (word_count_symbol == "AC") ? NumberType.AdditiveComposite :
                (word_count_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (word_count_symbol == "O") ? NumberType.Odd :
                (word_count_symbol == "E") ? NumberType.Even :
                (word_count_symbol == "^2") ? NumberType.Square :
                (word_count_symbol == "^3") ? NumberType.Cubic :
                (word_count_symbol == "^4") ? NumberType.Quartic :
                (word_count_symbol == "^5") ? NumberType.Quintic :
                (word_count_symbol == "^6") ? NumberType.Sextic :
                (word_count_symbol == "^7") ? NumberType.Septic :
                (word_count_symbol == "#") ? NumberType.Natural :
                (word_count_symbol == "") ? NumberType.None :
                                            NumberType.None;
            string letter_count_symbol = FindByNumbersLettersNumberTypeLabel.Enabled ? FindByNumbersLettersNumberTypeLabel.Text : "";
            NumberType letter_count_number_type =
                (letter_count_symbol == "P") ? NumberType.Prime :
                (letter_count_symbol == "AP") ? NumberType.AdditivePrime :
                (letter_count_symbol == "XP") ? NumberType.NonAdditivePrime :
                (letter_count_symbol == "C") ? NumberType.Composite :
                (letter_count_symbol == "AC") ? NumberType.AdditiveComposite :
                (letter_count_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (letter_count_symbol == "O") ? NumberType.Odd :
                (letter_count_symbol == "E") ? NumberType.Even :
                (letter_count_symbol == "^2") ? NumberType.Square :
                (letter_count_symbol == "^3") ? NumberType.Cubic :
                (letter_count_symbol == "^4") ? NumberType.Quartic :
                (letter_count_symbol == "^5") ? NumberType.Quintic :
                (letter_count_symbol == "^6") ? NumberType.Sextic :
                (letter_count_symbol == "^7") ? NumberType.Septic :
                (letter_count_symbol == "#") ? NumberType.Natural :
                (letter_count_symbol == "") ? NumberType.None :
                                              NumberType.None;
            string unique_letter_count_symbol = FindByNumbersUniqueLettersNumberTypeLabel.Enabled ? FindByNumbersUniqueLettersNumberTypeLabel.Text : "";
            NumberType unique_letter_count_number_type =
                (unique_letter_count_symbol == "P") ? NumberType.Prime :
                (unique_letter_count_symbol == "AP") ? NumberType.AdditivePrime :
                (unique_letter_count_symbol == "XP") ? NumberType.NonAdditivePrime :
                (unique_letter_count_symbol == "C") ? NumberType.Composite :
                (unique_letter_count_symbol == "AC") ? NumberType.AdditiveComposite :
                (unique_letter_count_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (unique_letter_count_symbol == "O") ? NumberType.Odd :
                (unique_letter_count_symbol == "E") ? NumberType.Even :
                (unique_letter_count_symbol == "^2") ? NumberType.Square :
                (unique_letter_count_symbol == "^3") ? NumberType.Cubic :
                (unique_letter_count_symbol == "^4") ? NumberType.Quartic :
                (unique_letter_count_symbol == "^5") ? NumberType.Quintic :
                (unique_letter_count_symbol == "^6") ? NumberType.Sextic :
                (unique_letter_count_symbol == "^7") ? NumberType.Septic :
                (unique_letter_count_symbol == "#") ? NumberType.Natural :
                (unique_letter_count_symbol == "") ? NumberType.None :
                                                     NumberType.None;
            string value_symbol = FindByNumbersValueNumberTypeLabel.Enabled ? FindByNumbersValueNumberTypeLabel.Text : "";
            NumberType value_number_type =
                (value_symbol == "P") ? NumberType.Prime :
                (value_symbol == "AP") ? NumberType.AdditivePrime :
                (value_symbol == "XP") ? NumberType.NonAdditivePrime :
                (value_symbol == "C") ? NumberType.Composite :
                (value_symbol == "AC") ? NumberType.AdditiveComposite :
                (value_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (value_symbol == "O") ? NumberType.Odd :
                (value_symbol == "E") ? NumberType.Even :
                (value_symbol == "^2") ? NumberType.Square :
                (value_symbol == "^3") ? NumberType.Cubic :
                (value_symbol == "^4") ? NumberType.Quartic :
                (value_symbol == "^5") ? NumberType.Quintic :
                (value_symbol == "^6") ? NumberType.Sextic :
                (value_symbol == "^7") ? NumberType.Septic :
                (value_symbol == "#") ? NumberType.Natural :
                (value_symbol == "") ? NumberType.None :
                                       NumberType.None;

            // 2. numbers
            int number = FindByNumbersNumberNumericUpDown.Enabled ? (int)FindByNumbersNumberNumericUpDown.Value : 0;
            int chapter_count = FindByNumbersChaptersNumericUpDown.Enabled ? (int)FindByNumbersChaptersNumericUpDown.Value : 0;
            int verse_count = FindByNumbersVersesNumericUpDown.Enabled ? (int)FindByNumbersVersesNumericUpDown.Value : 0;
            int word_count = FindByNumbersWordsNumericUpDown.Enabled ? (int)FindByNumbersWordsNumericUpDown.Value : 0;
            int letter_count = FindByNumbersLettersNumericUpDown.Enabled ? (int)FindByNumbersLettersNumericUpDown.Value : 0;
            int unique_letter_count = FindByNumbersUniqueLettersNumericUpDown.Enabled ? (int)FindByNumbersUniqueLettersNumericUpDown.Value : 0;
            long value = FindByNumbersValueNumericUpDown.Enabled ? (int)FindByNumbersValueNumericUpDown.Value : 0;

            // 3. comparison operators = ≠ < ≤ > ≥ ÷ !÷ Ʃ
            string number_operator_symbol = FindByNumbersNumberComparisonOperatorLabel.Text;
            ComparisonOperator number_comparison_operator =
                (number_operator_symbol == "=") ? ComparisonOperator.Equal :
                (number_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (number_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (number_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (number_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (number_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (number_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (number_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (number_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                  ComparisonOperator.Reserved;
            string chapter_count_operator_symbol = FindByNumbersChaptersComparisonOperatorLabel.Text;
            ComparisonOperator chapter_count_comparison_operator =
                (chapter_count_operator_symbol == "=") ? ComparisonOperator.Equal :
                (chapter_count_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (chapter_count_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (chapter_count_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (chapter_count_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (chapter_count_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (chapter_count_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (chapter_count_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (chapter_count_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                         ComparisonOperator.Reserved;
            string verse_count_operator_symbol = FindByNumbersVersesComparisonOperatorLabel.Text;
            ComparisonOperator verse_count_comparison_operator =
                (verse_count_operator_symbol == "=") ? ComparisonOperator.Equal :
                (verse_count_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (verse_count_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (verse_count_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (verse_count_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (verse_count_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (verse_count_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (verse_count_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (verse_count_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                       ComparisonOperator.Reserved;
            string word_count_operator_symbol = FindByNumbersWordsComparisonOperatorLabel.Text;
            ComparisonOperator word_count_comparison_operator =
                (word_count_operator_symbol == "=") ? ComparisonOperator.Equal :
                (word_count_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (word_count_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (word_count_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (word_count_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (word_count_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (word_count_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (word_count_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (word_count_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                      ComparisonOperator.Reserved;
            string letter_count_operator_symbol = FindByNumbersLettersComparisonOperatorLabel.Text;
            ComparisonOperator letter_count_comparison_operator =
                (letter_count_operator_symbol == "=") ? ComparisonOperator.Equal :
                (letter_count_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (letter_count_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (letter_count_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (letter_count_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (letter_count_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (letter_count_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (letter_count_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (letter_count_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                        ComparisonOperator.Reserved;
            string unique_letter_count_operator_symbol = FindByNumbersUniqueLettersComparisonOperatorLabel.Text;
            ComparisonOperator unique_letter_count_comparison_operator =
                (unique_letter_count_operator_symbol == "=") ? ComparisonOperator.Equal :
                (unique_letter_count_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (unique_letter_count_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (unique_letter_count_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (unique_letter_count_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (unique_letter_count_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (unique_letter_count_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (unique_letter_count_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (unique_letter_count_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                               ComparisonOperator.Reserved;
            string value_operator_symbol = FindByNumbersValueComparisonOperatorLabel.Text;
            ComparisonOperator value_comparison_operator =
                (value_operator_symbol == "=") ? ComparisonOperator.Equal :
                (value_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (value_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (value_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (value_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (value_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (value_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (value_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (value_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                 ComparisonOperator.Reserved;

            // 4. remainders for % comparison operator
            int number_remainder = -1;
            if (number_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    number_remainder = int.Parse(FindByNumbersNumberNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }
            int chapter_count_remainder = -1;
            if (chapter_count_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    chapter_count_remainder = int.Parse(FindByNumbersChaptersNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }
            int verse_count_remainder = -1;
            if (verse_count_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    verse_count_remainder = int.Parse(FindByNumbersVersesNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }
            int word_count_remainder = -1;
            if (word_count_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    word_count_remainder = int.Parse(FindByNumbersWordsNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }
            int letter_count_remainder = -1;
            if (letter_count_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    letter_count_remainder = int.Parse(FindByNumbersLettersNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }
            int unique_letter_count_remainder = -1;
            if (unique_letter_count_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    unique_letter_count_remainder = int.Parse(FindByNumbersUniqueLettersNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }
            int value_remainder = -1;
            if (value_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    value_remainder = int.Parse(FindByNumbersValueNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }


            string text = null;
            text += "number" + number_operator_symbol + ((number > 0) ? number.ToString() : ((number_number_type != NumberType.None) ? FindByNumbersNumberNumberTypeLabel.Text : "*")) + " ";

            if (
                (m_numbers_result_type == NumbersResultType.ChapterRanges) ||
                (m_numbers_result_type == NumbersResultType.ChapterSets)
               )
            {
                text += "chapters" + chapter_count_operator_symbol + ((chapter_count > 0) ? chapter_count.ToString() : ((chapter_count_number_type != NumberType.None) ? FindByNumbersChaptersNumberTypeLabel.Text : "*")) + " ";
            }

            if (
                (m_numbers_result_type == NumbersResultType.Chapters) ||
                (m_numbers_result_type == NumbersResultType.ChapterRanges) ||
                (m_numbers_result_type == NumbersResultType.ChapterSets) ||
                (m_numbers_result_type == NumbersResultType.VerseRanges) ||
                (m_numbers_result_type == NumbersResultType.VerseSets)
               )
            {
                text += "verses" + verse_count_operator_symbol + ((verse_count > 0) ? verse_count.ToString() : ((verse_count_number_type != NumberType.None) ? FindByNumbersVersesNumberTypeLabel.Text : "*")) + " ";
            }

            if (
                (m_numbers_result_type == NumbersResultType.Chapters) ||
                (m_numbers_result_type == NumbersResultType.ChapterRanges) ||
                (m_numbers_result_type == NumbersResultType.ChapterSets) ||
                (m_numbers_result_type == NumbersResultType.Verses) ||
                (m_numbers_result_type == NumbersResultType.VerseRanges) ||
                (m_numbers_result_type == NumbersResultType.VerseSets) ||
                (m_numbers_result_type == NumbersResultType.Sentences) ||
                (m_numbers_result_type == NumbersResultType.WordRanges) ||
                (m_numbers_result_type == NumbersResultType.WordSets)
               )
            {
                text += "words" + word_count_operator_symbol + ((word_count > 0) ? word_count.ToString() : ((word_count_number_type != NumberType.None) ? FindByNumbersWordsNumberTypeLabel.Text : "*")) + " ";
            }

            text += "letters" + letter_count_operator_symbol + ((letter_count > 0) ? letter_count.ToString() : ((letter_count_number_type != NumberType.None) ? FindByNumbersLettersNumberTypeLabel.Text : "*")) + " ";
            text += "unique" + unique_letter_count_operator_symbol + ((unique_letter_count > 0) ? unique_letter_count.ToString() : ((unique_letter_count_number_type != NumberType.None) ? FindByNumbersUniqueLettersNumberTypeLabel.Text : "*")) + " ";
            text += "value" + value_operator_symbol + ((value > 0) ? value.ToString() : ((value_number_type != NumberType.None) ? FindByNumbersValueNumberTypeLabel.Text : "*"));

            NumberQuery query = new NumberQuery();
            query.WithinVerses = true;

            query.Number = number;
            query.ChapterCount = chapter_count;
            query.VerseCount = verse_count;
            query.WordCount = word_count;
            query.LetterCount = letter_count;
            query.UniqueLetterCount = unique_letter_count;
            query.Value = value;

            query.NumberNumberType = number_number_type;
            query.ChapterCountNumberType = chapter_count_number_type;
            query.VerseCountNumberType = verse_count_number_type;
            query.WordCountNumberType = word_count_number_type;
            query.LetterCountNumberType = letter_count_number_type;
            query.UniqueLetterCountNumberType = unique_letter_count_number_type;
            query.ValueNumberType = value_number_type;

            query.NumberComparisonOperator = number_comparison_operator;
            query.ChapterCountComparisonOperator = chapter_count_comparison_operator;
            query.VerseCountComparisonOperator = verse_count_comparison_operator;
            query.WordCountComparisonOperator = word_count_comparison_operator;
            query.LetterCountComparisonOperator = letter_count_comparison_operator;
            query.UniqueLetterCountComparisonOperator = unique_letter_count_comparison_operator;
            query.ValueComparisonOperator = value_comparison_operator;
            query.NumberRemainder = number_remainder;
            query.ChapterCountRemainder = chapter_count_remainder;
            query.VerseCountRemainder = verse_count_remainder;
            query.WordCountRemainder = word_count_remainder;
            query.LetterCountRemainder = letter_count_remainder;
            query.UniqueLetterCountRemainder = unique_letter_count_remainder;
            query.ValueRemainder = value_remainder;

            //TODO: fill up digit sums and digital roots
            query.NumberDigitSum = 0;
            query.ChapterCountDigitSum = 0;
            query.VerseCountDigitSum = 0;
            query.WordCountDigitSum = 0;
            query.LetterCountDigitSum = 0;
            query.UniqueLetterCountDigitSum = 0;
            query.ValueDigitSum = 0;
            query.NumberDigitalRoot = 0;

            query.ChapterCountDigitalRoot = 0;
            query.VerseCountDigitalRoot = 0;
            query.WordCountDigitalRoot = 0;
            query.LetterCountDigitalRoot = 0;
            query.UniqueLetterCountDigitalRoot = 0;
            query.ValueDigitalRoot = 0;

            if (query.IsValid(m_numbers_result_type))
            {
                int match_count = -1;
                switch (m_numbers_result_type)
                {
                    case NumbersResultType.Words:
                        {
                            query.NumberScope = m_word_number_scope;
                            match_count = m_client.FindWords(query);
                            if (m_client.FoundWords != null)
                            {
                                if (m_client.FoundVerses != null)
                                {
                                    m_find_result_header = match_count + ((match_count == 1) ? " word" : " words") + " in " + m_client.FoundVerses.Count + ((m_client.FoundVerses.Count == 1) ? " verse" : " verses") + " with " + text + " in " + m_client.SearchScope.ToString();
                                    DisplayFoundVerses(true, true);
                                }
                            }
                        }
                        break;
                    case NumbersResultType.WordRanges:
                        {
                            query.NumberScope = m_word_number_scope;
                            match_count = m_client.FindWordRanges(query);
                            if (m_client.FoundWordRanges != null)
                            {
                                if (m_client.FoundVerses != null)
                                {
                                    m_find_result_header = match_count + ((match_count == 1) ? " word range" : " word ranges") + " in " + m_client.FoundVerses.Count + ((m_client.FoundVerses.Count == 1) ? " verse" : " verses") + " with " + text + " in " + m_client.SearchScope.ToString();
                                    DisplayFoundVerses(true, true);
                                }
                            }
                        }
                        break;
                    case NumbersResultType.WordSets:
                        {
                            query.NumberScope = m_word_number_scope;
                            match_count = m_client.FindWordSets(query);
                            if (m_client.FoundWordSets != null)
                            {
                                if (m_client.FoundVerses != null)
                                {
                                    m_find_result_header = match_count + ((match_count == 1) ? " word set" : " word sets") + " in " + m_client.FoundVerses.Count + ((m_client.FoundVerses.Count == 1) ? " verse" : " verses") + " with " + text + " in " + m_client.SearchScope.ToString();
                                    DisplayFoundVerses(true, true);
                                }
                            }
                        }
                        break;
                    case NumbersResultType.Sentences:
                        {
                            query.NumberScope = NumberScope.Number;
                            match_count = m_client.FindSentences(query);
                            if (m_client.FoundSentences != null)
                            {
                                m_find_result_header = match_count + ((match_count == 1) ? " sentence" : " sentences") + " with " + text + " in " + m_client.SearchScope.ToString();
                                DisplayFoundVerses(true, true);
                            }
                        }
                        break;
                    case NumbersResultType.Verses:
                        {
                            query.NumberScope = m_verse_number_scope;
                            match_count = m_client.FindVerses(query);
                            if (m_client.FoundVerses != null)
                            {
                                m_find_result_header = match_count + ((match_count == 1) ? " verse" : " verses") + " with " + text + " in " + m_client.SearchScope.ToString();
                                DisplayFoundVerses(true, true);
                            }
                        }
                        break;
                    case NumbersResultType.VerseRanges:
                        {
                            query.NumberScope = m_verse_number_scope;
                            match_count = m_client.FindVerseRanges(query);
                            if (m_client.FoundVerseRanges != null)
                            {
                                m_find_result_header = match_count + ((match_count == 1) ? " verse range" : " verse ranges") + " with " + text + " in " + m_client.SearchScope.ToString();
                                DisplayFoundVerseRanges(true, true);
                            }
                        }
                        break;
                    case NumbersResultType.VerseSets:
                        {
                            query.NumberScope = m_verse_number_scope;
                            match_count = m_client.FindVerseSets(query);
                            if (m_client.FoundVerseSets != null)
                            {
                                m_find_result_header = match_count + ((match_count == 1) ? " verse set" : " verse sets") + " with " + text + " in " + m_client.SearchScope.ToString();
                                DisplayFoundVerseSets(true, true);
                            }
                        }
                        break;
                    case NumbersResultType.Chapters:
                        {
                            query.NumberScope = m_chapter_number_scope;
                            match_count = m_client.FindChapters(query);
                            if (m_client.FoundChapters != null)
                            {
                                m_find_result_header = match_count + ((match_count == 1) ? " chapter" : " chapters") + " with " + text + " in " + m_client.SearchScope.ToString();
                                DisplayFoundChapters(true, true);
                            }
                        }
                        break;
                    case NumbersResultType.ChapterRanges:
                        {
                            query.NumberScope = m_chapter_number_scope;
                            match_count = m_client.FindChapterRanges(query);
                            if (m_client.FoundChapterRanges != null)
                            {
                                m_find_result_header = match_count + ((match_count == 1) ? " chapter range" : " chapter ranges") + " with " + text + " in " + m_client.SearchScope.ToString();
                                DisplayFoundChapterRanges(true, true);
                            }
                        }
                        break;
                    case NumbersResultType.ChapterSets:
                        {
                            query.NumberScope = m_chapter_number_scope;
                            match_count = m_client.FindChapterSets(query);
                            if (m_client.FoundChapterSets != null)
                            {
                                m_find_result_header = match_count + ((match_count == 1) ? " chapter set" : " chapter sets") + " with " + text + " in " + m_client.SearchScope.ToString();
                                DisplayFoundChapterSets(true, true);
                            }
                        }
                        break;
                    default:
                        break;
                }
            }

            SearchResultTextBox.Focus();
            SearchResultTextBox.Refresh();
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Search By Similarity
    ///////////////////////////////////////////////////////////////////////////////
    private SimilaritySearchSource m_similarity_search_source = SimilaritySearchSource.CurrentVerse;
    private void FindBySimilarityCurrentVerseTypeLabel_Click(object sender, EventArgs e)
    {
        m_similarity_search_source = SimilaritySearchSource.CurrentVerse;
        FindBySimilarityPercentageTrackBar.Value = 73;
        FindBySimilarityControls_Enter(null, null);
    }
    private void FindBySimilarityAllVersesTypeLabel_Click(object sender, EventArgs e)
    {
        m_similarity_search_source = SimilaritySearchSource.AllVerses;
        FindBySimilarityPercentageTrackBar.Value = 100;
        FindBySimilarityControls_Enter(null, null);
    }
    private void FindBySimilarityRadioButton_CheckedChanged(object sender, EventArgs e)
    {
        //if (m_similarity_search_source == SimilaritySearchSource.CurrentVerse)
        //{
        //    FindBySimilarityButton_Click(null, null);
        //}
    }
    private void FindBySimilarityPercentageTrackBar_ValueChanged(object sender, EventArgs e)
    {
        FindBySimilarityButton.Text = FindBySimilarityPercentageTrackBar.Value.ToString() + "% Find";
        FindBySimilarityButton.Refresh();
        //if (m_similarity_search_source == SimilaritySearchSource.CurrentVerse)
        //{
        //    FindBySimilarityButton_Click(null, null);
        //}
    }
    private void FindBySimilarityControls_Enter(object sender, EventArgs e)
    {
        this.AcceptButton = FindBySimilarityButton;

        FindByTextButton.Enabled = false;
        FindBySimilarityButton.Enabled = true;
        FindByNumbersButton.Enabled = false;
        FindByProstrationTypeButton.Enabled = false;
        FindByFrequencyButton.Enabled = false;

        ToolTip.SetToolTip(ChaptersInspectLabel, "Inspect chapters");
        WordsListBoxLabel.Visible = false;
        WordsListBox.Visible = false;

        ResetFindByTextSearchBlockSizeLabels();
        ResetFindByTextSearchTypeLabels();
        ResetFindBySimilarityResultTypeLabels();
        ResetFindByNumbersResultTypeLabels();
        ResetFindByFrequencyResultTypeLabels();

        switch (m_similarity_search_source)
        {
            case SimilaritySearchSource.CurrentVerse:
                {
                    FindBySimilarityCurrentVerseTypeLabel.BackColor = Color.SteelBlue;
                    FindBySimilarityCurrentVerseTypeLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case SimilaritySearchSource.AllVerses:
                {
                    FindBySimilarityAllVersesTypeLabel.BackColor = Color.SteelBlue;
                    FindBySimilarityAllVersesTypeLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
        }
    }
    private void ResetFindBySimilarityResultTypeLabels()
    {
        FindBySimilarityCurrentVerseTypeLabel.BackColor = Color.DarkGray;
        FindBySimilarityCurrentVerseTypeLabel.BorderStyle = BorderStyle.None;
        FindBySimilarityAllVersesTypeLabel.BackColor = Color.DarkGray;
        FindBySimilarityAllVersesTypeLabel.BorderStyle = BorderStyle.None;
    }
    private void FindBySimilarityButton_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            FindBySimilarity();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void FindBySimilarity()
    {
        m_search_type = SearchType.Similarity;

        if (m_client != null)
        {
            ClearFindMatches();

            SimilarityMethod find_by_similarity_method = SimilarityMethod.SimilarText;
            if (FindBySimilarityTextRadioButton.Checked)
            {
                find_by_similarity_method = SimilarityMethod.SimilarText;
            }
            else if (FindBySimilarityWordsRadioButton.Checked)
            {
                find_by_similarity_method = SimilarityMethod.SimilarWords;
            }
            else if (FindBySimilarityFirstHalfRadioButton.Checked)
            {
                find_by_similarity_method = SimilarityMethod.SimilarFirstHalf;
            }
            else if (FindBySimilarityLastHalfRadioButton.Checked)
            {
                find_by_similarity_method = SimilarityMethod.SimilarLastHalf;
            }
            else if (FindBySimilarityFirstWordRadioButton.Checked)
            {
                find_by_similarity_method = SimilarityMethod.SimilarFirstWord;
            }
            else if (FindBySimilarityLastWordRadioButton.Checked)
            {
                find_by_similarity_method = SimilarityMethod.SimilarLastWord;
            }
            else
            {
                //
            }

            double similarity_percentage = (double)FindBySimilarityPercentageTrackBar.Value / 100.0D;

            string text = null;
            if (m_similarity_search_source == SimilaritySearchSource.CurrentVerse)
            {
                Verse verse = GetCurrentVerse();
                if (verse != null)
                {
                    if (verse.Chapter != null)
                    {
                        m_client.FindVerses(verse, find_by_similarity_method, similarity_percentage);
                        text = " to verse " + verse.Chapter.Name + " " + verse.NumberInChapter + " ";
                    }

                    if (m_client.FoundVerses != null)
                    {
                        int verse_count = m_client.FoundVerses.Count;
                        m_find_result_header = verse_count + ((verse_count == 1) ? " verse" : " verses") + " with " + find_by_similarity_method.ToString() + text + " in " + m_client.SearchScope.ToString();

                        DisplayFoundVerses(true, true);
                    }
                }
            }
            else if (m_similarity_search_source == SimilaritySearchSource.AllVerses)
            {
                m_client.FindVersess(find_by_similarity_method, similarity_percentage);
                text = null;

                if (m_client.FoundVerses != null)
                {
                    int verse_count = m_client.FoundVerses.Count;
                    m_find_result_header = verse_count + ((verse_count == 1) ? " verse" : " verses") + " with " + find_by_similarity_method.ToString() + text + " in " + m_client.SearchScope.ToString();

                    DisplayFoundVerseRanges(true, true);
                }
            }
            else
            {
                //
            }

            SearchResultTextBox.Focus();
            SearchResultTextBox.Refresh();
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Search By Prostration
    ///////////////////////////////////////////////////////////////////////////////
    private ProstrationType m_find_by_prostration_type = ProstrationType.None;
    private void FindByProstrationTypeControls_Enter(object sender, EventArgs e)
    {
        this.AcceptButton = FindByProstrationTypeButton;

        FindByTextButton.Enabled = false;
        FindBySimilarityButton.Enabled = false;
        FindByNumbersButton.Enabled = false;
        FindByProstrationTypeButton.Enabled = true;
        FindByFrequencyButton.Enabled = false;

        ToolTip.SetToolTip(ChaptersInspectLabel, "Inspect chapters");
        WordsListBoxLabel.Visible = false;
        WordsListBox.Visible = false;

        ResetFindByTextSearchBlockSizeLabels();
        ResetFindByTextSearchTypeLabels();
        ResetFindBySimilarityResultTypeLabels();
        ResetFindByNumbersResultTypeLabels();
        ResetFindByFrequencyResultTypeLabels();
    }
    private void FindByProstrationTypeRadioButton_CheckedChanged(object sender, EventArgs e)
    {
        //FindByProstration();
    }
    private void FindByProstrationTypeButton_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            FindByProstration();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void FindByProstration()
    {
        m_search_type = SearchType.Prostration;

        if (m_client != null)
        {
            ClearFindMatches();

            if (!FindByProstrationTypeObligatoryCheckBox.Checked && !FindByProstrationTypeRecommendedCheckBox.Checked)
            {
                m_find_by_prostration_type = ProstrationType.None;
            }
            else if (FindByProstrationTypeObligatoryCheckBox.Checked && !FindByProstrationTypeRecommendedCheckBox.Checked)
            {
                m_find_by_prostration_type = ProstrationType.Obligatory;
            }
            else if (!FindByProstrationTypeObligatoryCheckBox.Checked && FindByProstrationTypeRecommendedCheckBox.Checked)
            {
                m_find_by_prostration_type = ProstrationType.Recommended;
            }
            else if (FindByProstrationTypeObligatoryCheckBox.Checked && FindByProstrationTypeRecommendedCheckBox.Checked)
            {
                m_find_by_prostration_type = ProstrationType.Obligatory | ProstrationType.Recommended;
            }

            m_client.FindVerses(m_find_by_prostration_type);
            if (m_client.FoundVerses != null)
            {
                int verse_count = m_client.FoundVerses.Count;
                m_find_result_header = verse_count + ((verse_count == 1) ? " verse" : " verses") + " with " + m_find_by_prostration_type.ToString() + " prostrations" + " in " + m_client.SearchScope.ToString();
                DisplayFoundVerses(true, true);
            }

            SearchResultTextBox.Focus();
            SearchResultTextBox.Refresh();
        }
    }
    private void FindByProstrationStatisticsLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Book.Verses != null)
                {
                    List<Verse> no_prostration_verses = new List<Verse>();
                    List<Verse> obligatory_prostration_verses = new List<Verse>();
                    List<Verse> recommended_prostration_verses = new List<Verse>();
                    List<Verse> all_prostration_verses = new List<Verse>();
                    foreach (Verse verse in m_client.Book.Verses)
                    {
                        if (verse.ProstrationType == ProstrationType.None)
                        {
                            no_prostration_verses.Add(verse);
                        }
                        else if (verse.ProstrationType == ProstrationType.Obligatory)
                        {
                            all_prostration_verses.Add(verse);
                            obligatory_prostration_verses.Add(verse);
                        }
                        else if (verse.ProstrationType == ProstrationType.Recommended)
                        {
                            all_prostration_verses.Add(verse);
                            recommended_prostration_verses.Add(verse);
                        }
                        else
                        {
                            // do nothing
                        }
                    }

                    if (no_prostration_verses.Count > 0)
                    {
                        string result = BuildVersesStatistics(m_client, no_prostration_verses);
                        string filename = "Prostrations" + Globals.OUTPUT_FILE_EXT;
                        if (Directory.Exists(Globals.STATISTICS_FOLDER))
                        {
                            string path = Globals.STATISTICS_FOLDER + "/" + filename;
                            FileHelper.SaveText(path, result);
                            FileHelper.DisplayFile(path);
                        }
                    }

                    if (recommended_prostration_verses.Count > 0)
                    {
                        string result = BuildVersesStatistics(m_client, recommended_prostration_verses);
                        string filename = "RecommendedProstrations" + Globals.OUTPUT_FILE_EXT;
                        if (Directory.Exists(Globals.STATISTICS_FOLDER))
                        {
                            string path = Globals.STATISTICS_FOLDER + "/" + filename;
                            FileHelper.SaveText(path, result);
                            FileHelper.DisplayFile(path);
                        }
                    }

                    if (obligatory_prostration_verses.Count > 0)
                    {
                        string result = BuildVersesStatistics(m_client, obligatory_prostration_verses);
                        string filename = "ObligatoryProstrations" + Globals.OUTPUT_FILE_EXT;
                        if (Directory.Exists(Globals.STATISTICS_FOLDER))
                        {
                            string path = Globals.STATISTICS_FOLDER + "/" + filename;
                            FileHelper.SaveText(path, result);
                            FileHelper.DisplayFile(path);
                        }
                    }

                    if (all_prostration_verses.Count > 0)
                    {
                        string result = BuildVersesStatistics(m_client, all_prostration_verses);
                        string filename = "Prostrations" + Globals.OUTPUT_FILE_EXT;
                        if (Directory.Exists(Globals.STATISTICS_FOLDER))
                        {
                            string path = Globals.STATISTICS_FOLDER + "/" + filename;
                            FileHelper.SaveText(path, result);
                            FileHelper.DisplayFile(path);
                        }
                    }
                }
            }
        }
    }
    private string BuildVersesStatistics(Client client, List<Verse> verses)
    {
        if (client == null) return null;
        if (verses == null) return null;

        StringBuilder str = new StringBuilder();

        str.Append("V" + "\t" + "W" + "\t" + "L" + "\t" + "Page" + "\t" + "Chapter" + "\t" + "Verse" + "\t" + "Words" + "\t" + "Letters" + "\t" + "Unique" + "\t" + "Value" + "\t" + "Factors" + "\t" + "P" + "\t" + "AP" + "\t" + "XP" + "\t" + "C" + "\t" + "AC" + "\t" + "XC" + "\t");

        NumerologySystem numerology_system = client.NumerologySystem;
        if (numerology_system != null)
        {
            foreach (char key in numerology_system.LetterValues.Keys)
            {
                str.Append(key.ToString() + "\t");
            }
            str.Append("Text");
            str.Append("\r\n");

            int count = 0;
            foreach (Verse verse in verses)
            {
                if (verse != null)
                {
                    if (verse.Words.Count > 0)
                    {
                        if (verse.Words[0].Letters.Count > 0)
                        {
                            count++;
                            str.Append(verse.Number.ToString() + "\t");
                            str.Append(verse.Words[0].Number.ToString() + "\t");
                            str.Append(verse.Words[0].Letters[0].Number.ToString() + "\t");
                            str.Append(verse.Page.Number.ToString() + "\t");
                            str.Append(verse.Chapter.SortedNumber.ToString() + "\t");
                            str.Append(verse.NumberInChapter.ToString() + "\t");
                            str.Append(verse.Words.Count.ToString() + "\t");
                            str.Append(verse.LetterCount.ToString() + "\t");
                            str.Append(verse.UniqueLetters.Count.ToString() + "\t");

                            long value = client.CalculateValue(verse);
                            str.Append(value.ToString() + "\t");
                            str.Append(Numbers.FactorizeToString(value) + "\t");

                            int p = Numbers.PrimeIndexOf(value) + 1;
                            int ap = Numbers.AdditivePrimeIndexOf(value) + 1;
                            int xp = Numbers.NonAdditivePrimeIndexOf(value) + 1;
                            int c = Numbers.CompositeIndexOf(value) + 1;
                            int ac = Numbers.AdditiveCompositeIndexOf(value) + 1;
                            int xc = Numbers.NonAdditiveCompositeIndexOf(value) + 1;
                            str.Append((p == 0 ? "-" : p.ToString()) + "\t"
                                           + (ap == 0 ? "-" : ap.ToString()) + "\t"
                                           + (xp == 0 ? "-" : xp.ToString()) + "\t"
                                           + (c == 0 ? "-" : c.ToString()) + "\t"
                                           + (ac == 0 ? "-" : ac.ToString()) + "\t"
                                           + (xc == 0 ? "-" : xc.ToString())
                                         );
                            str.Append("\t");

                            foreach (char character in numerology_system.LetterValues.Keys)
                            {
                                if (Constants.INDIAN_DIGITS.Contains(character)) continue;
                                if (Constants.STOPMARKS.Contains(character)) continue;
                                if (Constants.QURANMARKS.Contains(character)) continue;
                                if (Constants.OPEN_BRACKET[0] == character) continue;
                                if (Constants.CLOSE_BRACKET[0] == character) continue;
                                str.Append(verse.GetLetterFrequency(character).ToString() + "\t");
                            }

                            str.Append(verse.Text);

                            str.Append("\r\n");
                        }
                    }
                }
            }
            if (str.Length > 2)
            {
                str.Remove(str.Length - 2, 2);
            }
        }
        return str.ToString();
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Search By Letter Frequency Sum
    ///////////////////////////////////////////////////////////////////////////////
    private FrequencyResultType m_frequency_result_type = FrequencyResultType.Chapters;
    private void FindByFrequencyResultTypeWordsLabel_Click(object sender, EventArgs e)
    {
        ResetFindByFrequencyResultTypeLabels();
        m_frequency_result_type = FrequencyResultType.Words;
        FindByFrequencyControls_Enter(null, null);
    }
    private void FindByFrequencyResultTypeSentencesLabel_Click(object sender, EventArgs e)
    {
        ResetFindByFrequencyResultTypeLabels();
        m_frequency_result_type = FrequencyResultType.Sentences;
        FindByFrequencyControls_Enter(null, null);
    }
    private void FindByFrequencyResultTypeVersesLabel_Click(object sender, EventArgs e)
    {
        ResetFindByFrequencyResultTypeLabels();
        m_frequency_result_type = FrequencyResultType.Verses;
        FindByFrequencyControls_Enter(null, null);
    }
    private void FindByFrequencyResultTypeChaptersLabel_Click(object sender, EventArgs e)
    {
        ResetFindByFrequencyResultTypeLabels();
        m_frequency_result_type = FrequencyResultType.Chapters;
        FindByFrequencyControls_Enter(null, null);
    }
    private FrequencySearchType m_frequency_search_type = FrequencySearchType.DuplicateLetters;
    private void FindByFrequencySearchTypeDuplicateLettersLabel_Click(object sender, EventArgs e)
    {
        ResetFindByFrequencyResultTypeLabels();
        m_frequency_search_type = FrequencySearchType.DuplicateLetters;
        FindByFrequencyControls_Enter(null, null);

        BuildLetterFrequencies();
        DisplayLetterFrequencies();
    }
    private void FindByFrequencySearchTypeUniqueLettersLabel_Click(object sender, EventArgs e)
    {
        ResetFindByFrequencyResultTypeLabels();
        m_frequency_search_type = FrequencySearchType.UniqueLetters;
        FindByFrequencyControls_Enter(null, null);

        BuildLetterFrequencies();
        DisplayLetterFrequencies();
    }

    private string m_phrase_text = "";
    private bool m_find_by_phrase = false;
    private void FindByFrequencyPhraseCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_find_by_phrase = !m_find_by_phrase;

        ResetFindByFrequencyResultTypeLabels();
        m_frequency_result_type = (m_find_by_phrase) ? FrequencyResultType.Sentences : FrequencyResultType.Chapters;
        FindByFrequencyControls_Enter(null, null);

        int shift;
        if (m_dpi_x == 120.0F)
        {
            shift = 40;
        }
        else
        {
            shift = 46;
        }
        if (m_find_by_phrase)
        {
            for (int i = 0; i < 3; i++) FindByFrequencyPhraseTextBox.TextChanged -= new EventHandler(FindByFrequencyPhraseTextBox_TextChanged);
            FindByFrequencyPhraseTextBox.Text = m_phrase_text;
            FindByFrequencyPhraseTextBox.TextChanged += new EventHandler(FindByFrequencyPhraseTextBox_TextChanged);

            FindByFrequencySumLabel.Top += shift;
            FindByFrequencySumComparisonOperatorLabel.Top += shift;
            FindByFrequencySumNumericUpDown.Top += shift;
            FindByFrequencySumNumberTypeLabel.Top += shift;
            LetterFrequencyListView.Top += shift;
            LetterFrequencyListView.Height -= shift;

            FindByFrequencySumLabel.BackColor = Color.Pink;
            LetterFrequencyListView.BackColor = Color.Pink;
            LetterFrequencyListView.FullRowSelect = false;
            LetterFrequencyPanel.BackColor = Color.Pink;
            LetterFrequencyPanel.Refresh();
        }
        else
        {
            for (int i = 0; i < 3; i++) FindByFrequencyPhraseTextBox.TextChanged -= new EventHandler(FindByFrequencyPhraseTextBox_TextChanged);
            FindByFrequencyPhraseTextBox.Text = "";
            FindByFrequencyPhraseTextBox.TextChanged += new EventHandler(FindByFrequencyPhraseTextBox_TextChanged);

            FindByFrequencySumLabel.Top -= shift;
            FindByFrequencySumComparisonOperatorLabel.Top -= shift;
            FindByFrequencySumNumericUpDown.Top -= shift;
            FindByFrequencySumNumberTypeLabel.Top -= shift;
            LetterFrequencyListView.Top -= shift;
            LetterFrequencyListView.Height += shift;

            FindByFrequencySumLabel.BackColor = Color.LightSteelBlue;
            LetterFrequencyListView.BackColor = Color.LightSteelBlue;
            LetterFrequencyListView.FullRowSelect = true;
            LetterFrequencyPanel.BackColor = Color.LightSteelBlue;
            LetterFrequencyPanel.Refresh();
        }

        FindByFrequencyLinkLabel.Visible = m_find_by_phrase;
        UpdateFindByFrequencyButtonToolTip();
        FindByFrequencyButton.Enabled = ((m_find_by_phrase) && (m_phrase_text.Length > 0))
                                        ||
                                        ((!m_find_by_phrase) && (LetterFrequencyListView.SelectedIndices.Count > 0));

        RebuildLetterFrequencies();
    }
    private void ResetFindByFrequencyResultTypeLabels()
    {
        FindByFrequencyResultTypeWordsLabel.BackColor = Color.DarkGray;
        FindByFrequencyResultTypeWordsLabel.BorderStyle = BorderStyle.None;

        FindByFrequencyResultTypeSentencesLabel.BackColor = Color.DarkGray;
        FindByFrequencyResultTypeSentencesLabel.BorderStyle = BorderStyle.None;

        FindByFrequencyResultTypeVersesLabel.BackColor = Color.DarkGray;
        FindByFrequencyResultTypeVersesLabel.BorderStyle = BorderStyle.None;

        FindByFrequencyResultTypeChaptersLabel.BackColor = Color.DarkGray;
        FindByFrequencyResultTypeChaptersLabel.BorderStyle = BorderStyle.None;

        FindByFrequencySearchTypeDuplicateLettersLabel.BackColor = Color.DarkGray;
        FindByFrequencySearchTypeDuplicateLettersLabel.BorderStyle = BorderStyle.None;

        FindByFrequencySearchTypeUniqueLettersLabel.BackColor = Color.DarkGray;
        FindByFrequencySearchTypeUniqueLettersLabel.BorderStyle = BorderStyle.None;
    }
    private void FindByFrequencyControl_EnabledChanged(object sender, EventArgs e)
    {
        Control control = sender as Control;
        if (control != null)
        {
            control.BackColor = (control.Enabled) ? SystemColors.Window : Color.LightGray;
        }
    }
    private void FindByFrequencyComparisonOperatorLabel_Click(object sender, EventArgs e)
    {
        UpdateSumNumberTypeLabelTag();

        Control control = sender as Control;
        if (control != null)
        {
            if (UpdateComparisonOperator(control))
            {
                if (control == FindByFrequencySumComparisonOperatorLabel)
                {
                    if (FindByFrequencySumComparisonOperatorLabel.Text == "÷")
                    {
                        int remainder = 0;
                        FindByFrequencySumNumberTypeLabel.Tag = remainder;
                        FindByFrequencySumNumberTypeLabel.Text = remainder.ToString();
                        FindByFrequencySumNumberTypeLabel.ForeColor = Color.Black;
                        FindByFrequencySumNumberTypeLabel.Enabled = true;
                        ToolTip.SetToolTip(FindByFrequencySumNumberTypeLabel, "remainder");
                    }
                    else
                    {
                        FindByFrequencySumNumberTypeLabel.Text = "";
                        ToolTip.SetToolTip(FindByFrequencySumNumberTypeLabel, null);
                    }
                }

                FindByFrequencyControls_Enter(null, null);
            }
        }
    }
    private void FindByFrequencyNumberTypeLabel_Click(object sender, EventArgs e)
    {
        UpdateSumNumberTypeLabelTag();

        Control control = sender as Control;
        if (control != null)
        {
            if (UpdateNumberType(control))
            {
                if (control == FindByFrequencySumNumberTypeLabel)
                {
                    FindByFrequencySumComparisonOperatorLabel.Enabled = (control.Text.Length == 0);
                    FindByFrequencySumNumericUpDown.Enabled = (control.Text == "");
                    if (control.Text.Length > 0)
                    {
                        FindByFrequencySumComparisonOperatorLabel.Text = "=";
                        FindByFrequencySumNumericUpDown.Value = 0;
                    }
                    else
                    {
                        FindByFrequencySumNumericUpDown.Focus();
                    }
                }
                else
                {
                    // do nothing
                }

                FindByFrequencyControls_Enter(null, null);
            }
        }
    }
    private void FindByFrequencyControls_Enter(object sender, EventArgs e)
    {
        this.AcceptButton = FindByFrequencyButton;

        FindByTextButton.Enabled = false;
        FindBySimilarityButton.Enabled = false;
        FindByNumbersButton.Enabled = false;
        FindByProstrationTypeButton.Enabled = false;
        FindByFrequencyButton.Enabled = ((m_find_by_phrase) && (m_phrase_text.Length > 0))
                                        ||
                                        ((!m_find_by_phrase) && (LetterFrequencyListView.SelectedIndices.Count > 0));

        ToolTip.SetToolTip(ChaptersInspectLabel, "Inspect chapters");
        WordsListBoxLabel.Visible = false;
        WordsListBox.Visible = false;

        ResetFindByTextSearchBlockSizeLabels();
        ResetFindByTextSearchTypeLabels();
        ResetFindBySimilarityResultTypeLabels();
        ResetFindByNumbersResultTypeLabels();
        ResetFindByFrequencyResultTypeLabels();

        switch (m_frequency_result_type)
        {
            case FrequencyResultType.Words:
                {
                    FindByFrequencyResultTypeWordsLabel.BackColor = Color.SteelBlue;
                    FindByFrequencyResultTypeWordsLabel.BorderStyle = BorderStyle.Fixed3D;
                    ToolTip.SetToolTip(FindByFrequencyButton, "Find words with selected letters\r\nwith required letter frequency sum");
                    ToolTip.SetToolTip(FindByFrequencyPhraseTextBox, "phrase to find its letter frequency sum in words");
                }
                break;
            case FrequencyResultType.Sentences:
                {
                    FindByFrequencyResultTypeSentencesLabel.BackColor = Color.SteelBlue;
                    FindByFrequencyResultTypeSentencesLabel.BorderStyle = BorderStyle.Fixed3D;
                    ToolTip.SetToolTip(FindByFrequencyButton, "Find sentence with selected letters\r\nwith required letter frequency sum");
                    ToolTip.SetToolTip(FindByFrequencyPhraseTextBox, "phrase to find its letter frequency sum in sentences");
                }
                break;
            case FrequencyResultType.Verses:
                {
                    FindByFrequencyResultTypeVersesLabel.BackColor = Color.SteelBlue;
                    FindByFrequencyResultTypeVersesLabel.BorderStyle = BorderStyle.Fixed3D;
                    ToolTip.SetToolTip(FindByFrequencyButton, "Find verses with selected letters\r\nwith required letter frequency sum");
                    ToolTip.SetToolTip(FindByFrequencyPhraseTextBox, "phrase to find its letter frequency sum in verses");
                }
                break;
            case FrequencyResultType.Chapters:
                {
                    FindByFrequencyResultTypeChaptersLabel.BackColor = Color.SteelBlue;
                    FindByFrequencyResultTypeChaptersLabel.BorderStyle = BorderStyle.Fixed3D;
                    ToolTip.SetToolTip(FindByFrequencyButton, "Find chapters with selected letters\r\nwith required letter frequency sum");
                    ToolTip.SetToolTip(FindByFrequencyPhraseTextBox, "phrase to find its letter frequency sum in chapters");
                }
                break;
        }

        switch (m_frequency_search_type)
        {
            case FrequencySearchType.DuplicateLetters:
                {
                    FindByFrequencySearchTypeDuplicateLettersLabel.BackColor = Color.PaleVioletRed;
                    FindByFrequencySearchTypeDuplicateLettersLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
            case FrequencySearchType.UniqueLetters:
                {
                    FindByFrequencySearchTypeUniqueLettersLabel.BackColor = Color.PaleVioletRed;
                    FindByFrequencySearchTypeUniqueLettersLabel.BorderStyle = BorderStyle.Fixed3D;
                }
                break;
        }
    }
    private void FindByFrequencySumNumericUpDown_Leave(object sender, EventArgs e)
    {
        NumericUpDown control = sender as NumericUpDown;
        if (control != null)
        {
            if (String.IsNullOrEmpty(control.Text))
            {
                control.Value = 0;
                control.Refresh();
            }
        }

        UpdateSumNumberTypeLabelTag();
    }
    private void FindByFrequencyPhraseLabel_Click(object sender, EventArgs e)
    {
        LinkLabel_Click(sender, null);
    }
    private void FindByFrequencyPhraseTextBox_TextChanged(object sender, EventArgs e)
    {
        m_phrase_text = FindByFrequencyPhraseTextBox.Text;
        FindByFrequencyButton.Enabled = ((m_find_by_phrase) && (m_phrase_text.Length > 0))
                                        ||
                                        ((!m_find_by_phrase) && (LetterFrequencyListView.SelectedIndices.Count > 0));

        BuildLetterFrequencies();
        DisplayLetterFrequencies();
    }

    // simulate SelectionChanged
    private string m_current_phrase = "";
    private void RebuildLetterFrequencies()
    {
        if (FindByFrequencyPhraseTextBox.SelectionLength == 0)
        {
            m_current_phrase = FindByFrequencyPhraseTextBox.Text;
        }

        BuildLetterFrequencies();
        DisplayLetterFrequencies();
    }
    private void FindByFrequencyPhraseTextBox_KeyUp(object sender, KeyEventArgs e)
    {
        RebuildLetterFrequencies();
    }
    private void FindByFrequencyPhraseTextBox_MouseMove(object sender, MouseEventArgs e)
    {
        if (MouseButtons == MouseButtons.Left)
        {
            RebuildLetterFrequencies();
        }
    }
    private void FindByFrequencyPhraseTextBox_MouseUp(object sender, MouseEventArgs e)
    {
        RebuildLetterFrequencies();
    }
    private void FindByFrequencySumNumericUpDown_ValueChanged(object sender, EventArgs e)
    {
        UpdateSumNumberTypeLabelTag();

        //// don't auto-find as user may not have finished setting all parameters yet
        //if (sender == FindByFrequencySumNumericUpDown)
        //{
        //    FindByFrequencySum();
        //}
    }
    private void UpdateSumNumberTypeLabelTag()
    {
        FindByFrequencySumNumberTypeLabel.Tag = (int)FindByFrequencySumNumericUpDown.Value;

        int number;
        if (int.TryParse(FindByFrequencySumNumberTypeLabel.Text, out number))
        {
            if (number >= (int)FindByFrequencySumNumericUpDown.Value)
            {
                number = (int)FindByFrequencySumNumericUpDown.Value - 1;
                if (number < 0) number = 0;
                FindByFrequencySumNumberTypeLabel.Text = number.ToString();
            }
        }
    }
    private void UpdateFindByFrequencyButtonToolTip()
    {
        string tooltip = ToolTip.GetToolTip(FindByFrequencyButton);
        if (tooltip != null)
        {
            if (m_find_by_phrase)
            {
                tooltip = tooltip.Replace("selected", "phrase");
            }
            else
            {
                tooltip = tooltip.Replace("phrase", "selected");
            }
        }
        ToolTip.SetToolTip(FindByFrequencyButton, tooltip);
    }
    private void FindByFrequencyButton_EnabledChanged(object sender, EventArgs e)
    {
        UpdateFindByFrequencyButtonToolTip();
    }
    private void FindByFrequencyButton_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            FindByFrequencySum();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void FindByFrequencySum()
    {
        m_search_type = SearchType.Frequency;

        if (m_client != null)
        {
            ClearFindMatches();

            // 1. number types
            string sum_number_type_symbol = FindByFrequencySumNumberTypeLabel.Enabled ? FindByFrequencySumNumberTypeLabel.Text : "";
            NumberType sum_number_type =
                (sum_number_type_symbol == "P") ? NumberType.Prime :
                (sum_number_type_symbol == "AP") ? NumberType.AdditivePrime :
                (sum_number_type_symbol == "XP") ? NumberType.NonAdditivePrime :
                (sum_number_type_symbol == "C") ? NumberType.Composite :
                (sum_number_type_symbol == "AC") ? NumberType.AdditiveComposite :
                (sum_number_type_symbol == "XC") ? NumberType.NonAdditiveComposite :
                (sum_number_type_symbol == "O") ? NumberType.Odd :
                (sum_number_type_symbol == "E") ? NumberType.Even :
                (sum_number_type_symbol == "^2") ? NumberType.Square :
                (sum_number_type_symbol == "^3") ? NumberType.Cubic :
                (sum_number_type_symbol == "^4") ? NumberType.Quartic :
                (sum_number_type_symbol == "^5") ? NumberType.Quintic :
                (sum_number_type_symbol == "^6") ? NumberType.Sextic :
                (sum_number_type_symbol == "^7") ? NumberType.Septic :
                (sum_number_type_symbol == "") ? NumberType.None :
                                             NumberType.Natural;

            // 2. numbers
            int sum = FindByFrequencySumNumericUpDown.Enabled ? (int)FindByFrequencySumNumericUpDown.Value : 0;

            // 3. comparison operators = ≠ < ≤ > ≥ ÷ !÷ Ʃ
            string sum_comparison_operator_symbol = FindByFrequencySumComparisonOperatorLabel.Text;
            ComparisonOperator sum_comparison_operator =
                (sum_comparison_operator_symbol == "=") ? ComparisonOperator.Equal :
                (sum_comparison_operator_symbol == "≠") ? ComparisonOperator.NotEqual :
                (sum_comparison_operator_symbol == "<") ? ComparisonOperator.LessThan :
                (sum_comparison_operator_symbol == "≤") ? ComparisonOperator.LessOrEqual :
                (sum_comparison_operator_symbol == ">") ? ComparisonOperator.GreaterThan :
                (sum_comparison_operator_symbol == "≥") ? ComparisonOperator.GreaterOrEqual :
                (sum_comparison_operator_symbol == "÷") ? ComparisonOperator.DivisibleBy :
                (sum_comparison_operator_symbol == "!÷") ? ComparisonOperator.IndivisibleBy :
                (sum_comparison_operator_symbol == "Ʃ") ? ComparisonOperator.EqualSum :
                                                          ComparisonOperator.Reserved;

            // 4. remainders for % comparison operator
            int sum_remainder = -1;
            if (sum_comparison_operator == ComparisonOperator.DivisibleBy)
            {
                try
                {
                    sum_remainder = int.Parse(FindByFrequencySumNumberTypeLabel.Text);
                }
                catch
                {
                    // keep as -1
                }
            }

            string phrase = "";
            if (FindByFrequencyPhraseTextBox.Text.Length > 0)
            {
                if (FindByFrequencyPhraseTextBox.SelectionLength > 0)
                {
                    phrase = FindByFrequencyPhraseTextBox.SelectedText.Trim();
                }
                else
                {
                    phrase = FindByFrequencyPhraseTextBox.Text.Trim();
                }
            }
            else
            {
                if (LetterFrequencyListView.SelectedIndices.Count > 0)
                {
                    foreach (ListViewItem item in LetterFrequencyListView.SelectedItems)
                    {
                        phrase += item.SubItems[1].Text;
                    }
                }
            }

            if (!String.IsNullOrEmpty(phrase))
            {
                if (phrase.IsArabic())
                {
                    string text = null;
                    text += phrase + " letters" + sum_comparison_operator_symbol + ((sum > 0) ? sum.ToString() : ((sum_number_type != NumberType.None) ? FindByFrequencySumNumberTypeLabel.Text : "*"))
                         + ((m_frequency_search_type == FrequencySearchType.DuplicateLetters) ? " with " : "without ") + "duplicates";

                    switch (m_frequency_result_type)
                    {
                        case FrequencyResultType.Words:
                            {
                                int match_count = m_client.FindWords(phrase, sum, sum_number_type, sum_comparison_operator, sum_remainder, m_frequency_search_type);
                                if (m_client.FoundWords != null)
                                {
                                    m_find_result_header = match_count + ((match_count == 1) ? " word" : " words") + " with " + text + " in " + m_client.SearchScope.ToString();
                                    DisplayFoundVerses(true, true);
                                }
                            }
                            break;
                        case FrequencyResultType.Sentences:
                            {
                                int match_count = m_client.FindSentences(phrase, sum, sum_number_type, sum_comparison_operator, sum_remainder, m_frequency_search_type);
                                if (m_client.FoundSentences != null)
                                {
                                    m_find_result_header = match_count + ((match_count == 1) ? " sentence" : " sentences") + " with " + text + " in " + m_client.SearchScope.ToString();
                                    DisplayFoundVerses(true, true);
                                }
                            }
                            break;
                        case FrequencyResultType.Verses:
                            {
                                int match_count = m_client.FindVerses(phrase, sum, sum_number_type, sum_comparison_operator, sum_remainder, m_frequency_search_type);
                                if (m_client.FoundVerses != null)
                                {
                                    m_find_result_header = match_count + ((match_count == 1) ? " verse" : " verses") + " with " + text + " in " + m_client.SearchScope.ToString();
                                    DisplayFoundVerses(true, true);
                                }
                            }
                            break;
                        case FrequencyResultType.Chapters:
                            {
                                int match_count = m_client.FindChapters(phrase, sum, sum_number_type, sum_comparison_operator, sum_remainder, m_frequency_search_type);
                                if (m_client.FoundChapters != null)
                                {
                                    m_find_result_header = match_count + ((match_count == 1) ? " chapter" : " chapters") + " with " + text + " in " + m_client.SearchScope.ToString();
                                    DisplayFoundChapters(true, true);
                                }
                            }
                            break;
                    }
                }
            }

            SearchResultTextBox.Focus();
            SearchResultTextBox.Refresh();
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Display Search Results
    ///////////////////////////////////////////////////////////////////////////////
    private struct FindMatch
    {
        public int Start;
        public int Length;
    }
    // F3 and Shift+F3 Goto next/previous matches
    private List<FindMatch> m_find_matches = null;
    private void BuildFindMatch(int start, int length)
    {
        // build text_selections list for F3 and Shift+F3
        if (m_find_matches != null)
        {
            FindMatch find_match = new FindMatch();
            find_match.Start = start;
            find_match.Length = length;
            m_find_matches.Add(find_match);
        }
    }
    private int m_find_match_index = -1;
    private void GotoPreviousFindMatch()
    {
        if (m_find_matches != null)
        {
            m_find_match_index = -1;
            for (int i = 0; i < m_find_matches.Count; i++)
            {
                if (m_find_matches[i].Start > SearchResultTextBox.SelectionStart)
                {
                    m_find_match_index = i - 1;
                    break;
                }
            }
        }
    }
    private void GotoNextFindMatch()
    {
        if (m_find_matches != null)
        {
            m_find_match_index = m_find_matches.Count;
            for (int i = m_find_matches.Count - 1; i >= 0; i--)
            {
                if (m_find_matches[i].Start < SearchResultTextBox.SelectionStart)
                {
                    m_find_match_index = i + 1;
                    break;
                }
            }
        }
    }
    private void SelectNextFindMatch()
    {
        if (m_found_verses_displayed)
        {
            if (m_find_matches != null)
            {
                if (m_find_matches.Count > 0)
                {
                    // find the index prior to the current cursor postion
                    GotoPreviousFindMatch();
                    m_find_match_index++;

                    // round robin
                    if (m_find_match_index == m_find_matches.Count)
                    {
                        m_find_match_index = 0;
                    }

                    // find next match
                    if ((m_find_match_index >= 0) && (m_find_match_index < m_find_matches.Count))
                    {
                        int start = m_find_matches[m_find_match_index].Start;
                        int length = m_find_matches[m_find_match_index].Length;
                        if ((start >= 0) && (start < SearchResultTextBox.Text.Length))
                        {
                            SearchResultTextBox.Select(start, length);
                            SearchResultTextBox.SelectionColor = Color.Red;
                        }
                    }
                }
            }
        }
        UpdateFindMatchCaption();
    }
    private void SelectPreviousFindMatch()
    {
        if (m_found_verses_displayed)
        {
            if (m_find_matches != null)
            {
                if (m_find_matches.Count > 0)
                {
                    // find the index after the current cursor postion
                    GotoNextFindMatch();
                    m_find_match_index--;

                    // round robin
                    if (m_find_match_index < 0)
                    {
                        m_find_match_index = m_find_matches.Count - 1;
                    }

                    // find previous match
                    if ((m_find_match_index >= 0) && (m_find_match_index < m_find_matches.Count))
                    {
                        int start = m_find_matches[m_find_match_index].Start;
                        int length = m_find_matches[m_find_match_index].Length;
                        if ((start >= 0) && (start < SearchResultTextBox.Text.Length))
                        {
                            SearchResultTextBox.Select(start, length);
                            SearchResultTextBox.SelectionColor = Color.Red;
                        }
                    }
                }
            }
        }
        UpdateFindMatchCaption();
    }
    private void UpdateFindMatchCaption()
    {
        string caption = this.Text;
        int pos = caption.IndexOf(CAPTION_SEPARATOR);
        if (pos > -1)
        {
            caption = caption.Substring(0, pos);
        }

        if (m_found_verses_displayed)
        {
            if (m_find_matches != null)
            {
                caption += CAPTION_SEPARATOR + " Match " + ((m_find_match_index + 1) + "/" + m_find_matches.Count);
            }
        }
        else
        {
            //caption += CAPTION_SEPARATOR;
        }

        this.Text = caption;
    }

    private string m_find_result_header = null;
    private void UpdateHeaderLabel()
    {
        if (m_client != null)
        {
            if (m_found_verses_displayed)
            {
                if (m_find_result_header != null)
                {
                    string[] parts = m_find_result_header.Split();
                    if (parts.Length > 0)
                    {
                        int count = 0;
                        if (int.TryParse(parts[0], out count))
                        {
                            HeaderLabel.ForeColor = GetNumberTypeColor(count);
                            HeaderLabel.Text = m_find_result_header;
                            HeaderLabel.Refresh();
                        }
                        else
                        {
                            HeaderLabel.ForeColor = GetNumberTypeColor(0);
                            HeaderLabel.Text = "";
                            HeaderLabel.Refresh();
                        }
                    }
                    else
                    {
                        HeaderLabel.ForeColor = GetNumberTypeColor(0);
                        HeaderLabel.Text = "";
                        HeaderLabel.Refresh();
                    }
                }
                else
                {
                    HeaderLabel.ForeColor = GetNumberTypeColor(0);
                    HeaderLabel.Text = "";
                    HeaderLabel.Refresh();
                }
            }
            else
            {
                HeaderLabel.ForeColor = SystemColors.WindowText;
                if (m_client.Selection != null)
                {
                    if (m_client.Selection.Verses != null)
                    {
                        if (m_client.Selection.Verses.Count > 0)
                        {
                            Verse verse = GetCurrentVerse();
                            if (verse != null)
                            {
                                if (verse.Chapter != null)
                                {
                                    string chapter_name_text = " " + verse.Chapter.TransliteratedName + " / " + verse.Chapter.EnglishName + " " + verse.Chapter.SortedNumber;
                                    HeaderLabel.Text = verse.Chapter.Name + " "
                                          + "   ءاية " + verse.NumberInChapter
                                        //+ "   منزل " + ((verse.Station != null) ? verse.Station.Number : -1)
                                        //+ "   جزء " + ((verse.Part != null) ? verse.Part.Number : -1)
                                        //+ "   حزب " + ((verse.Group != null) ? verse.Group.Number : -1)
                                        //+ "   نصف " + ((verse.Half != null) ? verse.Half.Number : -1)
                                        //+ "   ربع " + ((verse.Quarter != null) ? verse.Quarter.Number : -1)
                                        //+ "   ركوع " + ((verse.Bowing != null) ? verse.Bowing.Number : -1)
                                        //+ "   صفحة " + ((verse.Page != null) ? verse.Page.Number : -1)
                                          + chapter_name_text;
                                    HeaderLabel.Refresh();
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    private RichTextBoxEx m_active_textbox = null;
    private bool m_found_verses_displayed = false;
    private void SwitchToMainTextBox()
    {
        if (m_active_textbox != null)
        {
            if (m_found_verses_displayed)
            {
                m_found_verses_displayed = false;
                PopulateChaptersListBox();
            }

            // in all cases
            SearchResultTextBox.Visible = false;
            MainTextBox.Visible = true;
            m_active_textbox = MainTextBox;

            UpdateWordWrapLabel(m_active_textbox.WordWrap);
            ValuesSequenceTextBox.WordWrap = m_active_textbox.WordWrap;
            CVWLSequenceTextBox.WordWrap = m_active_textbox.WordWrap;
            DNASequenceTextBox.WordWrap = m_active_textbox.WordWrap;

            DisplayChapterRevelationInfo();

            GoldenRatioScopeLabel.Visible = true;
            GoldenRatioTypeLabel.Visible = true;
            GoldenRatioOrderLabel.Visible = true;
            GoldenRatioScopeLabel.Refresh();
            GoldenRatioOrderLabel.Refresh();

            this.Text = Application.ProductName + " | " + GetSelectionSummary();
        }
    }
    private void SwitchToSearchResultTextBox()
    {
        if (m_active_textbox != null)
        {
            // allow subsequent Finds to update chapter list, and search history
            m_found_verses_displayed = true;
            PopulateChaptersListBox();

            // in all cases
            MainTextBox.Visible = false;
            SearchResultTextBox.Visible = true;
            m_active_textbox = SearchResultTextBox;
            //m_active_textbox.Refresh();

            UpdateWordWrapLabel(m_active_textbox.WordWrap);
            ValuesSequenceTextBox.WordWrap = m_active_textbox.WordWrap;
            CVWLSequenceTextBox.WordWrap = m_active_textbox.WordWrap;
            DNASequenceTextBox.WordWrap = m_active_textbox.WordWrap;

            GoldenRatioScopeLabel.Visible = false;
            GoldenRatioTypeLabel.Visible = false;
            GoldenRatioOrderLabel.Visible = false;
            GoldenRatioScopeLabel.Refresh();
            GoldenRatioOrderLabel.Refresh();

            this.Text = Application.ProductName + " | " + GetSelectionSummary();
            UpdateFindMatchCaption();
        }
    }

    private int[] m_matches_per_chapter = null;
    private void DisplayFoundVerses(bool add_to_history, bool colorize_chapters_by_matches)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.FoundVerses != null)
                {
                    TranslationTextBox.Text = null;
                    ZoomInLabel.Enabled = (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
                    ZoomOutLabel.Enabled = (m_text_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));

                    if (colorize_chapters_by_matches)
                    {
                        if (m_client.Book != null)
                        {
                            m_matches_per_chapter = new int[m_client.Book.Chapters.Count];
                            if ((m_client.FoundPhrases != null) && (m_client.FoundPhrases.Count > 0))
                            {
                                foreach (Phrase phrase in m_client.FoundPhrases)
                                {
                                    if (phrase != null)
                                    {
                                        if (phrase.Verse != null)
                                        {
                                            if (phrase.Verse.Chapter != null)
                                            {
                                                m_matches_per_chapter[phrase.Verse.Chapter.SortedNumber - 1]++;
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                foreach (Verse verse in m_client.FoundVerses)
                                {
                                    if (verse != null)
                                    {
                                        if (verse.Chapter != null)
                                        {
                                            m_matches_per_chapter[verse.Chapter.SortedNumber - 1]++;
                                        }
                                    }
                                }
                            }
                        }

                        SwitchToSearchResultTextBox();
                    }

                    for (int i = 0; i < 3; i++) SearchResultTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
                    for (int i = 0; i < 3; i++) SearchResultTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
                    SearchResultTextBox.BeginUpdate();

                    StringBuilder str = new StringBuilder();
                    foreach (Verse verse in m_client.FoundVerses)
                    {
                        if (verse != null)
                        {
                            str.Append(verse.ArabicAddress + "\t" + verse.Text + "\n");
                        }
                    }
                    if (str.Length > 1)
                    {
                        str.Remove(str.Length - 1, 1);
                    }
                    m_current_text = str.ToString();

                    m_user_text_mode = false;
                    m_selection_mode = true;
                    UpdateHeaderLabel();
                    SearchResultTextBox.Text = m_current_text;
                    SearchResultTextBox.Refresh();
                    GenerateSentencesLabel.Visible = false;
                    DuplicateLettersCheckBox.Visible = false;

                    CalculateCurrentValue();

                    // phrase statistics
                    if (m_client.FoundPhrases != null)
                    {
                        if (m_client.FoundPhrases.Count > 0)
                        {
                            CalcuaatePhraseStatistics();
                        }
                    }

                    BuildLetterFrequencies();
                    DisplayLetterFrequencies();

                    if (m_client.FoundPhrases != null)
                    {
                        ColorizePhrases();
                        BuildFindMatches();
                        HighlightVerses();
                    }

                    m_current_found_verse_index = 0;
                    DisplayCurrentPositions();

                    DisplayTranslations(m_client.FoundVerses);
                    DisplayTafseer(m_client.FoundVerses);
                    DisplaySymmetry();
                    DisplayCVWLSequence();
                    DisplayValuesSequence();
                    DisplayDNASequence();


                    if (add_to_history)
                    {
                        AddSearchHistoryItem();
                    }

                    m_current_found_verse_index = 0;
                    RealignFoundMatchedToStart();

                    BookmarkTextBox.Enabled = false;
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            if (PictureBox.Visible)
            {
                PictureBox.Visible = false;
            }
            SearchResultTextBox.EndUpdate();
            SearchResultTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
            SearchResultTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
            this.Cursor = Cursors.Default;
        }
    }
    private void CalcuaatePhraseStatistics()
    {
        StringBuilder phrase_str = new StringBuilder();
        int word_count = 0;
        int letter_count = 0;
        long value = 0L;
        foreach (Phrase phrase in m_client.FoundPhrases)
        {
            if (phrase != null)
            {
                phrase_str.AppendLine(phrase.Text);
                word_count += phrase.Text.Split(' ').Length;
                string phrase_nospaces = phrase.Text.SimplifyTo(m_client.NumerologySystem.TextMode).Replace(" ", "");
                letter_count += phrase_nospaces.Length;
                value += m_client.CalculateValue(phrase.Text);
            }
        }

        WordsTextBox.Text = Radix.Encode(word_count, m_radix);
        WordsTextBox.ForeColor = GetNumberTypeColor(WordsTextBox.Text, m_radix);
        WordsTextBox.BackColor = (Numbers.Compare(word_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
        WordsTextBox.Refresh();
        DecimalWordsTextBox.Text = word_count.ToString();
        DecimalWordsTextBox.ForeColor = GetNumberTypeColor(word_count);
        DecimalWordsTextBox.Visible = (m_radix != DEFAULT_RADIX);
        DecimalWordsTextBox.Refresh();
        LettersTextBox.Text = Radix.Encode(letter_count, m_radix);
        LettersTextBox.ForeColor = GetNumberTypeColor(LettersTextBox.Text, m_radix);
        LettersTextBox.BackColor = (Numbers.Compare(letter_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
        LettersTextBox.Refresh();
        DecimalLettersTextBox.Text = letter_count.ToString();
        DecimalLettersTextBox.ForeColor = GetNumberTypeColor(letter_count);
        DecimalLettersTextBox.Visible = (m_radix != DEFAULT_RADIX);
        DecimalLettersTextBox.Refresh();
        ValueTextBox.Text = Radix.Encode(value, m_radix);
        ValueTextBox.ForeColor = GetNumberTypeColor(value);
        ValueTextBox.SelectionStart = ValueTextBox.Text.Length;
        ValueTextBox.SelectionLength = 0;
        ValueTextBox.Refresh();
        DecimalValueTextBox.Text = value.ToString();
        DecimalValueTextBox.Visible = (m_radix != DEFAULT_RADIX);
        DecimalValueTextBox.ForeColor = GetNumberTypeColor(value);
        DecimalValueTextBox.Refresh();
        FactorizeValue(value, "Phrases", true);

        m_current_text = phrase_str.ToString();
    }
    private void DisplayFoundVerseRanges(bool add_to_history, bool colorize_chapters_by_matches)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.FoundVerseRanges != null)
                {
                    TranslationTextBox.Text = null;
                    ZoomInLabel.Enabled = (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
                    ZoomOutLabel.Enabled = (m_text_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));

                    if (colorize_chapters_by_matches)
                    {
                        if (m_client.Book != null)
                        {
                            m_matches_per_chapter = new int[m_client.Book.Chapters.Count];
                            foreach (List<Verse> range in m_client.FoundVerseRanges)
                            {
                                foreach (Verse verse in range)
                                {
                                    if (verse != null)
                                    {
                                        if (verse.Chapter != null)
                                        {
                                            m_matches_per_chapter[verse.Chapter.SortedNumber - 1]++;
                                        }
                                    }
                                }
                            }
                        }

                        SwitchToSearchResultTextBox();
                    }

                    for (int i = 0; i < 3; i++) SearchResultTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
                    for (int i = 0; i < 3; i++) SearchResultTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
                    SearchResultTextBox.BeginUpdate();

                    List<Verse> verses = new List<Verse>();
                    foreach (List<Verse> range in m_client.FoundVerseRanges)
                    {
                        verses.AddRange(range);
                    }

                    StringBuilder str = new StringBuilder();
                    foreach (Verse verse in verses)
                    {
                        if (verse != null)
                        {
                            str.Append(verse.ArabicAddress + "\t" + verse.Text + "\n");
                        }
                    }
                    if (str.Length > 1)
                    {
                        str.Remove(str.Length - 1, 1);
                    }
                    m_current_text = str.ToString();

                    m_user_text_mode = false;
                    m_selection_mode = true;
                    UpdateHeaderLabel();
                    SearchResultTextBox.Text = m_current_text;
                    SearchResultTextBox.Refresh();
                    GenerateSentencesLabel.Visible = false;
                    DuplicateLettersCheckBox.Visible = false;

                    CalculateCurrentValue();

                    BuildLetterFrequencies();
                    DisplayLetterFrequencies();

                    ColorizeVerseRanges(); // too slow

                    m_current_found_verse_index = 0;
                    DisplayCurrentPositions();

                    DisplayTranslations(verses);
                    DisplayTafseer(verses);
                    DisplaySymmetry();
                    DisplayCVWLSequence();
                    DisplayValuesSequence();
                    DisplayDNASequence();

                    if (add_to_history)
                    {
                        AddSearchHistoryItem();
                    }

                    m_current_found_verse_index = 0;
                    RealignFoundMatchedToStart();

                    BookmarkTextBox.Enabled = false;
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            if (PictureBox.Visible)
            {
                PictureBox.Visible = false;
            }
            SearchResultTextBox.EndUpdate();
            SearchResultTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
            SearchResultTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
            this.Cursor = Cursors.Default;
        }
    }
    private void DisplayFoundVerseSets(bool add_to_history, bool colorize_chapters_by_matches)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.FoundVerseSets != null)
                {
                    if (m_client.FoundVerseSets.Count > 0)
                    {
                        StringBuilder str = new StringBuilder();
                        foreach (List<Verse> set in m_client.FoundVerseSets)
                        {
                            foreach (Verse verse in set)
                            {
                                if (verse != null)
                                {
                                    str.Append(verse.Address + ", ");
                                }
                            }
                            if (set.Count > 0)
                            {
                                str.Remove(str.Length - 2, 2);
                            }
                            str.AppendLine();
                        }

                        string filename = "FoundVerseSets" + Globals.OUTPUT_FILE_EXT;
                        if (Directory.Exists(Globals.STATISTICS_FOLDER))
                        {
                            string path = Globals.STATISTICS_FOLDER + "/" + filename;
                            FileHelper.SaveText(path, str.ToString());
                            FileHelper.DisplayFile(path);
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            if (PictureBox.Visible)
            {
                PictureBox.Visible = false;
            }
            this.Cursor = Cursors.Default;
        }
    }
    private void DisplayFoundChapters(bool add_to_history, bool colorize_chapters_by_matches)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.FoundChapters != null)
                {
                    TranslationTextBox.Text = null;
                    ZoomInLabel.Enabled = (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
                    ZoomOutLabel.Enabled = (m_text_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));

                    if (colorize_chapters_by_matches)
                    {
                        if (m_client.Book != null)
                        {
                            m_matches_per_chapter = new int[m_client.Book.Chapters.Count];
                            foreach (Chapter chapter in m_client.FoundChapters)
                            {
                                if (chapter != null)
                                {
                                    m_matches_per_chapter[chapter.SortedNumber - 1]++;
                                }
                            }
                        }

                        SwitchToSearchResultTextBox();
                    }

                    for (int i = 0; i < 3; i++) ChaptersListBox.SelectedIndexChanged -= new EventHandler(ChaptersListBox_SelectedIndexChanged);
                    if (m_client.FoundChapters.Count > 0)
                    {
                        ChaptersListBox.SelectedIndices.Clear();
                        foreach (Chapter chapter in m_client.FoundChapters)
                        {
                            if (((chapter.SortedNumber - 1) >= 0) && ((chapter.SortedNumber - 1) < ChaptersListBox.Items.Count))
                            {
                                ChaptersListBox.SelectedIndices.Add(chapter.SortedNumber - 1);
                            }
                        }
                    }
                    else
                    {
                        ChaptersListBox.SelectedIndices.Clear();
                    }
                    ChaptersListBox.SelectedIndexChanged += new EventHandler(ChaptersListBox_SelectedIndexChanged);
                    UpdateSelection();

                    for (int i = 0; i < 3; i++) SearchResultTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
                    for (int i = 0; i < 3; i++) SearchResultTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
                    SearchResultTextBox.BeginUpdate();

                    StringBuilder str = new StringBuilder();
                    foreach (Chapter chapter in m_client.FoundChapters)
                    {
                        foreach (Verse verse in chapter.Verses)
                        {
                            if (verse != null)
                            {
                                str.Append(verse.ArabicAddress + "\t" + verse.Text + "\n");
                            }
                        }
                    }
                    if (str.Length > 1)
                    {
                        str.Remove(str.Length - 1, 1);
                    }
                    m_current_text = str.ToString();

                    m_user_text_mode = false;
                    m_selection_mode = true;
                    UpdateHeaderLabel();
                    SearchResultTextBox.Text = m_current_text;
                    SearchResultTextBox.Refresh();
                    GenerateSentencesLabel.Visible = false;
                    DuplicateLettersCheckBox.Visible = false;

                    CalculateCurrentValue();

                    BuildLetterFrequencies();
                    DisplayLetterFrequencies();

                    //ColorizeChapters(); // too slow

                    m_current_found_verse_index = 0;
                    DisplayCurrentPositions();

                    List<Verse> verses = new List<Verse>();
                    foreach (Chapter chapter in m_client.FoundChapters)
                    {
                        verses.AddRange(chapter.Verses);
                    }
                    DisplayTranslations(verses);
                    DisplayTafseer(verses);
                    DisplaySymmetry();
                    DisplayCVWLSequence();
                    DisplayValuesSequence();
                    DisplayDNASequence();

                    if (add_to_history)
                    {
                        AddSearchHistoryItem();
                    }

                    m_current_found_verse_index = 0;
                    RealignFoundMatchedToStart();

                    BookmarkTextBox.Enabled = false;
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            if (PictureBox.Visible)
            {
                PictureBox.Visible = false;
            }
            SearchResultTextBox.EndUpdate();
            SearchResultTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
            SearchResultTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
            this.Cursor = Cursors.Default;
        }
    }
    private void DisplayFoundChapterRanges(bool add_to_history, bool colorize_chapters_by_matches)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.FoundChapterRanges != null)
                {
                    TranslationTextBox.Text = null;
                    ZoomInLabel.Enabled = (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
                    ZoomOutLabel.Enabled = (m_text_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));

                    if (colorize_chapters_by_matches)
                    {
                        if (m_client.Book != null)
                        {
                            m_matches_per_chapter = new int[m_client.Book.Chapters.Count];
                            foreach (List<Chapter> range in m_client.FoundChapterRanges)
                            {
                                foreach (Chapter chapter in range)
                                {
                                    if (chapter != null)
                                    {
                                        m_matches_per_chapter[chapter.SortedNumber - 1]++;
                                    }
                                }
                            }
                        }

                        SwitchToSearchResultTextBox();
                    }

                    for (int i = 0; i < 3; i++) ChaptersListBox.SelectedIndexChanged -= new EventHandler(ChaptersListBox_SelectedIndexChanged);
                    if (m_client.FoundChapterRanges.Count > 0)
                    {
                        ChaptersListBox.SelectedIndices.Clear();
                        foreach (List<Chapter> range in m_client.FoundChapterRanges)
                        {
                            foreach (Chapter chapter in range)
                            {
                                if (((chapter.SortedNumber - 1) >= 0) && ((chapter.SortedNumber - 1) < ChaptersListBox.Items.Count))
                                {
                                    ChaptersListBox.SelectedIndices.Add(chapter.SortedNumber - 1);
                                }
                            }
                        }
                    }
                    else
                    {
                        ChaptersListBox.SelectedIndices.Clear();
                    }
                    ChaptersListBox.SelectedIndexChanged += new EventHandler(ChaptersListBox_SelectedIndexChanged);
                    UpdateSelection();

                    for (int i = 0; i < 3; i++) SearchResultTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
                    for (int i = 0; i < 3; i++) SearchResultTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
                    SearchResultTextBox.BeginUpdate();

                    List<Verse> verses = new List<Verse>();
                    foreach (List<Chapter> range in m_client.FoundChapterRanges)
                    {
                        foreach (Chapter chapter in range)
                        {
                            verses.AddRange(chapter.Verses);
                        }
                    }

                    StringBuilder str = new StringBuilder();
                    foreach (Verse verse in verses)
                    {
                        if (verse != null)
                        {
                            str.Append(verse.ArabicAddress + "\t" + verse.Text + "\n");
                        }
                    }
                    m_current_text = str.ToString();

                    m_user_text_mode = false;
                    m_selection_mode = true;
                    UpdateHeaderLabel();
                    SearchResultTextBox.Text = m_current_text;
                    SearchResultTextBox.Refresh();
                    GenerateSentencesLabel.Visible = false;
                    DuplicateLettersCheckBox.Visible = false;

                    CalculateCurrentValue();

                    BuildLetterFrequencies();
                    DisplayLetterFrequencies();

                    //ColorizeChapterRanges(); // too slow

                    m_current_found_verse_index = 0;
                    DisplayCurrentPositions();

                    DisplayTranslations(verses);
                    DisplayTafseer(verses);
                    DisplaySymmetry();
                    DisplayCVWLSequence();
                    DisplayValuesSequence();
                    DisplayDNASequence();

                    if (add_to_history)
                    {
                        AddSearchHistoryItem();
                    }

                    m_current_found_verse_index = 0;
                    RealignFoundMatchedToStart();

                    BookmarkTextBox.Enabled = false;
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            if (PictureBox.Visible)
            {
                PictureBox.Visible = false;
            }
            SearchResultTextBox.EndUpdate();
            SearchResultTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
            SearchResultTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
            this.Cursor = Cursors.Default;
        }
    }
    private void DisplayFoundChapterSets(bool add_to_history, bool colorize_chapters_by_matches)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.FoundChapterSets != null)
                {
                    if (m_client.FoundChapterSets.Count > 0)
                    {
                        StringBuilder str = new StringBuilder();
                        foreach (List<Chapter> set in m_client.FoundChapterSets)
                        {
                            foreach (Chapter chapter in set)
                            {
                                if (chapter != null)
                                {
                                    str.Append(chapter.SortedNumber + "." + chapter.Verses.Count + ", ");
                                }
                            }
                            if (set.Count > 0)
                            {
                                str.Remove(str.Length - 2, 2);
                            }
                            str.AppendLine();
                        }

                        string filename = "FoundChapterSets" + Globals.OUTPUT_FILE_EXT;
                        if (Directory.Exists(Globals.STATISTICS_FOLDER))
                        {
                            string path = Globals.STATISTICS_FOLDER + "/" + filename;
                            FileHelper.SaveText(path, str.ToString());
                            FileHelper.DisplayFile(path);
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            if (PictureBox.Visible)
            {
                PictureBox.Visible = false;
            }
            this.Cursor = Cursors.Default;
        }
    }

    private void BuildFindMatches()
    {
        if (m_client != null)
        {
            if (m_client.FoundPhrases != null)
            {
                foreach (Phrase phrase in m_client.FoundPhrases)
                {
                    if (phrase != null)
                    {
                        if (phrase.Verse != null)
                        {
                            int start = GetPhrasePositionInRichTextBox(phrase);
                            if ((start >= 0) && (start < SearchResultTextBox.Text.Length))
                            {
                                if (phrase.Text != null)
                                {
                                    int length = phrase.Text.Length;
                                    BuildFindMatch(start, length);
                                }
                            }
                        }
                    }
                }
            }
        }
        UpdateFindMatchCaption();
    }
    private void ColorizePhrases()
    {
        if (m_client != null)
        {
            if (m_client.FoundPhrases != null)
            {
                foreach (Phrase phrase in m_client.FoundPhrases)
                {
                    if (phrase != null)
                    {
                        if (phrase.Verse != null)
                        {
                            int start = GetPhrasePositionInRichTextBox(phrase);
                            if ((start >= 0) && (start < SearchResultTextBox.Text.Length))
                            {
                                if (phrase.Text != null)
                                {
                                    int extra = 0;
                                    foreach (char c in phrase.Text)
                                    {
                                        if ((Constants.STOPMARKS.Contains(c)) || (Constants.QURANMARKS.Contains(c)))
                                        {
                                            extra += 2;
                                        }
                                    }
                                    int length = phrase.Text.Length + extra;
                                    SearchResultTextBox.Select(start, length);
                                    SearchResultTextBox.SelectionColor = Color.Red;
                                }
                            }
                        }
                    }
                }

                UpdateFindMatchCaption();
            }
        }
    }
    private Dictionary<Verse, Color> m_found_verse_backcolors = new Dictionary<Verse, Color>();
    private void HighlightVerses()
    {
        try
        {
            for (int i = 0; i < 3; i++) SearchResultTextBox.TextChanged -= new EventHandler(MainTextBox_TextChanged);
            for (int i = 0; i < 3; i++) SearchResultTextBox.SelectionChanged -= new EventHandler(MainTextBox_SelectionChanged);
            SearchResultTextBox.BeginUpdate();
            SearchResultTextBox.ClearHighlight();

            if (m_client != null)
            {
                m_found_verse_backcolors.Clear();

                Dictionary<Verse, int> phrases_per_verse_dictionary = new Dictionary<Verse, int>();
                if (m_client.FoundPhrases != null)
                {
                    if (m_client.FoundVerses != null)
                    {
                        if (m_client.FoundPhrases.Count >= m_client.FoundVerses.Count)
                        {
                            foreach (Phrase phrase in m_client.FoundPhrases)
                            {
                                if (phrase != null)
                                {
                                    if (phrases_per_verse_dictionary.ContainsKey(phrase.Verse))
                                    {
                                        phrases_per_verse_dictionary[phrase.Verse]++;
                                    }
                                    else
                                    {
                                        phrases_per_verse_dictionary.Add(phrase.Verse, 1);
                                    }
                                }
                            }

                            foreach (Verse verse in m_client.FoundVerses)
                            {
                                int start = GetVerseDisplayStart(verse);
                                int length = GetVerseDisplayLength(verse);
                                if (phrases_per_verse_dictionary.ContainsKey(verse))
                                {
                                    int match_count = phrases_per_verse_dictionary[verse];

                                    // use color shading to represent match_count visually
                                    if (match_count > 1)
                                    {
                                        int red = 255;
                                        int green = 255;
                                        int blue = 255;
                                        green -= ((match_count - 1) * 32);
                                        if (green < 0)
                                        {
                                            red += green;
                                            green = 0;
                                        }
                                        if (red < 0)
                                        {
                                            blue += red;
                                            red = 0;
                                        }
                                        if (blue < 0)
                                        {
                                            blue = 0;
                                        }
                                        m_found_verse_backcolors.Add(verse, Color.FromArgb(red, green, blue));
                                    }
                                    else
                                    {
                                        m_found_verse_backcolors.Add(verse, SearchResultTextBox.BackColor);
                                    }
                                    SearchResultTextBox.Highlight(start, length - 1, m_found_verse_backcolors[verse]);
                                }
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            SearchResultTextBox.EndUpdate();
            SearchResultTextBox.SelectionChanged += new EventHandler(MainTextBox_SelectionChanged);
            SearchResultTextBox.TextChanged += new EventHandler(MainTextBox_TextChanged);
        }
    }
    private void ColorizeVerseRanges()
    {
        if (m_client != null)
        {
            if (m_client.FoundVerseRanges != null)
            {
                if (m_client.FoundVerseRanges.Count > 0)
                {
                    bool colorize = true; // colorize ranges alternatively

                    int line_index = 0;
                    foreach (List<Verse> range in m_client.FoundVerseRanges)
                    {
                        colorize = !colorize; // alternate colorization of ranges

                        int start = SearchResultTextBox.GetLinePosition(line_index);
                        int length = 0;
                        foreach (Verse verse in range)
                        {
                            length += SearchResultTextBox.Lines[line_index].Length + 1; // "\n"
                            line_index++;
                        }
                        SearchResultTextBox.Select(start, length);
                        SearchResultTextBox.SelectionColor = colorize ? Color.Blue : Color.Navy;
                    }
                }
            }
        }

        //FIX to reset SelectionColor
        SearchResultTextBox.Select(0, 1);
        SearchResultTextBox.SelectionColor = Color.Navy;
        SearchResultTextBox.Select(0, 0);
        SearchResultTextBox.SelectionColor = Color.Navy;
    }
    private void ColorizeVerseSets()
    {
        if (m_client != null)
        {
            if (m_client.FoundVerseSets != null)
            {
                if (m_client.FoundVerseSets.Count > 0)
                {
                    bool colorize = true; // colorize sets alternatively

                    int line_index = 0;
                    foreach (List<Verse> set in m_client.FoundVerseSets)
                    {
                        colorize = !colorize; // alternate colorization of sets

                        int start = SearchResultTextBox.GetLinePosition(line_index);
                        int length = 0;
                        foreach (Verse verse in set)
                        {
                            length += SearchResultTextBox.Lines[line_index].Length + 1; // "\n"
                            line_index++;
                        }
                        SearchResultTextBox.Select(start, length);
                        SearchResultTextBox.SelectionColor = colorize ? Color.Blue : Color.Navy;
                    }
                }
            }
        }

        //FIX to reset SelectionColor
        SearchResultTextBox.Select(0, 1);
        SearchResultTextBox.SelectionColor = Color.Navy;
        SearchResultTextBox.Select(0, 0);
        SearchResultTextBox.SelectionColor = Color.Navy;
    }
    private void ColorizeChapters()
    {
        if (m_client != null)
        {
            if (m_client.FoundChapters != null)
            {
                if (m_client.FoundChapters.Count > 0)
                {
                    bool colorize = true; // colorize chapters alternatively

                    int line_index = 0;
                    foreach (Chapter chapter in m_client.FoundChapters)
                    {
                        if (chapter != null)
                        {
                            colorize = !colorize; // alternate colorization of chapters

                            int start = SearchResultTextBox.GetLinePosition(line_index);
                            int length = 0;
                            foreach (Verse verse in chapter.Verses)
                            {
                                length += SearchResultTextBox.Lines[line_index].Length + 1; // "\n"
                                line_index++;
                            }
                            SearchResultTextBox.Select(start, length);
                            SearchResultTextBox.SelectionColor = colorize ? Color.Blue : Color.Navy;
                        }
                    }
                }
            }
        }

        //FIX to reset SelectionColor
        SearchResultTextBox.Select(0, 1);
        SearchResultTextBox.SelectionColor = Color.Navy;
        SearchResultTextBox.Select(0, 0);
        SearchResultTextBox.SelectionColor = Color.Navy;
    }
    private void ColorizeChapterRanges()
    {
        if (m_client != null)
        {
            if (m_client.FoundChapterRanges != null)
            {
                if (m_client.FoundChapterRanges.Count > 0)
                {
                    bool colorize = true; // colorize ranges alternatively

                    int line_index = 0;
                    foreach (List<Chapter> range in m_client.FoundChapterRanges)
                    {
                        if (range != null)
                        {
                            colorize = !colorize; // alternate colorization of ranges

                            int start = SearchResultTextBox.GetLinePosition(line_index);
                            int length = 0;
                            foreach (Chapter chapter in range)
                            {
                                foreach (Verse verse in chapter.Verses)
                                {
                                    length += SearchResultTextBox.Lines[line_index].Length + 1; // "\n"
                                    line_index++;
                                }
                            }
                            SearchResultTextBox.Select(start, length);
                            SearchResultTextBox.SelectionColor = colorize ? Color.Blue : Color.Navy;
                        }
                    }
                }
            }
        }

        //FIX to reset SelectionColor
        SearchResultTextBox.Select(0, 1);
        SearchResultTextBox.SelectionColor = Color.Navy;
        SearchResultTextBox.Select(0, 0);
        SearchResultTextBox.SelectionColor = Color.Navy;
    }
    private void ColorizeChapterSets()
    {
        if (m_client != null)
        {
            if (m_client.FoundChapterSets != null)
            {
                if (m_client.FoundChapterSets.Count > 0)
                {
                    bool colorize = true; // colorize sets alternatively

                    int line_index = 0;
                    foreach (List<Chapter> set in m_client.FoundChapterSets)
                    {
                        if (set != null)
                        {
                            colorize = !colorize; // alternate colorization of sets

                            int start = SearchResultTextBox.GetLinePosition(line_index);
                            int length = 0;
                            foreach (Chapter chapter in set)
                            {
                                foreach (Verse verse in chapter.Verses)
                                {
                                    length += SearchResultTextBox.Lines[line_index].Length + 1; // "\n"
                                    line_index++;
                                }
                            }
                            SearchResultTextBox.Select(start, length);
                            SearchResultTextBox.SelectionColor = colorize ? Color.Blue : Color.Navy;
                        }
                    }
                }
            }
        }

        //FIX to reset SelectionColor
        SearchResultTextBox.Select(0, 1);
        SearchResultTextBox.SelectionColor = Color.Navy;
        SearchResultTextBox.Select(0, 0);
        SearchResultTextBox.SelectionColor = Color.Navy;
    }

    private void SearchResultInpectLabel_Click(object sender, EventArgs e)
    {
        if (m_client == null) return;
        if (m_client.NumerologySystem == null) return;
        if (m_client.Book == null) return;
        if (m_client.Selection == null) return;

        string result = null;
        string filename = null;
        if (m_found_verses_displayed)
        {
            switch (m_numbers_result_type)
            {
                case NumbersResultType.Words:
                case NumbersResultType.WordRanges:
                case NumbersResultType.WordSets:
                    {
                        result = DisplayWordInformation(m_client.FoundWords);
                    }
                    break;
                case NumbersResultType.Sentences:
                    {
                        result = DisplayVerseInformation(m_client.FoundVerses); //??? Sentence and Phrase don't know about Words
                    }
                    break;
                case NumbersResultType.Verses:
                case NumbersResultType.VerseRanges:
                case NumbersResultType.VerseSets:
                    {
                        result = DisplayVerseInformation(m_client.FoundVerses);
                    }
                    break;
                case NumbersResultType.Chapters:
                case NumbersResultType.ChapterRanges:
                case NumbersResultType.ChapterSets:
                    {
                        List<Chapter> chapters = m_client.Book.GetChapters(m_client.FoundVerses);
                        if (chapters != null)
                        {
                            result = DisplayChapterInformation(chapters);
                        }
                    }
                    break;
            }
            filename = m_client.NumerologySystem.Name + "_" + m_find_result_header.Replace(" ", "_").Replace("*", "") + Globals.OUTPUT_FILE_EXT;
        }
        else
        {
            List<Verse> verses = m_client.Selection.Verses;
            if (verses != null)
            {
                result = DisplayVerseInformation(verses);
            }

            StringBuilder str = new StringBuilder();
            str.Append(m_client.Selection.Scope.ToString());
            if (m_client.Selection.Scope == SelectionScope.Chapter)
            {
                foreach (Chapter chapter in m_client.Selection.Chapters)
                {
                    str.Append("." + chapter.SortedNumber);
                }
                if (str.Length > 100)
                {
                    str.Remove(100, str.Length - 100);
                    int pos = str.ToString().LastIndexOf('.');
                    if (pos > -1)
                    {
                        str.Remove(pos, str.Length - pos);
                    }

                    if (str[str.Length - 1] == '.')
                    {
                        str.Append("..");
                    }
                    else
                    {
                        str.Append("...");
                    }
                }
            }
            else
            {
                foreach (int index in m_client.Selection.Indexes)
                {
                    str.Append("." + (index + 1).ToString());
                }
            }

            filename = m_client.NumerologySystem.Name + "_" + "VersesOf" + str.ToString() + Globals.OUTPUT_FILE_EXT;
        }
        if (Directory.Exists(Globals.STATISTICS_FOLDER))
        {
            string path = Globals.STATISTICS_FOLDER + "/" + filename;
            FileHelper.SaveText(path, result);
            FileHelper.DisplayFile(path);
        }
    }
    private string DisplayChapterInformation(List<Chapter> chapters)
    {
        if (m_client == null) return null;
        if (chapters == null) return null;

        StringBuilder str = new StringBuilder();

        str.Append("#" + "\t" + "Name" + "\t" + "Chapter" + "\t" + "Verses" + "\t" + "Words" + "\t" + "Letters" + "\t" + "Value" + "\t");

        NumerologySystem numerology_system = m_client.NumerologySystem;
        if (numerology_system != null)
        {
            if (numerology_system.LetterValues.Keys.Count > 0)
            {
                foreach (char key in numerology_system.LetterValues.Keys)
                {
                    str.Append(key.ToString() + "\t");
                }
                if (str.Length > 1)
                {
                    str.Remove(str.Length - 1, 1); // \t
                }
                str.Append("\r\n");
            }

            int count = 0;
            int sum = 0;
            int chapter_sum = 0;
            int verse_sum = 0;
            int word_sum = 0;
            int letter_sum = 0;
            long value_sum = 0L;
            foreach (Chapter chapter in chapters)
            {
                count++;
                sum += count;
                chapter_sum += chapter.SortedNumber;
                verse_sum += chapter.Verses.Count;
                word_sum += chapter.WordCount;
                letter_sum += chapter.LetterCount;
                long value = m_client.CalculateValue(chapter);
                value_sum += value;

                str.Append(count + "\t");
                str.Append(chapter.Name + "\t");
                str.Append(chapter.SortedNumber.ToString() + "\t");
                str.Append(chapter.Verses.Count.ToString() + "\t");
                str.Append(chapter.WordCount.ToString() + "\t");
                str.Append(chapter.LetterCount.ToString() + "\t");
                str.Append(value.ToString() + "\t");

                if (numerology_system.LetterValues.Keys.Count > 0)
                {
                    foreach (char key in numerology_system.LetterValues.Keys)
                    {
                        str.Append(chapter.GetLetterFrequency(key) + "\t");
                    }
                    if (str.Length > 1)
                    {
                        str.Remove(str.Length - 1, 1); // \t
                    }
                    str.Append("\r\n");
                }
            }
            if (str.Length > 2)
            {
                str.Remove(str.Length - 2, 2);
            }

            str.Append("\r\n");
            str.AppendLine(sum + "\t" + "Sum" + "\t" + chapter_sum + "\t" + verse_sum + "\t" + word_sum + "\t" + letter_sum + "\t" + value_sum);
        }
        return str.ToString();
    }
    private string DisplayVerseInformation(List<Verse> verses)
    {
        if (m_client == null) return null;
        if (verses == null) return null;

        StringBuilder str = new StringBuilder();

        str.Append("#" + "\t" + "Number" + "\t" + "Chapter" + "\t" + "Verse" + "\t" + "Words" + "\t" + "Letters" + "\t" + "Value" + "\t");

        NumerologySystem numerology_system = m_client.NumerologySystem;
        if (numerology_system != null)
        {
            foreach (char key in numerology_system.LetterValues.Keys)
            {
                str.Append(key.ToString() + "\t");
            }
            str.Append("Text");
            str.Append("\r\n");

            int count = 0;
            int sum = 0;
            int verse_sum = 0;
            int chapter_sum = 0;
            int chapter_verse_sum = 0;
            int word_sum = 0;
            int letter_sum = 0;
            long value_sum = 0L;
            foreach (Verse verse in verses)
            {
                count++;
                sum += count;
                verse_sum += verse.Number;
                chapter_sum += verse.Chapter.SortedNumber;
                chapter_verse_sum += verse.NumberInChapter;
                word_sum += verse.Words.Count;
                letter_sum += verse.LetterCount;
                long value = m_client.CalculateValue(verse);
                value_sum += value;

                str.Append(count.ToString() + "\t");
                str.Append(verse.Number.ToString() + "\t");
                str.Append(verse.Chapter.SortedNumber.ToString() + "\t");
                str.Append(verse.NumberInChapter.ToString() + "\t");
                str.Append(verse.Words.Count.ToString() + "\t");
                str.Append(verse.LetterCount.ToString() + "\t");
                str.Append(value.ToString() + "\t");

                foreach (char character in numerology_system.LetterValues.Keys)
                {
                    if (Constants.INDIAN_DIGITS.Contains(character)) continue;
                    if (Constants.STOPMARKS.Contains(character)) continue;
                    if (Constants.QURANMARKS.Contains(character)) continue;
                    if (Constants.OPEN_BRACKET[0] == character) continue;
                    if (Constants.CLOSE_BRACKET[0] == character) continue;
                    str.Append(verse.GetLetterFrequency(character).ToString() + "\t");
                }

                str.Append(verse.Text);

                str.Append("\r\n");
            }
            if (str.Length > 2)
            {
                str.Remove(str.Length - 2, 2);
            }

            str.Append("\r\n");
            str.AppendLine(sum + "\t" + verse_sum + "\t" + chapter_sum + "\t" + chapter_verse_sum + "\t" + word_sum + "\t" + letter_sum + "\t" + value_sum);
        }
        return str.ToString();
    }
    private string DisplayWordInformation(List<Word> words)
    {
        if (words == null) return null;

        StringBuilder str = new StringBuilder();
        if (words.Count > 0)
        {
            str.Append
            (
                "Address" + "\t" +
                "Chapter" + "\t" +
                "Verse" + "\t" +
                "Word" + "\t" +
                "Text" + "\t" +
                "Transliteration" + "\t" +
                "Roots" + "\t" +
                "Meaning" + "\t" +
                "Occurrence" + "\t" +
                "Frequency" + "\t" +
                "Letters" + "\r\n"
            );

            foreach (Word word in words)
            {
                List<string> roots = word.Roots;
                StringBuilder roots_str = new StringBuilder();
                if (roots.Count > 0)
                {
                    foreach (string root in roots)
                    {
                        roots_str.Append(root + "|");
                    }
                    roots_str.Remove(roots_str.Length - 1, 1);
                }

                str.Append
                (
                    word.Address + "\t" +
                    word.Verse.Chapter.SortedNumber.ToString() + "\t" +
                    word.Verse.NumberInChapter.ToString() + "\t" +
                    word.NumberInVerse.ToString() + "\t" +
                    word.Text + "\t" +
                    word.Transliteration + "\t" +
                    roots_str.ToString() + "\t" +
                    word.Meaning + "\t" +
                    word.Occurrence.ToString() + "\t" +
                    word.Frequency.ToString() + "\t" +
                    word.Letters.Count.ToString() + "\r\n"
                );
            }
        }
        return str.ToString();
    }

    private int GetPhrasePositionInRichTextBox(Phrase phrase)
    {
        if (phrase == null) return 0;

        if (m_client != null)
        {
            if (m_client.FoundVerses != null)
            {
                int char_index = 0;
                foreach (Verse verse in m_client.FoundVerses)
                {
                    if (verse != null)
                    {
                        if (phrase.Verse.Number == verse.Number)
                        {
                            return (char_index + verse.Address.Length + 1 + phrase.Position);
                        }
                        char_index += GetVerseDisplayLength(verse);
                    }
                }
            }
        }
        return -1;
    }
    private void RealignFoundMatchedToStart()
    {
        if (m_client != null)
        {
            if (m_found_verses_displayed)
            {
                List<Verse> displayed_verses = new List<Verse>();
                if (m_client.FoundVerses != null)
                {
                    displayed_verses.AddRange(m_client.FoundVerses);
                }
                else if (m_client.FoundChapters != null)
                {
                    foreach (Chapter chapter in m_client.FoundChapters)
                    {
                        if (chapter != null)
                        {
                            displayed_verses.AddRange(chapter.Verses);
                        }
                    }
                }
                else if (m_client.FoundVerseRanges != null)
                {
                    foreach (List<Verse> range in m_client.FoundVerseRanges)
                    {
                        displayed_verses.AddRange(range);
                    }
                }
                else if (m_client.FoundChapterRanges != null)
                {
                    foreach (List<Chapter> range in m_client.FoundChapterRanges)
                    {
                        foreach (Chapter chapter in range)
                        {
                            if (chapter != null)
                            {
                                displayed_verses.AddRange(chapter.Verses);
                            }
                        }
                    }
                }

                int start = 0;
                // scroll to beginning to show complete verse address because in Arabic, pos=0 is after the first number :(
                if (m_client.FoundVerses != null)
                {
                    if (m_client.FoundVerses.Count > 0)
                    {
                        Verse verse = m_client.FoundVerses[0];
                        if (verse != null)
                        {
                            if (verse.Chapter != null)
                            {
                                if (verse.Chapter != null)
                                {
                                    start = verse.Chapter.SortedNumber.ToString().Length;
                                }
                            }
                        }
                    }

                    // re-align to text start
                    if ((start >= 0) && (start < SearchResultTextBox.Text.Length))
                    {
                        SearchResultTextBox.ScrollToCaret();    // must be called first
                        SearchResultTextBox.Select(start, 0);   // must be called second
                    }
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region User History
    ///////////////////////////////////////////////////////////////////////////////
    private void AddSearchHistoryItem()
    {
        if (m_client != null)
        {
            if (m_client.FoundVerses != null)
            {
                if (m_client.FoundVerses.Count > 0)
                {
                    SearchHistoryItem item = new SearchHistoryItem();
                    item.SearchType = m_search_type;
                    item.NumbersResultType = m_numbers_result_type;
                    item.Text = (m_search_type == SearchType.Numbers) ? null : FindByTextTextBox.Text;
                    item.LanguageType = m_language_type;

                    if (TranslatorComboBox.SelectedItem != null)
                    {
                        item.Translation = TranslatorComboBox.SelectedItem.ToString();
                    }

                    item.Verses = new List<Verse>(m_client.FoundVerses);
                    if (m_client.FoundPhrases == null)
                    {
                        item.Phrases = null;
                    }
                    else
                    {
                        item.Phrases = new List<Phrase>(m_client.FoundPhrases);
                    }
                    item.Header = m_find_result_header;
                    m_client.AddHistoryItem(item);
                    UpdateSelectionHistoryButtons();
                }
            }
        }
    }
    private void AddSelectionHistoryItem()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Selection != null)
                {
                    SelectionHistoryItem item = new SelectionHistoryItem(m_client.Selection.Book, m_client.Selection.Scope, m_client.Selection.Indexes);
                    if (item != null)
                    {
                        m_client.AddHistoryItem(item);
                        UpdateSelectionHistoryButtons();
                    }
                }
            }
        }
    }
    private void SelectionHistoryBackwardButton_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            object item = m_client.GotoPreviousHistoryItem();
            if (item != null)
            {
                if (item is SearchHistoryItem)
                {
                    if (m_find_matches != null)
                    {
                        m_find_matches.Clear(); // to reset Matched count
                    }
                }
                else if (item is SelectionHistoryItem)
                {
                    UpdateChaptersListBox();
                }

                DisplaySelectionHistoryItem(item);
                UpdateSelectionHistoryButtons();
            }
        }
        this.AcceptButton = null;
    }
    private void SelectionHistoryForwardButton_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            object item = m_client.GotoNextHistoryItem();
            if (item != null)
            {
                if (item is SearchHistoryItem)
                {
                    if (m_find_matches != null)
                    {
                        m_find_matches.Clear(); // to reset Matched count
                    }
                }
                else if (item is SelectionHistoryItem)
                {
                    UpdateChaptersListBox();
                }

                DisplaySelectionHistoryItem(item);
                UpdateSelectionHistoryButtons();
            }
        }
        this.AcceptButton = null;
    }
    private void SelectionHistoryDeleteLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            PlayerStopLabel_Click(null, null);

            m_client.DeleteCurrentHistoryItem();
            if (m_client.HistoryItems.Count == 0) // no item to display
            {
                DisplaySelection(false);
            }
            else // there is an item to display
            {
                object item = m_client.CurrentHistoryItem;
                if (item != null)
                {
                    UpdateChaptersListBox();

                    DisplaySelectionHistoryItem(item);
                }
            }

            UpdateSelectionHistoryButtons();
        }
    }
    private void SelectionHistoryClearLabel_Click(object sender, EventArgs e)
    {
        if (MessageBox.Show(
            "Delete all search history?",
            Application.ProductName,
            MessageBoxButtons.YesNo,
            MessageBoxIcon.Question) == DialogResult.Yes)
        {
            if (m_client != null)
            {
                PlayerStopLabel_Click(null, null);

                m_client.ClearHistoryItems();
                DisplaySelection(false);

                FindByTextTextBox.Text = null;

                ToolTip.SetToolTip(ChaptersInspectLabel, "Inspect chapters");
                WordsListBoxLabel.Visible = false;
                WordsListBox.Visible = false;

                UpdateChaptersListBox();

                UpdateSelectionHistoryButtons();
            }
        }
    }
    private void DisplaySelectionHistoryItem(object item)
    {
        if (m_client != null)
        {
            PlayerStopLabel_Click(null, null);

            if (item != null)
            {
                SearchHistoryItem search_history_item = item as SearchHistoryItem;
                if (search_history_item != null)
                {
                    FindByTextTextBox.Text = search_history_item.Text;
                    m_find_result_header = search_history_item.Header;
                    m_language_type = search_history_item.LanguageType;

                    TranslatorComboBox.SelectedItem = search_history_item.Translation;

                    m_client.FilterChapters = null;
                    if (search_history_item.Phrases != null)
                    {
                        m_client.FoundPhrases = new List<Phrase>(search_history_item.Phrases);
                    }
                    else
                    {
                        m_client.FoundPhrases = null;
                    }
                    m_client.FoundVerses = new List<Verse>(search_history_item.Verses);

                    if (!String.IsNullOrEmpty(search_history_item.Text))
                    {
                        FindByTextTextBox.SelectionStart = search_history_item.Text.Length;
                        DisplayFoundVerses(false, true);
                    }
                    else
                    {
                        // no NumberQuery is saved so we cannot colorize ranges
                        // so just display all verses and let user re-run search if they need colorization
                        //switch (search_history_item.NumbersResultType)
                        //{
                        //    case NumbersResultType.Words:
                        //    case NumbersResultType.WordRanges:
                        //    case NumbersResultType.Verses:
                        //        DisplayFoundVerses(false);
                        //        break;
                        //    case NumbersResultType.VerseRanges:
                        //        DisplayFoundVerseRanges(false);
                        //        break;
                        //    case NumbersResultType.Chapters:
                        //        DisplayFoundChapters(false);
                        //        break;
                        //    case NumbersResultType.ChapterRanges:
                        //        DisplayFoundChapterRanges(false);
                        //        break;
                        //}

                        // for now use:
                        DisplayFoundVerses(false, true);
                    }
                }
                else
                {
                    SelectionHistoryItem selection_history_item = item as SelectionHistoryItem;
                    if (selection_history_item != null)
                    {
                        m_client.Selection = new Selection(selection_history_item.Book, selection_history_item.Scope, selection_history_item.Indexes);
                        DisplaySelection(false);
                    }
                }

                SearchResultTextBox.Focus();
                SearchResultTextBox.Refresh();
            }
        }
    }
    private void UpdateSelectionHistoryButtons()
    {
        if (m_client != null)
        {
            if (m_client.HistoryItems != null)
            {
                SelectionHistoryBackwardButton.Enabled = (m_client.HistoryItems.Count > 0) && (m_client.HistoryItemIndex > 0);
                SelectionHistoryForwardButton.Enabled = (m_client.HistoryItems.Count >= 0) && (m_client.HistoryItemIndex < m_client.HistoryItems.Count - 1);
                SelectionHistoryDeleteLabel.Enabled = (m_client.HistoryItems.Count > 0);
                SelectionHistoryClearLabel.Enabled = (m_client.HistoryItems.Count > 0);
                SelectionHistoryClearLabel.BackColor = (m_client.HistoryItems.Count > 0) ? Color.LightCoral : SystemColors.ControlLight;
                SelectionHistoryCounterLabel.Text = (m_client.HistoryItemIndex + 1).ToString() + " / " + m_client.HistoryItems.Count.ToString();

                if (m_client.HistoryItems.Count == 0)
                {
                    SearchResultTextBox.Text = "";
                    SearchResultTextBox.Refresh();
                    GenerateSentencesLabel.Visible = false;
                    DuplicateLettersCheckBox.Visible = false;

                    m_find_result_header = "";
                    UpdateHeaderLabel();
                }
            }
        }
    }
    private void SelectionHistoryCounterLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.HistoryItems != null)
            {
                if (m_client.HistoryItems.Count > 0)
                {
                    DisplaySelectionHistoryItem(m_client.CurrentHistoryItem);
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Value Systems
    ///////////////////////////////////////////////////////////////////////////////
    private void NumerologySystemScopeRadioButton_CheckedChanged(object sender, EventArgs e)
    {
        if ((sender as RadioButton).Checked) // to ignore the other control's uncheck firing, so no double event handling
        {
            if (ScopeBookRadioButton.Checked)
            {
                m_client.NumerologySystemScope = NumerologySystemScope.Book;
            }
            else if (ScopeSelectionRadioButton.Checked)
            {
                m_client.NumerologySystemScope = NumerologySystemScope.Selection;
            }
            else if (ScopeHighlightedTextRadioButton.Checked)
            {
                m_client.NumerologySystemScope = NumerologySystemScope.HighlightedText;
            }

            CalculateCurrentValue();

            BuildLetterFrequencies();
            DisplayLetterFrequencies();
        }

        NumerologySystemComboBox.Focus();
    }
    private void AddToControlCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        AddToControlCheckBox_EnabledChanged(sender, e);
    }
    private void AddToControlCheckBox_EnabledChanged(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                bool check_value = (sender as CheckBox).Enabled && (sender as CheckBox).Checked;

                //Letter value modifiers
                if (sender == AddToLetterLNumberCheckBox)
                {
                    m_client.NumerologySystem.AddToLetterLNumber = check_value;
                }
                else if (sender == AddToLetterWNumberCheckBox)
                {
                    m_client.NumerologySystem.AddToLetterWNumber = check_value;
                }
                else if (sender == AddToLetterVNumberCheckBox)
                {
                    m_client.NumerologySystem.AddToLetterVNumber = check_value;
                }
                else if (sender == AddToLetterCNumberCheckBox)
                {
                    m_client.NumerologySystem.AddToLetterCNumber = check_value;
                }
                else if (sender == AddToLetterLDistanceCheckBox)
                {
                    m_client.NumerologySystem.AddToLetterLDistance = check_value;
                }
                else if (sender == AddToLetterWDistanceCheckBox)
                {
                    m_client.NumerologySystem.AddToLetterWDistance = check_value;
                }
                else if (sender == AddToLetterVDistanceCheckBox)
                {
                    m_client.NumerologySystem.AddToLetterVDistance = check_value;
                }
                else if (sender == AddToLetterCDistanceCheckBox)
                {
                    m_client.NumerologySystem.AddToLetterCDistance = check_value;
                }
                // Word value modifiers
                else if (sender == AddToWordWNumberCheckBox)
                {
                    m_client.NumerologySystem.AddToWordWNumber = check_value;
                }
                else if (sender == AddToWordVNumberCheckBox)
                {
                    m_client.NumerologySystem.AddToWordVNumber = check_value;
                }
                else if (sender == AddToWordCNumberCheckBox)
                {
                    m_client.NumerologySystem.AddToWordCNumber = check_value;
                }
                else if (sender == AddToWordWDistanceCheckBox)
                {
                    m_client.NumerologySystem.AddToWordWDistance = check_value;
                }
                else if (sender == AddToWordVDistanceCheckBox)
                {
                    m_client.NumerologySystem.AddToWordVDistance = check_value;
                }
                else if (sender == AddToWordCDistanceCheckBox)
                {
                    m_client.NumerologySystem.AddToWordCDistance = check_value;
                }
                // Verse value modifiers
                else if (sender == AddToVerseVNumberCheckBox)
                {
                    m_client.NumerologySystem.AddToVerseVNumber = check_value;
                }
                else if (sender == AddToVerseCNumberCheckBox)
                {
                    m_client.NumerologySystem.AddToVerseCNumber = check_value;
                }
                else if (sender == AddToVerseVDistanceCheckBox)
                {
                    m_client.NumerologySystem.AddToVerseVDistance = check_value;
                }
                else if (sender == AddToVerseCDistanceCheckBox)
                {
                    m_client.NumerologySystem.AddToVerseCDistance = check_value;
                }
                // Chapter value modifier
                else if (sender == AddToChapterCNumberCheckBox)
                {
                    m_client.NumerologySystem.AddToChapterCNumber = check_value;
                }

                CalculateCurrentValue();
            }
        }
    }
    private void UpdateNumerologySystem()
    {
        if (m_client != null)
        {
            string text = null;
            switch (m_client.NumerologySystemScope)
            {
                case NumerologySystemScope.Book:
                    {
                        if (m_client.Book != null)
                        {
                            text = m_client.Book.Text;
                        }
                    }
                    break;
                case NumerologySystemScope.Selection:
                    {
                        if (m_client.Selection != null)
                        {
                            text = m_client.Selection.Text;
                        }
                    }
                    break;
                case NumerologySystemScope.HighlightedText:
                    {
                        CalculateCurrentText();
                        text = m_current_text;
                    }
                    break;
                default:
                    break;
            }

            m_client.UpdateNumerologySystem(text);
            // Server has no info about AddTo settings
            // Only letter:value table was updated, so
            // re-apply AddTo settings manually
            UpdateNumerologySystemObject();
        }
    }
    private void LoadNumerologySystem(string numerology_system_name)
    {
        if (m_client != null)
        {
            m_client.LoadNumerologySystem(numerology_system_name);
        }
    }
    private void UpdateNumerologySystemObject()
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                // copy from gui controls to client
                m_client.NumerologySystem.AddToLetterLNumber = AddToLetterLNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToLetterWNumber = AddToLetterWNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToLetterVNumber = AddToLetterVNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToLetterCNumber = AddToLetterCNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToLetterLDistance = AddToLetterLDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToLetterWDistance = AddToLetterWDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToLetterVDistance = AddToLetterVDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToLetterCDistance = AddToLetterCDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToWordWNumber = AddToWordWNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToWordVNumber = AddToWordVNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToWordCNumber = AddToWordCNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToWordWDistance = AddToWordWDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToWordVDistance = AddToWordVDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToWordCDistance = AddToWordCDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToVerseVNumber = AddToVerseVNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToVerseCNumber = AddToVerseCNumberCheckBox.Checked;
                m_client.NumerologySystem.AddToVerseVDistance = AddToVerseVDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToVerseCDistance = AddToVerseCDistanceCheckBox.Checked;
                m_client.NumerologySystem.AddToChapterCNumber = AddToChapterCNumberCheckBox.Checked;
            }
        }
    }
    private void UpdateNumerologySystemControls()
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                try
                {
                    for (int i = 0; i < 3; i++) AddToLetterLNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToLetterWNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToLetterVNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToLetterCNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToLetterLDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToLetterWDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToLetterVDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToLetterCDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToWordWNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToWordVNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToWordCNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToWordWDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToWordVDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToWordCDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToVerseVNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToVerseCNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToVerseVDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToVerseCDistanceCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);
                    for (int i = 0; i < 3; i++) AddToChapterCNumberCheckBox.CheckedChanged -= new EventHandler(AddToControlCheckBox_CheckedChanged);

                    // copy from client to gui controls
                    AddToLetterLNumberCheckBox.Checked = m_client.NumerologySystem.AddToLetterLNumber;
                    AddToLetterWNumberCheckBox.Checked = m_client.NumerologySystem.AddToLetterWNumber;
                    AddToLetterVNumberCheckBox.Checked = m_client.NumerologySystem.AddToLetterVNumber;
                    AddToLetterCNumberCheckBox.Checked = m_client.NumerologySystem.AddToLetterCNumber;
                    AddToLetterLDistanceCheckBox.Checked = m_client.NumerologySystem.AddToLetterLDistance;
                    AddToLetterWDistanceCheckBox.Checked = m_client.NumerologySystem.AddToLetterWDistance;
                    AddToLetterVDistanceCheckBox.Checked = m_client.NumerologySystem.AddToLetterVDistance;
                    AddToLetterCDistanceCheckBox.Checked = m_client.NumerologySystem.AddToLetterCDistance;
                    AddToWordWNumberCheckBox.Checked = m_client.NumerologySystem.AddToWordWNumber;
                    AddToWordVNumberCheckBox.Checked = m_client.NumerologySystem.AddToWordVNumber;
                    AddToWordCNumberCheckBox.Checked = m_client.NumerologySystem.AddToWordCNumber;
                    AddToWordWDistanceCheckBox.Checked = m_client.NumerologySystem.AddToWordWDistance;
                    AddToWordVDistanceCheckBox.Checked = m_client.NumerologySystem.AddToWordVDistance;
                    AddToWordCDistanceCheckBox.Checked = m_client.NumerologySystem.AddToWordCDistance;
                    AddToVerseVNumberCheckBox.Checked = m_client.NumerologySystem.AddToVerseVNumber;
                    AddToVerseCNumberCheckBox.Checked = m_client.NumerologySystem.AddToVerseCNumber;
                    AddToVerseVDistanceCheckBox.Checked = m_client.NumerologySystem.AddToVerseVDistance;
                    AddToVerseCDistanceCheckBox.Checked = m_client.NumerologySystem.AddToVerseCDistance;
                    AddToChapterCNumberCheckBox.Checked = m_client.NumerologySystem.AddToChapterCNumber;
                }
                finally
                {
                    AddToLetterLNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToLetterWNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToLetterVNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToLetterCNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToLetterLDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToLetterWDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToLetterVDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToLetterCDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToWordWNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToWordVNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToWordCNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToWordWDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToWordVDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToWordCDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToVerseVNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToVerseCNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToVerseVDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToVerseCDistanceCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                    AddToChapterCNumberCheckBox.CheckedChanged += new EventHandler(AddToControlCheckBox_CheckedChanged);
                }
            }
        }
    }
    private void UpdateNumerologySystemComboBoxs()
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                try
                {
                    for (int i = 0; i < 3; i++) TextModeComboBox.SelectedIndexChanged -= new EventHandler(TextModeComboBox_SelectedIndexChanged);
                    for (int i = 0; i < 3; i++) NumerologySystemComboBox.SelectedIndexChanged -= new EventHandler(NumerologySystemComboBox_SelectedIndexChanged);

                    TextModeComboBox.SelectedItem = m_client.NumerologySystem.TextMode;
                    PopulateNumerologySystemComboBox();

                    for (int i = 0; i < 3; i++) NumerologySystemComboBox.SelectedIndexChanged -= new EventHandler(NumerologySystemComboBox_SelectedIndexChanged);
                    NumerologySystemComboBox.SelectedItem = m_client.NumerologySystem.LetterOrder + "_" + m_client.NumerologySystem.LetterValue;

                    UpdateKeyboard(m_client.NumerologySystem.TextMode);

                    switch (m_client.NumerologySystemScope)
                    {
                        case NumerologySystemScope.Book:
                            {
                                ScopeBookRadioButton.Checked = true;
                            }
                            break;
                        case NumerologySystemScope.Selection:
                            {
                                ScopeSelectionRadioButton.Checked = true;
                            }
                            break;
                        case NumerologySystemScope.HighlightedText:
                            {
                                ScopeHighlightedTextRadioButton.Checked = true;
                            }
                            break;
                        default:
                            break;
                    }
                }
                finally
                {
                    TextModeComboBox.SelectedIndexChanged += new EventHandler(TextModeComboBox_SelectedIndexChanged);
                    NumerologySystemComboBox.SelectedIndexChanged += new EventHandler(NumerologySystemComboBox_SelectedIndexChanged);
                }
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Value Calculations
    ///////////////////////////////////////////////////////////////////////////////
    private void PopulateTextModeComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) TextModeComboBox.SelectedIndexChanged -= new EventHandler(TextModeComboBox_SelectedIndexChanged);

            if (m_client != null)
            {
                if (m_client.LoadedNumerologySystems != null)
                {
                    TextModeComboBox.BeginUpdate();

                    TextModeComboBox.Items.Clear();
                    foreach (NumerologySystem numerology_system in m_client.LoadedNumerologySystems.Values)
                    {
                        string[] parts = numerology_system.Name.Split('_');
                        if (parts != null)
                        {
                            if (parts.Length == 3)
                            {
                                string text_mode = parts[0];
                                if (!TextModeComboBox.Items.Contains(text_mode))
                                {
                                    TextModeComboBox.Items.Add(text_mode);
                                }
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            TextModeComboBox.EndUpdate();
            TextModeComboBox.SelectedIndexChanged += new EventHandler(TextModeComboBox_SelectedIndexChanged);
        }
    }
    private void PopulateNumerologySystemComboBox()
    {
        try
        {
            for (int i = 0; i < 3; i++) NumerologySystemComboBox.SelectedIndexChanged -= new EventHandler(NumerologySystemComboBox_SelectedIndexChanged);

            if (m_client != null)
            {
                if (m_client.LoadedNumerologySystems != null)
                {
                    NumerologySystemComboBox.BeginUpdate();

                    if (TextModeComboBox.SelectedItem != null)
                    {
                        string text_mode = TextModeComboBox.SelectedItem.ToString();

                        NumerologySystemComboBox.Items.Clear();
                        foreach (NumerologySystem numerology_system in m_client.LoadedNumerologySystems.Values)
                        {
                            string[] parts = numerology_system.Name.Split('_');
                            if (parts != null)
                            {
                                if (parts.Length == 3)
                                {
                                    if (parts[0] == text_mode)
                                    {
                                        string valuation_system = parts[1] + "_" + parts[2];
                                        if (!NumerologySystemComboBox.Items.Contains(valuation_system))
                                        {
                                            NumerologySystemComboBox.Items.Add(valuation_system);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            NumerologySystemComboBox.EndUpdate();
            NumerologySystemComboBox.SelectedIndexChanged += new EventHandler(NumerologySystemComboBox_SelectedIndexChanged);
        }
    }
    private void TextModeComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (m_client != null)
            {
                if (m_client.NumerologySystem != null)
                {
                    string backup_valuation_system = null;
                    if (NumerologySystemComboBox.SelectedItem != null)
                    {
                        backup_valuation_system = NumerologySystemComboBox.SelectedItem.ToString();
                    }

                    BuildSimplifiedBookAndDisplaySelection();

                    PopulateNumerologySystemComboBox();
                    if (NumerologySystemComboBox.Items.Count > 0)
                    {
                        if (backup_valuation_system != null)
                        {
                            if (NumerologySystemComboBox.Items.Contains(backup_valuation_system))
                            {
                                NumerologySystemComboBox.SelectedItem = backup_valuation_system;
                            }
                            else
                            {
                                NumerologySystemComboBox.SelectedIndex = 0;
                            }
                        }
                        else
                        {
                            NumerologySystemComboBox.SelectedIndex = 0;
                        }
                    }
                    else
                    {
                        NumerologySystemComboBox.SelectedIndex = -1;
                    }
                }
            }
        }
        finally
        {
            UpdateKeyboard(m_client.NumerologySystem.TextMode);
            UpdateTextModeOptions();
        }
    }
    private void UpdateTextModeOptions()
    {
        if (TextModeComboBox.SelectedItem != null)
        {
            try
            {
                for (int i = 0; i < 3; i++) WithBismAllahCheckBox.CheckedChanged -= new EventHandler(WithBismAllahCheckBox_CheckedChanged);
                for (int i = 0; i < 3; i++) WawAsWordCheckBox.CheckedChanged -= new EventHandler(WawAsWordCheckBox_CheckedChanged);
                for (int i = 0; i < 3; i++) ShaddaAsLetterCheckBox.CheckedChanged -= new EventHandler(ShaddaAsLetterCheckBox_CheckedChanged);

                string text_mode = TextModeComboBox.SelectedItem.ToString();
                if (text_mode == "Original")
                {
                    m_with_bism_Allah = true;
                    m_waw_as_word = false;
                    m_shadda_as_letter = false;
                }
                WithBismAllahCheckBox.Checked = m_with_bism_Allah;
                WawAsWordCheckBox.Checked = m_waw_as_word;
                ShaddaAsLetterCheckBox.Checked = m_shadda_as_letter;

                WithBismAllahCheckBox.Enabled = (text_mode != "Original");
                WawAsWordCheckBox.Enabled = (text_mode != "Original");
                ShaddaAsLetterCheckBox.Enabled = (text_mode != "Original");

                WithBismAllahCheckBox.Refresh();
                WawAsWordCheckBox.Refresh();
                ShaddaAsLetterCheckBox.Refresh();
            }
            finally
            {
                WithBismAllahCheckBox.CheckedChanged += new EventHandler(WithBismAllahCheckBox_CheckedChanged);
                WawAsWordCheckBox.CheckedChanged += new EventHandler(WawAsWordCheckBox_CheckedChanged);
                ShaddaAsLetterCheckBox.CheckedChanged += new EventHandler(ShaddaAsLetterCheckBox_CheckedChanged);
            }
        }
    }
    private void TextModeComboBox_DropDown(object sender, EventArgs e)
    {
        TextModeComboBox.DropDownHeight = StatisticsGroupBox.Height - TextModeComboBox.Top - TextModeComboBox.Height - 1;
    }
    private bool m_with_bism_Allah = true;
    private void WithBismAllahCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_with_bism_Allah = WithBismAllahCheckBox.Checked;
        BuildSimplifiedBookAndDisplaySelection();
    }
    private bool m_waw_as_word = false;
    private void WawAsWordCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_waw_as_word = WawAsWordCheckBox.Checked;
        BuildSimplifiedBookAndDisplaySelection();
    }
    private bool m_shadda_as_letter = false;
    private void ShaddaAsLetterCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_shadda_as_letter = ShaddaAsLetterCheckBox.Checked;
        BuildSimplifiedBookAndDisplaySelection();
    }
    private void BuildSimplifiedBookAndDisplaySelection()
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (TextModeComboBox.SelectedItem != null)
            {
                string text_mode = TextModeComboBox.SelectedItem.ToString();

                if (m_client != null)
                {
                    if (m_client.Book != null)
                    {
                        // ALWAYS rebuild book to allow user to edit SimplificationRules file in Notepad and update text on the fly
                        //if ((m_client.Book.TextMode != text_mode) ||
                        //    (m_client.Book.WithBismAllah != m_with_bism_Allah) ||
                        //    (m_client.Book.WawAsWord != m_waw_as_word) ||
                        //    (m_client.Book.ShaddaAsLetter != m_shadda_as_letter)
                        //   )
                        {
                            m_client.BuildSimplifiedBook(text_mode, m_with_bism_Allah, m_waw_as_word, m_shadda_as_letter);

                            bool backup_found_verses_displayed = m_found_verses_displayed;

                            if ((Chapter.SortMethod == ChapterSortMethod.ByCompilation) && (Chapter.SortOrder == ChapterSortOrder.Ascending))
                            {
                                DisplaySelection(false);
                            }
                            else
                            {
                                // book is already created in Compilation Ascending order
                                Chapter.SortMethod = ChapterSortMethod.ByCompilation;
                                Chapter.SortOrder = ChapterSortOrder.Ascending;
                                Chapter.PinChapter1 = false;
                                m_chapter_sort_method = Chapter.SortMethod;
                                m_chapter_sort_order = Chapter.SortOrder;
                                m_pin_chapter1 = Chapter.PinChapter1;
                                UpdateChapterSortControls();
                                DisplaySortedChapters();
                            }

                            // re-display search result if that was shown when text_mode was changed
                            if (backup_found_verses_displayed)
                            {
                                DisplayFoundVerses(false, false);

                                SearchResultTextBox.Focus();
                                SearchResultTextBox.Refresh();
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void NumerologySystemComboBox_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            for (int i = 0; i < 3; i++) NumerologySystemComboBox.SelectedIndexChanged -= new EventHandler(NumerologySystemComboBox_SelectedIndexChanged);

            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    if (m_client.NumerologySystem != null)
                    {
                        if (TextModeComboBox.SelectedItem != null)
                        {
                            if (NumerologySystemComboBox.SelectedItem != null)
                            {
                                string text_mode = TextModeComboBox.SelectedItem.ToString();
                                string valuation_system = NumerologySystemComboBox.SelectedItem.ToString();
                                string numerology_system_name = text_mode + "_" + valuation_system;

                                LoadNumerologySystem(numerology_system_name);

                                CalculateCurrentValue();

                                BuildLetterFrequencies();
                                DisplayLetterFrequencies();

                                // re-sort chapters if sorted by Value
                                if (Chapter.SortMethod == ChapterSortMethod.ByValue)
                                {
                                    if (m_client.Book != null)
                                    {
                                        m_client.Book.SortChapters(m_chapter_sort_method, m_chapter_sort_order, m_pin_chapter1);

                                        // display chapters in new order
                                        DisplaySortedChapters();
                                    }
                                }

                                if (m_selection_mode)
                                {
                                    if (m_golden_ratio_scope != GoldenRatioScope.None)
                                    {
                                        if (m_golden_ratio_type == GoldenRatioType.Value)
                                        {
                                            if (text_mode == "Original")
                                            {
                                                ColorizeGoldenRatiosInOriginalText();
                                            }
                                            else
                                            {
                                                ColorizeGoldenRatiosInSimplifiedText();
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            NumerologySystemComboBox.SelectedIndexChanged += new EventHandler(NumerologySystemComboBox_SelectedIndexChanged);
        }
    }
    private void NumerologySystemComboBox_DropDown(object sender, EventArgs e)
    {
        NumerologySystemComboBox.DropDownHeight = StatisticsGroupBox.Height - NumerologySystemComboBox.Top - NumerologySystemComboBox.Height - 1;
        //NumerologySystemComboBox.DropDownWidth = StatisticsGroupBox.Width - NumerologySystemComboBox.Left - 1;
    }
    private void EditNumerologySystemLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                if (m_client.NumerologySystem != null)
                {
                    // display the NumerologySystem file for live editing using ISubscriber
                    string filename = Globals.VALUES_FOLDER + "/" + m_client.NumerologySystem.Name + ".txt";
                    if (File.Exists(filename))
                    {
                        FileHelper.WaitForReady(filename);

                        System.Diagnostics.Process.Start("Notepad.exe", filename);
                    }
                }
            }

            NumerologySystemComboBox.Focus();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }

    private void CalculateCurrentValue()
    {
        if (m_active_textbox != null)
        {
            if (m_client != null)
            {
                if ((Globals.EDITION == Edition.Research) || (Globals.EDITION == Edition.Ultimate))
                {
                    UpdateNumerologySystem();
                }

                CalculateCurrentText();
                if (!String.IsNullOrEmpty(m_current_text))
                {
                    if (m_user_text_mode)
                    {
                        if (UserTextTextBox.SelectionLength == 0) // get text at current line
                        {
                            CalculateUserTextValue(m_caret_position);
                        }
                        else // get current selected text
                        {
                            m_current_text = UserTextTextBox.SelectedText;
                        }
                        CalculateValueAndDisplayFactors(m_current_text);
                    }
                    else
                    {
                        if (m_selection_mode)
                        {
                            if (m_found_verses_displayed)
                            {
                                if (m_client.FoundVerses != null)
                                {
                                    CalculateAndDisplayCounts(m_client.FoundVerses);
                                    CalculateValueAndDisplayFactors(m_client.FoundVerses);
                                }
                            }
                            else
                            {
                                if (m_client.Selection != null)
                                {
                                    if (m_client.Selection.Verses != null)
                                    {
                                        CalculateAndDisplayCounts(m_client.Selection.Verses);
                                        CalculateValueAndDisplayFactors(m_client.Selection.Verses);
                                    }
                                }
                            }
                        }
                        else // cursor inside line OR some text is highlighted
                        {
                            if (m_active_textbox.SelectionLength == 0) // cursor inside line
                            {
                                if (m_translation_readonly)
                                {
                                    Verse verse = GetCurrentVerse();
                                    if (verse != null)
                                    {
                                        if (m_total_chapter_counts)
                                        {
                                            if (m_found_verses_displayed)
                                            {
                                                if (m_client.FoundVerses != null)
                                                {
                                                    CalculateAndDisplayCounts(m_client.FoundVerses);
                                                }
                                            }
                                            else
                                            {
                                                if (m_client.Selection != null)
                                                {
                                                    if (m_client.Selection.Verses != null)
                                                    {
                                                        CalculateAndDisplayCounts(m_client.Selection.Verses);
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            CalculateAndDisplayCounts(verse);
                                        }
                                        CalculateValueAndDisplayFactors(verse);
                                    }
                                }
                                else // edit mode so user can paste any text they like to calculate its value
                                {
                                    CalculateValueAndDisplayFactors(m_current_text);
                                }
                            }
                            else // some text is selected
                            {
                                if (m_translation_readonly)
                                {
                                    CalculateSelectedTextValue();
                                }
                                else // edit mode so user can paste any text they like to calculate its value
                                {
                                    CalculateValueAndDisplayFactors(m_current_text);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    private bool m_user_text_mode = false;
    private void CalculateCurrentText()
    {
        if (m_active_textbox != null)
        {
            if (m_user_text_mode)
            {
                if (UserTextTextBox.SelectionLength == 0) // get text at current line
                {
                    CalculateUserTextValue(m_caret_position);
                }
                else // get current selected text
                {
                    m_current_text = UserTextTextBox.SelectedText;
                }
            }
            else
            {
                if (m_selection_mode)
                {
                    m_current_text = m_active_textbox.Text;
                }
                else
                {
                    if (m_active_textbox.SelectionLength == 0) // get text at current line
                    {
                        Verse verse = GetCurrentVerse();
                        if (verse != null)
                        {
                            m_current_text = verse.Text;
                        }
                        else
                        {
                            m_current_text = "";
                        }
                    }
                    else // get current selected text
                    {
                        m_current_text = m_active_textbox.SelectedText;
                    }
                }

                if (!String.IsNullOrEmpty(m_current_text))
                {
                    m_current_text = RemoveVerseAddresses(m_current_text);
                    m_current_text = RemoveVerseEndMarks(m_current_text);
                    m_current_text = m_current_text.Trim();
                    m_current_text = m_current_text.Replace("\n", "\r\n");
                }
            }
        }
    }
    private void CalculateSelectedTextValue()
    {
        if (m_active_textbox != null)
        {
            if (m_client != null)
            {
                string selected_text = m_active_textbox.SelectedText;

                int first_char = m_active_textbox.SelectionStart;
                int last_char = first_char + m_active_textbox.SelectionLength - 1;

                // skip any \n at beginning of selected text
                // skip any Endmark at beginning of selected text
                while (
                        (selected_text.Length > 0) &&
                        (
                          (selected_text[0] == '\n') ||
                          (selected_text[0] == '\r') ||
                          (selected_text[0] == '\t') ||
                          (selected_text[0] == '_') ||
                          (selected_text[0] == ' ') ||
                          (selected_text[0] == Constants.OPEN_BRACKET[0]) ||
                          (selected_text[0] == Constants.CLOSE_BRACKET[0]) ||
                          Constants.INDIAN_DIGITS.Contains(selected_text[0]) ||
                          Constants.STOPMARKS.Contains(selected_text[0]) ||
                          Constants.QURANMARKS.Contains(selected_text[0])
                        )
                      )
                {
                    selected_text = selected_text.Remove(0, 1);
                    first_char++;
                }

                // skip any \n at end of selected text
                // skip any Endmark at end of selected text
                while (
                        (selected_text.Length > 0) &&
                        (
                          (selected_text[selected_text.Length - 1] == '\n') ||
                          (selected_text[selected_text.Length - 1] == '\r') ||
                          (selected_text[selected_text.Length - 1] == '\t') ||
                          (selected_text[selected_text.Length - 1] == '_') ||
                          (selected_text[selected_text.Length - 1] == ' ') ||
                          (selected_text[selected_text.Length - 1] == Constants.OPEN_BRACKET[0]) ||
                          (selected_text[selected_text.Length - 1] == Constants.CLOSE_BRACKET[0]) ||
                          (selected_text[selected_text.Length - 1] == ' ') ||
                          Constants.INDIAN_DIGITS.Contains(selected_text[selected_text.Length - 1]) ||
                          Constants.STOPMARKS.Contains(selected_text[selected_text.Length - 1]) ||
                          Constants.QURANMARKS.Contains(selected_text[selected_text.Length - 1])
                        )
                      )
                {
                    selected_text = selected_text.Remove(selected_text.Length - 1);
                    last_char--;
                }

                List<Verse> highlighted_verses = new List<Verse>();
                Verse first_verse = GetVerseAtChar(first_char);
                if (first_verse != null)
                {
                    Verse last_verse = GetVerseAtChar(last_char);
                    if (last_verse != null)
                    {
                        List<Verse> verses = null;
                        if (m_found_verses_displayed)
                        {
                            verses = m_client.FoundVerses;
                        }
                        else
                        {
                            if (m_client.Selection != null)
                            {
                                verses = m_client.Selection.Verses;
                            }
                        }

                        if (verses != null)
                        {
                            int first_verse_index = GetVerseIndex(first_verse);
                            int last_verse_index = GetVerseIndex(last_verse);
                            for (int i = first_verse_index; i <= last_verse_index; i++)
                            {
                                highlighted_verses.Add(verses[i]);
                            }

                            Letter letter1 = GetLetterAtChar(first_char);
                            if (letter1 != null)
                            {
                                int first_verse_letter_index = letter1.NumberInVerse - 1;

                                Letter letter2 = GetLetterAtChar(last_char);
                                if (letter2 != null)
                                {
                                    int last_verse_letter_index = letter2.NumberInVerse - 1;

                                    // calculate and display verse_number_sum, word_number_sum, letter_number_sum
                                    if ((Globals.EDITION == Edition.Standard) || (Globals.EDITION == Edition.Grammar))
                                    {
                                        CalculateAndDisplayCounts(highlighted_verses, first_verse_letter_index, last_verse_letter_index);
                                    }
                                    else // Research and Ultimate Editions
                                    {
                                        int stopmarks = 0;
                                        int quranmarks = 0;
                                        for (int i = 0; i < selected_text.Length; i++)
                                        {
                                            if (Constants.STOPMARKS.Contains(selected_text[i]))
                                            {
                                                // superscript Seen letter in words وَيَبْصُۜطُ and بَصْۜطَةًۭ are not stopmarks
                                                // Quran 2:245  مَّن ذَا ٱلَّذِى يُقْرِضُ ٱللَّهَ قَرْضًا حَسَنًۭا فَيُضَٰعِفَهُۥ لَهُۥٓ أَضْعَافًۭا كَثِيرَةًۭ ۚ وَٱللَّهُ يَقْبِضُ وَيَبْصُۜطُ وَإِلَيْهِ تُرْجَعُونَ
                                                // Quran 7:69  أَوَعَجِبْتُمْ أَن جَآءَكُمْ ذِكْرٌۭ مِّن رَّبِّكُمْ عَلَىٰ رَجُلٍۢ مِّنكُمْ لِيُنذِرَكُمْ ۚ وَٱذْكُرُوٓا۟ إِذْ جَعَلَكُمْ خُلَفَآءَ مِنۢ بَعْدِ قَوْمِ نُوحٍۢ وَزَادَكُمْ فِى ٱلْخَلْقِ بَصْۜطَةًۭ ۖ فَٱذْكُرُوٓا۟ ءَالَآءَ ٱللَّهِ لَعَلَّكُمْ تُفْلِحُونَ
                                                if (i < selected_text.Length - 1)
                                                {
                                                    if ((selected_text[i] == 'ۜ') && (Constants.DIACRITICS.Contains(selected_text[i + 1])))
                                                    {
                                                        continue;
                                                    }
                                                }

                                                stopmarks++;
                                            }
                                            else if (Constants.QURANMARKS.Contains(selected_text[i]))
                                            {
                                                quranmarks++;
                                            }
                                            else continue;
                                        }

                                        CalculateAndDisplayCounts(highlighted_verses, first_verse_letter_index, last_verse_letter_index, stopmarks, quranmarks);
                                    }

                                    // calculate Letters value
                                    CalculateValueAndDisplayFactors(highlighted_verses, first_verse_letter_index, last_verse_letter_index);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    private string RemoveVerseAddresses(string text)
    {
        if (string.IsNullOrEmpty(text)) return null;

        string[] lines = text.Split('\n');
        StringBuilder str = new StringBuilder();
        foreach (string line in lines)
        {
            if (line.Length > 0)
            {
                string[] line_parts = line.Split('\t'); // (TAB delimited)
                if (line_parts.Length > 1) // has address
                {
                    str.Append(line_parts[1] + "\n");  // remove verse address
                }
                else if (line_parts.Length > 0)
                {
                    str.Append(line_parts[0] + "\n");  // leave it as it is
                }
            }
        }
        if (str.Length > 1)
        {
            str.Remove(str.Length - 1, 1);
        }
        return str.ToString();
    }
    private string RemoveVerseEndMarks(string text)
    {
        // RTL script misplaces brackets
        return text; // do nothing for now

        //if (string.IsNullOrEmpty(text)) return null;
        //while (text.Contains(Verse.OPEN_BRACKET) || text.Contains(Verse.CLOSE_BRACKET))
        //{
        //    int start = text.IndexOf(Verse.OPEN_BRACKET);
        //    int end = text.IndexOf(Verse.CLOSE_BRACKET);
        //    if ((start >= 0) && (end >= 0))
        //    {
        //        if (start < end)
        //        {
        //            text = text.Remove(start, (end - start) + 1); // remove space after it
        //        }
        //        else // Arabic script misplaces brackets
        //        {
        //            text = text.Remove(end, (start - end) + 1); // remove space after it
        //        }
        //    }
        //}
        //return text;
    }

    // used for non-Quran text
    private void CalculateValueAndDisplayFactors(string user_text)
    {
        if (m_client != null)
        {
            long value = m_client.CalculateValue(user_text);
            FactorizeValue(value, "Text", false);
        }
    }
    // used for Quran text only
    private void CalculateValueAndDisplayFactors(Verse verse)
    {
        if (m_client != null)
        {
            long value = m_client.CalculateValue(verse);
            FactorizeValue(value, "Value", false);
        }
    }
    private void CalculateValueAndDisplayFactors(List<Verse> verses)
    {
        if (m_client != null)
        {
            long value = m_client.CalculateValue(verses);
            FactorizeValue(value, "Value", false);
        }
    }
    private void CalculateValueAndDisplayFactors(Chapter chapter)
    {
        if (m_client != null)
        {
            long value = m_client.CalculateValue(chapter);
            FactorizeValue(value, "Value", false);
        }
    }
    private void CalculateValueAndDisplayFactors(List<Verse> verses, int letter_index_in_verse1, int letter_index_in_verse2)
    {
        if (m_client != null)
        {
            long value = m_client.CalculateValue(verses, letter_index_in_verse1, letter_index_in_verse2);
            FactorizeValue(value, "Value", false);
        }
    }

    private void ValueTextBox_TextChanged(object sender, EventArgs e)
    {
        int digits = Numbers.DigitCount(ValueTextBox.Text, m_radix);
        ValueInspectLabel.Text = digits.ToString();

        int digit_sum = Numbers.DigitSum(ValueTextBox.Text);
        DigitSumTextBox.Text = digit_sum.ToString();
        DigitSumTextBox.ForeColor = GetNumberTypeColor(digit_sum);
        DigitSumTextBox.Refresh();

        int digital_root = Numbers.DigitalRoot(ValueTextBox.Text);
        DigitalRootTextBox.Text = digital_root.ToString();
        DigitalRootTextBox.ForeColor = GetNumberTypeColor(digital_root);
        DigitalRootTextBox.Refresh();
    }
    private void ValueTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (ModifierKeys == Keys.Control)
        {
            if (e.KeyCode == Keys.A)
            {
                if (sender is TextBoxBase)
                {
                    (sender as TextBoxBase).SelectAll();
                }
            }
            else if (e.KeyCode == Keys.Up)
            {
                IncrementValue();
            }
            else if (e.KeyCode == Keys.Down)
            {
                DecrementValue();
            }
        }
        else if (e.KeyCode == Keys.Enter)
        {
            CalculateExpression();
        }
        else
        {
            ValueTextBox.ForeColor = Color.DarkGray;
        }
    }
    private void IncrementValue()
    {
        long value = 0L;
        if (long.TryParse(ValueTextBox.Text, out value))
        {
            if (value < long.MaxValue) value++;
            ValueTextBox.Text = value.ToString();
            FactorizeValue(value, "User", true);
        }
    }
    private void DecrementValue()
    {
        long value = 0L;
        if (long.TryParse(ValueTextBox.Text, out value))
        {
            if (value > 0) value--;
            ValueTextBox.Text = value.ToString();
            FactorizeValue(value, "User", true);
        }
    }
    private void CalculateExpression()
    {
        if (m_client != null)
        {
            string expression = ValueTextBox.Text;

            long value = 0L;
            if (long.TryParse(expression, out value))
            {
                m_double_value = (double)value;
                FactorizeValue(value, "Number", true);
            }
            else if (expression.IsArabic() || ((m_radix <= 10) && expression.IsEnglish()))
            {
                m_double_value = m_client.CalculateValue(expression);
                value = (long)Math.Round(m_double_value);
                FactorizeValue(value, "Text" + expression, true); // user_text
            }
            else
            {
                m_double_value = DoCalculateExpression(expression, m_radix);
                value = (long)Math.Round(m_double_value);
                FactorizeValue(value, "Math", true);
            }

            // if result has fraction, display it as is
            // PrimeFactorsTextBox_DoubleClick will toggle it back to long
            if (m_double_value != value)
            {
                PrimeFactorsTextBox.Text = m_double_value.ToString();
            }
        }
    }
    private double m_double_value = 0.0D;
    private bool m_double_value_displayed = false;
    private void PrimeFactorsTextBox_DoubleClick(object sender, EventArgs e)
    {
        // toggle double_value <--> prime factors
        if (m_double_value_displayed)
        {
            try
            {
                // display prime factors
                m_double_value = double.Parse(PrimeFactorsTextBox.Text);
                long value = (long)Math.Round(m_double_value);
                FactorizeValue(value, "Math", true);
                m_double_value_displayed = false;
            }
            catch
            {
                // silence error and do nothing
            }
        }
        else // m_double_value_displayed == false
        {
            if (ValueLabel.Text == "Formula")
            {
                // display double_value
                PrimeFactorsTextBox.Text = m_double_value.ToString();
                m_double_value_displayed = true;
            }
            else
            {
                // do nothing
            }
        }
    }
    private string CalculateExpression(string expression, long radix)
    {
        try
        {
            return Evaluator.Evaluate(expression, radix);
        }
        catch
        {
            return expression;
        }
    }
    private double DoCalculateExpression(string expression, long radix)
    {
        double result = 0D;
        if (m_client != null)
        {
            try
            {
                result = Radix.Decode(expression, radix);
                this.ToolTip.SetToolTip(this.ValueTextBox, result.ToString());
            }
            catch // if expression
            {
                string text = CalculateExpression(expression, radix);
                this.ToolTip.SetToolTip(this.ValueTextBox, text); // display the decimal expansion

                try
                {
                    result = double.Parse(text);
                }
                catch
                {
                    try
                    {
                        result = m_client.CalculateValue(expression);
                    }
                    catch // text
                    {
                        //result = m_client.CalculateValue(expression);
                    }
                }
            }
        }
        return result;
    }
    private void FactorizeValue(long value, string caption, bool overwrite)
    {
        try
        {
            m_double_value_displayed = false;

            if (caption.StartsWith("Text")) // user_text
            {
                ValueLabel.Text = "Text";
                ValueLabel.Refresh();

                this.ToolTip.SetToolTip(this.ValueTextBox, "Value of  " + caption.Substring(4));
            }
            else
            {
                ValueLabel.Text = caption;
                ValueLabel.Refresh();

                if (caption == "Value")
                {
                    this.ToolTip.SetToolTip(this.ValueTextBox, "Selection value  القيمة حسب نظام الترقيم الحالي");
                }
                else if (caption == "Number")
                {
                    this.ToolTip.SetToolTip(this.ValueTextBox, "User number");
                }
                else if (caption == "Expression")
                {
                    this.ToolTip.SetToolTip(this.ValueTextBox, "Math expression");
                    m_double_value_displayed = true;
                }
                else
                {
                    this.ToolTip.SetToolTip(this.ValueTextBox, caption);
                }
            }

            // remove previous displayed results
            DigitSumTextBox.Text = "";
            DigitalRootTextBox.Text = "";
            PrimeFactorsTextBox.Text = "";
            NthNumberTextBox.Text = "";
            NthAdditiveNumberTextBox.Text = "";
            NthNonAdditiveNumberTextBox.Text = "";
            SquareSumTextBox.Text = "";
            SquareDiffTextBox.Text = "";
            PCIndexChainL2RTextBox.Text = "";
            PCIndexChainR2LTextBox.Text = "";
            CPIndexChainL2RTextBox.Text = "";
            CPIndexChainR2LTextBox.Text = "";
            IndexChainLengthTextBox.Text = "";
            DigitSumTextBox.Refresh();
            DigitalRootTextBox.Refresh();
            PrimeFactorsTextBox.Refresh();
            NthNumberTextBox.Refresh();
            NthAdditiveNumberTextBox.Refresh();
            NthNonAdditiveNumberTextBox.Refresh();
            SquareSumTextBox.Refresh();
            SquareDiffTextBox.Refresh();
            NumberKindIndexTextBox.Text = "";
            NumberKindIndexTextBox.Refresh();
            SumOfDivisorsTextBox.Text = "";
            SumOfDivisorsTextBox.Refresh();
            SumOfProperDivisorsTextBox.Text = "";
            SumOfProperDivisorsTextBox.Refresh();
            PCIndexChainL2RTextBox.Refresh();
            PCIndexChainR2LTextBox.Refresh();
            CPIndexChainL2RTextBox.Refresh();
            CPIndexChainR2LTextBox.Refresh();
            IndexChainLengthTextBox.Refresh();

            // if there is a math expression, add to it, don't overwrite it
            if (!overwrite &&
                 (
                   (ValueTextBox.Text.EndsWith("+")) ||
                   (ValueTextBox.Text.EndsWith("-")) ||
                   (ValueTextBox.Text.EndsWith("*")) ||
                   (ValueTextBox.Text.EndsWith("/")) ||
                   (ValueTextBox.Text.EndsWith("^")) ||
                   (ValueTextBox.Text.EndsWith("%"))
                 )
               )
            {
                ValueLabel.Text = "Expression";
                ValueTextBox.Text += Radix.Encode(value, m_radix);

                ValueTextBox.SelectionLength = 0;
                ValueTextBox.SelectionStart = ValueTextBox.Text.Length;
                // focus so user can continue with +, -, *, /, ^, %, Enter
                ValueTextBox.Focus();
            }
            else
            {
                ValueTextBox.Text = Radix.Encode(value, m_radix);
                ValueTextBox.ForeColor = GetNumberTypeColor(value);
                ValueTextBox.SelectionStart = ValueTextBox.Text.Length;
                ValueTextBox.SelectionLength = 0;
                ValueTextBox.Refresh();

                DecimalValueTextBox.Text = value.ToString();
                DecimalValueTextBox.Visible = (m_radix != DEFAULT_RADIX);
                DecimalValueTextBox.ForeColor = GetNumberTypeColor(value);
                DecimalValueTextBox.Refresh();

                DigitSumTextBox.Text = Numbers.DigitSum(value).ToString();
                DigitSumTextBox.ForeColor = GetNumberTypeColor(Numbers.DigitSum(value));
                DigitSumTextBox.Refresh();

                DigitalRootTextBox.Text = Numbers.DigitalRoot(value).ToString();
                DigitalRootTextBox.ForeColor = GetNumberTypeColor(Numbers.DigitalRoot(value));
                DigitalRootTextBox.Refresh();

                string factors_str = Numbers.FactorizeToString(value);
                PrimeFactorsTextBox.Text = factors_str;
                PrimeFactorsTextBox.BackColor = (Numbers.Compare(value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
                PrimeFactorsTextBox.Refresh();

                int nth_number_index = 0;
                int nth_additive_number_index = 0;
                int nth_non_additive_number_index = 0;
                if (Numbers.IsPrime(value))
                {
                    m_index_type = IndexType.Prime;
                    nth_number_index = Numbers.PrimeIndexOf(value) + 1;
                    nth_additive_number_index = Numbers.AdditivePrimeIndexOf(value) + 1;
                    nth_non_additive_number_index = Numbers.NonAdditivePrimeIndexOf(value) + 1;
                    NthNumberTextBox.BackColor = (nth_additive_number_index > 0) ? Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.AdditivePrime] : Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.NonAdditivePrime];
                    NthAdditiveNumberTextBox.BackColor = Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.AdditivePrime];
                    NthNonAdditiveNumberTextBox.BackColor = Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.NonAdditivePrime];
                    ToolTip.SetToolTip(NthNumberTextBox, "Prime index");
                    ToolTip.SetToolTip(NthAdditiveNumberTextBox, "Additive prime index");
                    ToolTip.SetToolTip(NthNonAdditiveNumberTextBox, "Non-additive prime index");
                }
                else // any other index type will be treated as IndexNumberType.Composite
                {
                    m_index_type = IndexType.Composite;
                    nth_number_index = Numbers.CompositeIndexOf(value) + 1;
                    nth_additive_number_index = Numbers.AdditiveCompositeIndexOf(value) + 1;
                    nth_non_additive_number_index = Numbers.NonAdditiveCompositeIndexOf(value) + 1;
                    NthNumberTextBox.BackColor = (nth_additive_number_index > 0) ? Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.AdditiveComposite] : Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.NonAdditiveComposite];
                    NthAdditiveNumberTextBox.BackColor = Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.AdditiveComposite];
                    NthNonAdditiveNumberTextBox.BackColor = Numbers.NUMBER_TYPE_BACKCOLORS[(int)NumberType.NonAdditiveComposite];
                    ToolTip.SetToolTip(NthNumberTextBox, "Composite index");
                    ToolTip.SetToolTip(NthAdditiveNumberTextBox, "Additive composite index");
                    ToolTip.SetToolTip(NthNonAdditiveNumberTextBox, "Non-additive composite index");
                }
                NthNumberTextBox.Text = (nth_number_index > 0) ? nth_number_index.ToString() : "";
                NthNumberTextBox.ForeColor = GetNumberTypeColor(nth_number_index);
                NthNumberTextBox.Refresh();
                NthAdditiveNumberTextBox.Text = (nth_additive_number_index > 0) ? nth_additive_number_index.ToString() : "";
                NthAdditiveNumberTextBox.ForeColor = GetNumberTypeColor(nth_additive_number_index);
                NthAdditiveNumberTextBox.Refresh();
                NthNonAdditiveNumberTextBox.Text = (nth_non_additive_number_index > 0) ? nth_non_additive_number_index.ToString() : "";
                NthNonAdditiveNumberTextBox.ForeColor = GetNumberTypeColor(nth_non_additive_number_index);
                NthNonAdditiveNumberTextBox.Refresh();

                string squares1_str = "";
                string squares2_str = "";
                if (Numbers.IsUnit(value) || Numbers.IsPrime(value))
                {
                    squares1_str = Numbers.Get4nPlus1EqualsSumOfTwoSquares(value);
                    squares2_str = Numbers.Get4nPlus1EqualsDiffOfTwoSquares(value);
                }
                else //if composite
                {
                    squares1_str = Numbers.Get4nPlus1EqualsDiffOfTwoSquares(value);
                    squares2_str = Numbers.Get4nPlus1EqualsDiffOfTwoSquares2(value);
                }
                SquareSumTextBox.Text = squares1_str;
                SquareSumTextBox.Refresh();
                SquareDiffTextBox.Text = squares2_str;
                SquareDiffTextBox.Refresh();

                UpdateNumberKind(value);
                UpdateSumOfDivisors(value);

                PCIndexChainL2RTextBox.Text = DecimalPCIndexChainL2R(value).ToString();
                PCIndexChainL2RTextBox.ForeColor = GetNumberTypeColor(DecimalPCIndexChainL2R(value));
                PCIndexChainL2RTextBox.Refresh();
                PCIndexChainR2LTextBox.Text = DecimalPCIndexChainR2L(value).ToString();
                PCIndexChainR2LTextBox.ForeColor = GetNumberTypeColor(DecimalPCIndexChainR2L(value));
                PCIndexChainR2LTextBox.Refresh();
                CPIndexChainL2RTextBox.Text = DecimalCPIndexChainL2R(value).ToString();
                CPIndexChainL2RTextBox.ForeColor = GetNumberTypeColor(DecimalCPIndexChainL2R(value));
                CPIndexChainL2RTextBox.Refresh();
                CPIndexChainR2LTextBox.Text = DecimalCPIndexChainR2L(value).ToString();
                CPIndexChainR2LTextBox.ForeColor = GetNumberTypeColor(DecimalCPIndexChainR2L(value));
                CPIndexChainR2LTextBox.Refresh();
                IndexChainLengthTextBox.Text = IndexChainLength(value).ToString();
                //IndexChainLengthTextBox.ForeColor = GetNumberTypeColor(IndexChainLength(value));
                IndexChainLengthTextBox.Refresh();

                // update the ValueNavigator fields
                UpdateValueNavigator(value);
            }

            ////TODO: freeze program if comes from Position
            //ValueTextBox.SelectionLength = 0;
            //ValueTextBox.SelectionStart = ValueTextBox.Text.Length;
            //// focus so user can continue with +, -, *, /, ^, %, Enter
            //ValueTextBox.Focus();
        }
        catch //(Exception ex)
        {
            //MessageBox.Show(ex.Message, Application.ProductName);
        }
    }
    private void UpdateNumberKind(long value)
    {
        m_number_kind = Numbers.GetNumberKind(value);
        int number_kind_index = 0;
        switch (m_number_kind)
        {
            case NumberKind.Deficient:
                {
                    number_kind_index = Numbers.DeficientIndexOf(value) + 1;
                    NumberKindIndexTextBox.BackColor = Numbers.NUMBER_KIND_COLORS[0];
                }
                break;
            case NumberKind.Perfect:
                {
                    number_kind_index = Numbers.PerfectIndexOf(value) + 1;
                    NumberKindIndexTextBox.BackColor = Numbers.NUMBER_KIND_COLORS[1];
                }
                break;
            case NumberKind.Abundant:
                {
                    number_kind_index = Numbers.AbundantIndexOf(value) + 1;
                    NumberKindIndexTextBox.BackColor = Numbers.NUMBER_KIND_COLORS[2];
                }
                break;
            default:
                {
                    number_kind_index = 0;
                    NumberKindIndexTextBox.BackColor = SystemColors.Control;
                }
                break;
        }
        NumberKindIndexTextBox.Text = number_kind_index.ToString();
        NumberKindIndexTextBox.ForeColor = GetNumberTypeColor(number_kind_index);
        ToolTip.SetToolTip(NumberKindIndexTextBox, m_number_kind.ToString() + " number index");
        NumberKindIndexTextBox.Refresh();
    }
    private void DisplayDeficientNumbersLabel_Click(object sender, EventArgs e)
    {
        try
        {
            string filename = Globals.NUMBERS_FOLDER + "/" + "DeficientNumbers" + ".txt";
            using (StreamWriter writer = new StreamWriter(filename, false))
            {
                StringBuilder str = new StringBuilder();

                str.AppendLine("----------------------------------------");
                str.AppendLine("Deficient numbers are those with the sum of their proper divisors less than themselves.");
                str.AppendLine("----------------------------------------");
                str.AppendLine("#" + "\t" + "Number");
                str.AppendLine("----------------------------------------");

                for (int i = 0; i < Numbers.Deficients.Count; i++)
                {
                    str.AppendLine((i + 1).ToString() + "\t" + Numbers.Deficients[i]);
                }
                str.AppendLine("----------------------------------------");

                writer.WriteLine(str.ToString());
            }

            // show file content after save
            if (File.Exists(filename))
            {
                FileHelper.WaitForReady(filename);

                System.Diagnostics.Process.Start("Notepad.exe", filename);
            }
        }
        catch
        {
            // silence IO error in case running from read-only media (CD/DVD)
        }
    }
    private void DisplayPerfectNumbersLabel_Click(object sender, EventArgs e)
    {
        try
        {
            string filename = Globals.NUMBERS_FOLDER + "/" + "PerfectNumbers" + ".txt";
            if (File.Exists(filename))
            {
                FileHelper.WaitForReady(filename);

                System.Diagnostics.Process.Start("Notepad.exe", filename);
            }
        }
        catch
        {
            // silence IO error in case running from read-only media (CD/DVD)
        }
    }
    private void DisplayAbundantNumbersLabel_Click(object sender, EventArgs e)
    {
        try
        {
            string filename = Globals.NUMBERS_FOLDER + "/" + "AbundantNumbers" + ".txt";
            using (StreamWriter writer = new StreamWriter(filename, false))
            {
                StringBuilder str = new StringBuilder();

                str.AppendLine("----------------------------------------");
                str.AppendLine("Abundant numbers are those with the sum of their proper divisors greater than themselves.");
                str.AppendLine("----------------------------------------");
                str.AppendLine("#" + "\t" + "Number");
                str.AppendLine("----------------------------------------");

                for (int i = 0; i < Numbers.Abundants.Count; i++)
                {
                    str.AppendLine((i + 1).ToString() + "\t" + Numbers.Abundants[i]);
                }
                str.AppendLine("----------------------------------------");

                writer.WriteLine(str.ToString());
            }

            // show file content after save
            if (File.Exists(filename))
            {
                FileHelper.WaitForReady(filename);

                System.Diagnostics.Process.Start("Notepad.exe", filename);
            }
        }
        catch
        {
            // silence IO error in case running from read-only media (CD/DVD)
        }
    }
    private void UpdateSumOfDivisors(long value)
    {
        long sum_of_divisors = Numbers.SumOfDivisors(value);
        string divisors = Numbers.GetDivisorsString(value);
        SumOfDivisorsTextBox.Text = sum_of_divisors.ToString();
        SumOfDivisorsTextBox.ForeColor = GetNumberTypeColor(sum_of_divisors);
        SumOfDivisorsTextBox.Refresh();
        ToolTip.SetToolTip(SumOfDivisorsTextBox, "Sum Of Divisors\r\n" + divisors + " = " + sum_of_divisors);

        long sum_of_proper_divisors = Numbers.SumOfProperDivisors(value);
        string proper_divisors = Numbers.GetProperDivisorsString(value);
        SumOfProperDivisorsTextBox.Text = sum_of_proper_divisors.ToString();
        SumOfProperDivisorsTextBox.ForeColor = GetNumberTypeColor(sum_of_proper_divisors);
        SumOfProperDivisorsTextBox.Refresh();
        ToolTip.SetToolTip(SumOfProperDivisorsTextBox, "Sum Of Proper Divisors\r\n" + proper_divisors + " = " + sum_of_proper_divisors);

        DisplayLetterFrequenciesTotals();
    }

    private long DecimalPCIndexChainL2R(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return -1L;

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Append("0");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Append("1");
            }
            else // number is too large
            {
                return 0L;
            }
            number = index;
        }

        try
        {
            return Convert.ToInt64(str.ToString(), 2);
        }
        catch
        {
            return -1L;
        }
    }
    private long DecimalPCIndexChainR2L(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return -1L;

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "0");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "1");
            }
            else // number is too large
            {
                return 0L;
            }
            number = index;
        }

        try
        {
            return Convert.ToInt64(str.ToString(), 2);
        }
        catch
        {
            return -1L;
        }
    }
    private long DecimalCPIndexChainL2R(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return -1L;

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Append("1");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Append("0");
            }
            else // number is too large
            {
                return 0L;
            }
            number = index;
        }

        try
        {
            return Convert.ToInt64(str.ToString(), 2);
        }
        catch
        {
            return -1L;
        }
    }
    private long DecimalCPIndexChainR2L(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return -1L;

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "1");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "0");
            }
            else // number is too large
            {
                return 0L;
            }
            number = index;
        }

        try
        {
            return Convert.ToInt64(str.ToString(), 2);
        }
        catch
        {
            return -1L;
        }
    }
    private int IndexChainLength(long number)
    {
        if (number <= 1L) return 0;

        int length = 0;
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                length++;
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                length++;
            }
            else // number is too large
            {
                return 0;
            }
            number = index;
        }
        return length;
    }
    private string BinaryPCIndexChainL2R(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Append("0");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Append("1");
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private string BinaryPCIndexChainR2L(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "0");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "1");
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private string BinaryCPIndexChainL2R(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Append("1");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Append("0");
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private string BinaryCPIndexChainR2L(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "1");
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "0");
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private string GetPCIndexChainL2R(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            if (str.Length > 0)
            {
                str.Append("-");
            }

            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Append("P" + index.ToString());
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Append("C" + index.ToString());
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private string GetPCIndexChainR2L(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            if (str.Length > 0)
            {
                str.Insert(0, "-");
            }

            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "P" + index.ToString());
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "C" + index.ToString());
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private string GetCPIndexChainL2R(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            if (str.Length > 0)
            {
                str.Append("-");
            }

            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Append("P" + index.ToString());
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Append("C" + index.ToString());
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private string GetCPIndexChainR2L(long number)
    {
        if (number < 0L) number = -1L * number;
        if (number <= 1L) return "0";

        StringBuilder str = new StringBuilder();
        while (number > 1L)
        {
            if (str.Length > 0)
            {
                str.Insert(0, "-");
            }

            int index = 0;
            if ((index = (Numbers.PrimeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "P" + index.ToString());
            }
            else if ((index = (Numbers.CompositeIndexOf(number) + 1)) > 0)
            {
                str.Insert(0, "C" + index.ToString());
            }
            else // number is too large
            {
                return "";
            }
            number = index;
        }
        return str.ToString();
    }
    private void NumberIndexChain(long number)
    {
        string filename = "NumberIndexChain" + "_" + number + ".txt";
        StringBuilder str = new StringBuilder();
        int length = IndexChainLength(number);
        str.AppendLine(number.ToString() + "\t" + length.ToString() + "\t" + GetPCIndexChainL2R(number));
        m_client.SaveNumberIndexChain(filename, number, length, str.ToString());
    }
    private void NumbersOfIndexChainLength(int length)
    {
        string filename = "PIndexChainLength" + "_" + length + ".txt";
        StringBuilder str = new StringBuilder();
        long running_total = 0L;
        for (int i = 0; i < Numbers.Primes.Count; i++)
        {
            long number = Numbers.Primes[i];
            int len = IndexChainLength(number);
            if (len == length)
            {
                running_total += number;
                str.AppendLine(number.ToString() + "\t" + running_total.ToString() + "\t" + DecimalPCIndexChainL2R(number).ToString() + "\t" + DecimalPCIndexChainR2L(number).ToString() + "\t" + DecimalCPIndexChainL2R(number).ToString() + "\t" + DecimalCPIndexChainR2L(number).ToString() + "\t" + GetPCIndexChainL2R(number));
            }
        }
        m_client.SaveIndexChainLength(filename, NumberType.Prime, length, str.ToString());

        filename = "APIndexChainLength" + "_" + length + ".txt";
        str = new StringBuilder();
        running_total = 0L;
        for (int i = 0; i < Numbers.AdditivePrimes.Count; i++)
        {
            long number = Numbers.AdditivePrimes[i];
            int len = IndexChainLength(number);
            if (len == length)
            {
                running_total += number;
                str.AppendLine(number.ToString() + "\t" + running_total.ToString() + "\t" + DecimalPCIndexChainL2R(number).ToString() + "\t" + DecimalPCIndexChainR2L(number).ToString() + "\t" + DecimalCPIndexChainL2R(number).ToString() + "\t" + DecimalCPIndexChainR2L(number).ToString() + "\t" + GetPCIndexChainL2R(number));
            }
        }
        m_client.SaveIndexChainLength(filename, NumberType.AdditivePrime, length, str.ToString());

        filename = "XPIndexChainLength" + "_" + length + ".txt";
        str = new StringBuilder();
        running_total = 0L;
        for (int i = 0; i < Numbers.NonAdditivePrimes.Count; i++)
        {
            long number = Numbers.NonAdditivePrimes[i];
            int len = IndexChainLength(number);
            if (len == length)
            {
                running_total += number;
                str.AppendLine(number.ToString() + "\t" + running_total.ToString() + "\t" + DecimalPCIndexChainL2R(number).ToString() + "\t" + DecimalPCIndexChainR2L(number).ToString() + "\t" + DecimalCPIndexChainL2R(number).ToString() + "\t" + DecimalCPIndexChainR2L(number).ToString() + "\t" + GetPCIndexChainL2R(number));
            }
        }
        m_client.SaveIndexChainLength(filename, NumberType.NonAdditivePrime, length, str.ToString());

        filename = "CIndexChainLength" + "_" + length + ".txt";
        str = new StringBuilder();
        running_total = 0L;
        for (int i = 0; i < Numbers.Composites.Count; i++)
        {
            long number = Numbers.Composites[i];
            int len = IndexChainLength(number);
            if (len == length)
            {
                running_total += number;
                str.AppendLine(number.ToString() + "\t" + running_total.ToString() + "\t" + DecimalPCIndexChainL2R(number).ToString() + "\t" + DecimalPCIndexChainR2L(number).ToString() + "\t" + DecimalCPIndexChainL2R(number).ToString() + "\t" + DecimalCPIndexChainR2L(number).ToString() + "\t" + GetPCIndexChainL2R(number));
            }
        }
        m_client.SaveIndexChainLength(filename, NumberType.Composite, length, str.ToString());

        filename = "ACIndexChainLength" + "_" + length + ".txt";
        str = new StringBuilder();
        running_total = 0L;
        for (int i = 0; i < Numbers.AdditiveComposites.Count; i++)
        {
            long number = Numbers.AdditiveComposites[i];
            int len = IndexChainLength(number);
            if (len == length)
            {
                running_total += number;
                str.AppendLine(number.ToString() + "\t" + running_total.ToString() + "\t" + DecimalPCIndexChainL2R(number).ToString() + "\t" + DecimalPCIndexChainR2L(number).ToString() + "\t" + DecimalCPIndexChainL2R(number).ToString() + "\t" + DecimalCPIndexChainR2L(number).ToString() + "\t" + GetPCIndexChainL2R(number));
            }
        }
        m_client.SaveIndexChainLength(filename, NumberType.AdditiveComposite, length, str.ToString());

        filename = "XCIndexChainLength" + "_" + length + ".txt";
        str = new StringBuilder();
        running_total = 0L;
        for (int i = 0; i < Numbers.NonAdditiveComposites.Count; i++)
        {
            long number = Numbers.NonAdditiveComposites[i];
            int len = IndexChainLength(number);
            if (len == length)
            {
                running_total += number;
                str.AppendLine(number.ToString() + "\t" + running_total.ToString() + "\t" + DecimalPCIndexChainL2R(number).ToString() + "\t" + DecimalPCIndexChainR2L(number).ToString() + "\t" + DecimalCPIndexChainL2R(number).ToString() + "\t" + DecimalCPIndexChainR2L(number).ToString() + "\t" + GetPCIndexChainL2R(number));
            }
        }
        m_client.SaveIndexChainLength(filename, NumberType.NonAdditiveComposite, length, str.ToString());

        filename = "NIndexChainLength" + "_" + length + ".txt";
        str = new StringBuilder();
        running_total = 0L;
        for (int i = 0; i < int.MaxValue / 1024; i++)
        {
            int len = IndexChainLength(i);
            if (len == length)
            {
                long number = i;
                running_total += number;
                str.AppendLine(number.ToString() + "\t" + running_total.ToString() + "\t" + DecimalPCIndexChainL2R(number).ToString() + "\t" + DecimalPCIndexChainR2L(number).ToString() + "\t" + DecimalCPIndexChainL2R(number).ToString() + "\t" + DecimalCPIndexChainR2L(number).ToString() + "\t" + GetPCIndexChainL2R(number));
            }
        }
        m_client.SaveIndexChainLength(filename, NumberType.Natural, length, str.ToString());
    }

    private void UpdateValueNavigator(long value)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                VerseByVerseNumberLabel.Text = "---:---";
                ToolTip.SetToolTip(VerseByVerseNumberLabel, null);
                VerseByVerseNumberLabel.Refresh();

                VerseByWordNumberLabel.Text = "---:---";
                ToolTip.SetToolTip(VerseByWordNumberLabel, null);
                VerseByWordNumberLabel.Refresh();

                VerseByLetterNumberLabel.Text = "---:---";
                ToolTip.SetToolTip(VerseByLetterNumberLabel, null);
                VerseByLetterNumberLabel.Refresh();

                Verse verse = m_client.Book.GetVerseByVerseNumber((int)value);
                if (verse != null)
                {
                    VerseByVerseNumberLabel.Text = verse.Address;
                    ToolTip.SetToolTip(VerseByVerseNumberLabel, "Go to verse number = " + ValueTextBox.Text + "\r\n" + verse.Text);
                }

                verse = m_client.Book.GetVerseByWordNumber((int)value);
                if (verse != null)
                {
                    VerseByWordNumberLabel.Text = verse.Address;
                    ToolTip.SetToolTip(VerseByWordNumberLabel, "Go to verse with word number = " + ValueTextBox.Text + "\r\n" + verse.Text);
                }

                verse = m_client.Book.GetVerseByLetterNumber((int)value);
                if (verse != null)
                {
                    VerseByLetterNumberLabel.Text = verse.Address;
                    ToolTip.SetToolTip(VerseByLetterNumberLabel, "Go to verse with letter number = " + ValueTextBox.Text + "\r\n" + verse.Text);
                }
            }
        }
    }
    private IndexType m_index_type = IndexType.Prime;
    private void NthNumberTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            try
            {
                long number = -1L;
                int nth_index = int.Parse(NthNumberTextBox.Text) - 1;
                NthNumberTextBox.ForeColor = GetNumberTypeColor(nth_index);
                if (m_index_type == IndexType.Prime)
                {
                    number = Numbers.Primes[nth_index];
                    FactorizeValue(number, "P Index", true);
                }
                else // any other index type will be treated as IndexNumberType.Composite
                {
                    number = Numbers.Composites[nth_index];
                    FactorizeValue(number, "C Index", true);
                }
            }
            catch
            {
                FactorizeValue(0L, "Error", true);
            }
        }
    }
    private void NthAdditiveNumberTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            try
            {
                long number = -1L;
                int nth_index = int.Parse(NthAdditiveNumberTextBox.Text) - 1;
                NthAdditiveNumberTextBox.ForeColor = GetNumberTypeColor(nth_index);
                if (m_index_type == IndexType.Prime)
                {
                    number = Numbers.AdditivePrimes[nth_index];
                    FactorizeValue(number, "AP Index", true);
                }
                else // any other index type will be treated as IndexNumberType.Composite
                {
                    number = Numbers.AdditiveComposites[nth_index];
                    FactorizeValue(number, "AC Index", true);
                }
            }
            catch
            {
                FactorizeValue(0L, "Error", true);
            }
        }
    }
    private void NthNonAdditiveNumberTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            try
            {
                long number = -1L;
                int nth_index = int.Parse(NthNonAdditiveNumberTextBox.Text) - 1;
                NthNonAdditiveNumberTextBox.ForeColor = GetNumberTypeColor(nth_index);
                if (m_index_type == IndexType.Prime)
                {
                    number = Numbers.NonAdditivePrimes[nth_index];
                    FactorizeValue(number, "XP Index", true);
                }
                else // any other index type will be treated as IndexNumberType.Composite
                {
                    number = Numbers.NonAdditiveComposites[nth_index];
                    FactorizeValue(number, "XC Index", true);
                }
            }
            catch
            {
                FactorizeValue(0L, "Error", true);
            }
        }
    }

    private NumberKind m_number_kind = NumberKind.Deficient;
    private void NumberKindIndexTextBox_KeyDown(object sender, KeyEventArgs e)
    {
        if (e.KeyCode == Keys.Enter)
        {
            try
            {
                long number = -1L;
                int nth_index = int.Parse(NumberKindIndexTextBox.Text) - 1;
                switch (m_number_kind)
                {
                    case NumberKind.Deficient:
                        {
                            number = Numbers.Deficients[nth_index];
                            FactorizeValue(number, "DF Index", true);
                        }
                        break;
                    case NumberKind.Perfect:
                        {
                            number = Numbers.Perfects[nth_index];
                            FactorizeValue(number, "PF Index", true);
                        }
                        break;
                    case NumberKind.Abundant:
                        {
                            number = Numbers.Abundants[nth_index];
                            FactorizeValue(number, "AB Index", true);
                        }
                        break;
                    default:
                        {
                        }
                        break;
                }
            }
            catch
            {
                FactorizeValue(0L, "Error", true);
            }
        }
    }

    private Color GetNumberTypeColor(long number)
    {
        return GetNumberTypeColor(number.ToString(), 10L);
    }
    private Color GetNumberTypeColor(string value, long radix)
    {
        // if negative number, remove -ve sign
        if (value.StartsWith("-")) value = value.Remove(0, 1);

        if (Numbers.IsUnit(value, radix))
        {
            return Numbers.NUMBER_TYPE_COLORS[(int)NumberType.Unit];
        }

        else if (Numbers.IsNonAdditivePrime(value, radix))
        {
            return Numbers.NUMBER_TYPE_COLORS[(int)NumberType.NonAdditivePrime];
        }
        else if (Numbers.IsAdditivePrime(value, radix))
        {
            return Numbers.NUMBER_TYPE_COLORS[(int)NumberType.AdditivePrime];
        }
        else if (Numbers.IsPrime(value, radix))
        {
            return Numbers.NUMBER_TYPE_COLORS[(int)NumberType.Prime];
        }

        else if (Numbers.IsNonAdditiveComposite(value, radix))
        {
            return Numbers.NUMBER_TYPE_COLORS[(int)NumberType.NonAdditiveComposite];
        }
        else if (Numbers.IsAdditiveComposite(value, radix))
        {
            return Numbers.NUMBER_TYPE_COLORS[(int)NumberType.AdditiveComposite];
        }
        else if (Numbers.IsComposite(value, radix))
        {
            return Numbers.NUMBER_TYPE_COLORS[(int)NumberType.Composite];
        }

        else
        {
            return Numbers.NUMBER_TYPE_COLORS[(int)NumberType.None];
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Value Display
    ///////////////////////////////////////////////////////////////////////////////
    private long m_radix = DEFAULT_RADIX;
    private void RadixValueLabel_Click(object sender, EventArgs e)
    {
        try
        {
            // get values in current radix
            int chapter_count = (int)Radix.Decode(ChaptersTextBox.Text, m_radix);
            int verse_count = (int)Radix.Decode(VersesTextBox.Text, m_radix);
            int word_count = (int)Radix.Decode(WordsTextBox.Text, m_radix);
            int letter_count = (int)Radix.Decode(LettersTextBox.Text, m_radix);
            ////int chapter_number_sum = (int)Radix.Decode(ChapterNumberSumTextBox.Text.Split()[1], m_radix);
            ////int verse_number_sum = (int)Radix.Decode(VerseNumberSumTextBox.Text.Split()[1], m_radix);
            ////int word_number_sum = (int)Radix.Decode(WordNumberSumTextBox.Text.Split()[1], m_radix);
            ////int letter_number_sum = (int)Radix.Decode(LetterNumberSumTextBox.Text.Split()[1], m_radix);
            //int chapter_number_sum = int.Parse(ChapterNumberSumTextBox.Text.Split()[1]);
            //int verse_number_sum = int.Parse(VerseNumberSumTextBox.Text.Split()[1]);
            //int word_number_sum = int.Parse(WordNumberSumTextBox.Text.Split()[1]);
            //int letter_number_sum = int.Parse(LetterNumberSumTextBox.Text.Split()[1]);
            long value = Radix.Decode(ValueTextBox.Text, m_radix);

            // toggle radix
            if (m_radix == DEFAULT_RADIX)
            {
                m_radix = RADIX_NINTEEN;
            }
            else
            {
                m_radix = DEFAULT_RADIX;
            }
            RadixValueLabel.Text = m_radix.ToString();

            // display values in next radix
            //DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
            DisplayCounts(chapter_count, verse_count, word_count, letter_count, -1, -1, -1, -1); // -1 means don't change what is displayed
            FactorizeValue(value, "Value", true);
        }
        catch
        {
            // log exception
        }
    }
    private void RadixValueLabel_TextChanged(object sender, EventArgs e)
    {

    }
    private void RadixValueUpLabel_Click(object sender, EventArgs e)
    {
        try
        {
            // get values in current radix
            int chapter_count = (int)Radix.Decode(ChaptersTextBox.Text, m_radix);
            int verse_count = (int)Radix.Decode(VersesTextBox.Text, m_radix);
            int word_count = (int)Radix.Decode(WordsTextBox.Text, m_radix);
            int letter_count = (int)Radix.Decode(LettersTextBox.Text, m_radix);
            ////int chapter_number_sum = (int)Radix.Decode(ChapterNumberSumTextBox.Text.Split()[1], m_radix);
            ////int verse_number_sum = (int)Radix.Decode(VerseNumberSumTextBox.Text.Split()[1], m_radix);
            ////int word_number_sum = (int)Radix.Decode(WordNumberSumTextBox.Text.Split()[1], m_radix);
            ////int letter_number_sum = (int)Radix.Decode(LetterNumberSumTextBox.Text.Split()[1], m_radix);
            //int chapter_number_sum = int.Parse(ChapterNumberSumTextBox.Text.Split()[1]);
            //int verse_number_sum = int.Parse(VerseNumberSumTextBox.Text.Split()[1]);
            //int word_number_sum = int.Parse(WordNumberSumTextBox.Text.Split()[1]);
            //int letter_number_sum = int.Parse(LetterNumberSumTextBox.Text.Split()[1]);
            long value = Radix.Decode(ValueTextBox.Text, m_radix);

            // increment radix
            m_radix++;
            if (m_radix > Radix.DIGITS.Length) m_radix = 2;
            RadixValueLabel.Text = m_radix.ToString();

            // display values in next radix
            //DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
            DisplayCounts(chapter_count, verse_count, word_count, letter_count, -1, -1, -1, -1); // -1 means don't change what is displayed
            FactorizeValue(value, "Value", true);
        }
        catch
        {
            // log exception
        }
    }
    private void RadixValueDownLabel_Click(object sender, EventArgs e)
    {
        try
        {
            // get values in current radix
            int chapter_count = (int)Radix.Decode(ChaptersTextBox.Text, m_radix);
            int verse_count = (int)Radix.Decode(VersesTextBox.Text, m_radix);
            int word_count = (int)Radix.Decode(WordsTextBox.Text, m_radix);
            int letter_count = (int)Radix.Decode(LettersTextBox.Text, m_radix);
            ////int chapter_number_sum = (int)Radix.Decode(ChapterNumberSumTextBox.Text.Split()[1], m_radix);
            ////int verse_number_sum = (int)Radix.Decode(VerseNumberSumTextBox.Text.Split()[1], m_radix);
            ////int word_number_sum = (int)Radix.Decode(WordNumberSumTextBox.Text.Split()[1], m_radix);
            ////int letter_number_sum = (int)Radix.Decode(LetterNumberSumTextBox.Text.Split()[1], m_radix);
            //int chapter_number_sum = int.Parse(ChapterNumberSumTextBox.Text.Split()[1]);
            //int verse_number_sum = int.Parse(VerseNumberSumTextBox.Text.Split()[1]);
            //int word_number_sum = int.Parse(WordNumberSumTextBox.Text.Split()[1]);
            //int letter_number_sum = int.Parse(LetterNumberSumTextBox.Text.Split()[1]);
            long value = Radix.Decode(ValueTextBox.Text, m_radix);

            // increment radix
            m_radix--;
            if (m_radix < 2) m_radix = Radix.DIGITS.Length;
            RadixValueLabel.Text = m_radix.ToString();

            // display values in next radix
            //DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
            DisplayCounts(chapter_count, verse_count, word_count, letter_count, -1, -1, -1, -1); // -1 means don't change what is displayed
            FactorizeValue(value, "Value", true);
        }
        catch
        {
            // log exception
        }
    }
    private long m_divisor = DEFAULT_DIVISOR;
    private void DivisorValueLabel_Click(object sender, EventArgs e)
    {
        m_divisor = DEFAULT_DIVISOR;
        DivisorValueLabel.Text = m_divisor.ToString();
    }
    private void DivisorValueLabel_TextChanged(object sender, EventArgs e)
    {
        UpdateBackColorsByDivisor();
    }
    private void DivisorValueUpLabel_Click(object sender, EventArgs e)
    {
        m_divisor++;
        if (m_divisor > MAX_DIVISOR) m_divisor = MIN_DIVISOR;
        DivisorValueLabel.Text = m_divisor.ToString();
    }
    private void DivisorValueUpLabel_DoubleClick(object sender, EventArgs e)
    {
        m_divisor += 10;
        if (m_divisor > MAX_DIVISOR) m_divisor = MIN_DIVISOR;
        DivisorValueLabel.Text = m_divisor.ToString();
    }
    private System.Windows.Forms.Timer DivisorUpTimer = null;
    private void DivisorValueUpLabel_MouseDown(object sender, MouseEventArgs e)
    {
        if (e.Button == MouseButtons.Left)
        {
            if (DivisorUpTimer == null)
            {
                DivisorUpTimer = new System.Windows.Forms.Timer();
                DivisorUpTimer.Interval = 300;
                DivisorUpTimer.Tick += new EventHandler(DivisorUpTimer_Tick);
            }

            if (!DivisorUpTimer.Enabled)
            { // e.Clicks = 1
                DivisorUpTimer.Start();
            }
            else
            { // e.Clicks = 2
                DivisorUpTimer.Stop();

                // double-click event handler
                DivisorValueUpLabel_DoubleClick(sender, e);
            }
        }
    }
    private void DivisorUpTimer_Tick(object sender, EventArgs e)
    {
        DivisorUpTimer.Stop();

        // single-click event handler
        DivisorValueUpLabel_Click(sender, e);
    }
    private void DivisorValueDownLabel_Click(object sender, EventArgs e)
    {
        m_divisor--;
        if (m_divisor < MIN_DIVISOR) m_divisor = MAX_DIVISOR;
        DivisorValueLabel.Text = m_divisor.ToString();
    }
    private void DivisorValueDownLabel_DoubleClick(object sender, EventArgs e)
    {
        m_divisor -= 10;
        if (m_divisor < MIN_DIVISOR) m_divisor = MAX_DIVISOR;
        DivisorValueLabel.Text = m_divisor.ToString();
    }
    private System.Windows.Forms.Timer DivisorDownTimer = null;
    private void DivisorValueDownLabel_MouseDown(object sender, MouseEventArgs e)
    {
        if (e.Button == MouseButtons.Left)
        {
            if (DivisorDownTimer == null)
            {
                DivisorDownTimer = new System.Windows.Forms.Timer();
                DivisorDownTimer.Interval = 300;
                DivisorDownTimer.Tick += new EventHandler(DivisorDownTimer_Tick);
            }

            if (!DivisorDownTimer.Enabled)
            { // e.Clicks = 1
                DivisorDownTimer.Start();
            }
            else
            { // e.Clicks = 2
                DivisorDownTimer.Stop();

                // double-click event handler
                DivisorValueDownLabel_DoubleClick(sender, e);
            }
        }
    }
    private void DivisorDownTimer_Tick(object sender, EventArgs e)
    {
        DivisorDownTimer.Stop();

        // single-click event handler
        DivisorValueDownLabel_Click(sender, e);
    }
    private void UpdateBackColorsByDivisor()
    {
        try
        {
            Verse verse = GetVerseAtCursor();
            if (verse != null)
            {
                UpdateVersePositions(verse);
            }

            long value = long.Parse(ValueTextBox.Text);
            PrimeFactorsTextBox.BackColor = (Numbers.Compare(value, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            PrimeFactorsTextBox.Refresh();

            int chapter_count = int.Parse(ChaptersTextBox.Text);
            ChaptersTextBox.BackColor = (Numbers.Compare(chapter_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            ChaptersTextBox.Refresh();

            int verse_count = int.Parse(VersesTextBox.Text);
            VersesTextBox.BackColor = (Numbers.Compare(verse_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            VersesTextBox.Refresh();

            int word_count = int.Parse(WordsTextBox.Text);
            WordsTextBox.BackColor = (Numbers.Compare(word_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            WordsTextBox.Refresh();

            int letter_count = int.Parse(LettersTextBox.Text);
            LettersTextBox.BackColor = (Numbers.Compare(letter_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            LettersTextBox.Refresh();

            string chapter_number_sum_text = ChapterNumberSumTextBox.Text.Substring(1);
            int chapter_number_sum = int.Parse(chapter_number_sum_text);
            ChapterNumberSumTextBox.BackColor = (Numbers.Compare(chapter_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            ChapterNumberSumTextBox.Refresh();

            string verse_number_sum_text = VerseNumberSumTextBox.Text.Substring(1);
            int verse_number_sum = int.Parse(verse_number_sum_text);
            VerseNumberSumTextBox.BackColor = (Numbers.Compare(verse_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            VerseNumberSumTextBox.Refresh();

            string word_number_sum_text = WordNumberSumTextBox.Text.Substring(1);
            int word_number_sum = int.Parse(word_number_sum_text);
            WordNumberSumTextBox.BackColor = (Numbers.Compare(word_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            WordNumberSumTextBox.Refresh();

            string letter_number_sum_text = LetterNumberSumTextBox.Text.Substring(1);
            int letter_number_sum = int.Parse(letter_number_sum_text);
            LetterNumberSumTextBox.BackColor = (Numbers.Compare(letter_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            LetterNumberSumTextBox.Refresh();

            UpdateMathsChapterVerseSums();
            UpdateMathsChapterVerseSums();
        }
        catch
        {
            // ignore
        }
    }
    private bool m_total_chapter_counts = false;
    private void TotalChapterCountsCheckBox_CheckedChanged(object sender, EventArgs e)
    {
        m_total_chapter_counts = TotalChapterCountsCheckBox.Checked;
        CalculateCurrentValue();
    }
    private void CalculateAndDisplayCounts(string user_text)
    {
        if (!String.IsNullOrEmpty(user_text))
        {
            if (m_client != null)
            {
                ChapterNumberSumTextBox.Text = "";
                VerseNumberSumTextBox.Text = "";
                WordNumberSumTextBox.Text = "";
                LetterNumberSumTextBox.Text = "";

                if (!user_text.IsArabic())  // eg English
                {
                    user_text = user_text.ToUpper();
                }

                // in all cases
                if (m_client.NumerologySystem != null)
                {
                    // simplify all text_modes
                    user_text = user_text.SimplifyTo(m_client.NumerologySystem.TextMode);
                    user_text = user_text.Replace("_", "");
                    user_text = user_text.Replace("\t", "");
                    while (user_text.Contains("  "))
                    {
                        user_text = user_text.Replace("  ", " ");
                    }
                    user_text = user_text.Replace("\r\n", "\n");

                    int chapter_count = 1;
                    int verse_count = 1;
                    int word_count = 1;
                    int letter_count = 0;
                    foreach (char c in user_text)
                    {
                        if (c == '\n')
                        {
                            verse_count++;
                            if (letter_count > 0)
                            {
                                word_count++;
                            }
                        }
                        else if (c == ' ')
                        {
                            word_count++;
                        }
                        else
                        {
                            letter_count++;
                        }
                    }
                    DisplayCounts(chapter_count, verse_count, word_count, letter_count, -1, -1, -1, -1); // -1 means don't change what is displayed
                    DisplayMathsChapterVerseSums(null);     // reset C, V, C+V, C-V, C×V, C÷V, etc.
                }
            }
        }
        else
        {
            DisplayCounts(0, 0, 0, 0, -1, -1, -1, -1); // -1 means don't change what is displayed
            DisplayMathsChapterVerseSums(null);     // reset C, V, C+V, C-V, C×V, C÷V, etc.
        }
    }
    private void CalculateAndDisplayCounts(Verse verse)
    {
        if (verse != null)
        {
            if (m_total_chapter_counts)
            {
                CalculateAndDisplayCountsTotal(verse);
            }
            else
            {
                CalculateAndDisplayCountsLocal(verse);
            }
        }
    }
    private void CalculateAndDisplayCountsLocal(Verse verse)
    {
        if (verse != null)
        {
            int chapter_count = 1;
            int verse_count = 1;
            int word_count = verse.Words.Count;
            int letter_count = verse.LetterCount;
            int chapter_number_sum = verse.Chapter.SortedNumber;
            int verse_number_sum = verse.NumberInChapter;
            int word_number_sum = 0;
            int letter_number_sum = 0;

            if (verse.Words != null)
            {
                foreach (Word word in verse.Words)
                {
                    word_number_sum += word.NumberInVerse;
                    if ((word.Letters != null) && (word.Letters.Count > 0))
                    {
                        foreach (Letter letter in word.Letters)
                        {
                            letter_number_sum += letter.NumberInWord;
                        }
                    }
                }
            }
            DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
            DisplayMathsChapterVerseSums(new List<Verse>() { verse }); // update C, V, C+V, C-V, C×V, C÷V, etc.
        }
    }
    private void CalculateAndDisplayCountsTotal(Verse verse)
    {
        if (verse != null)
        {
            int chapter_count = 1;
            int verse_count = 0;
            int word_count = 0;
            int letter_count = 0;
            int chapter_number_sum = 0;
            int verse_number_sum = 0;
            int word_number_sum = 0;
            int letter_number_sum = 0;

            Chapter chapter = verse.Chapter;
            if (chapter != null)
            {
                chapter_number_sum += chapter.SortedNumber;
                verse_count += chapter.Verses.Count;

                foreach (Verse v in chapter.Verses)
                {
                    word_count += v.Words.Count;
                    letter_count += v.LetterCount;

                    verse_number_sum += v.NumberInChapter;
                    if (v.Words != null)
                    {
                        foreach (Word word in v.Words)
                        {
                            word_number_sum += word.NumberInVerse;
                            if ((word.Letters != null) && (word.Letters.Count > 0))
                            {
                                foreach (Letter letter in word.Letters)
                                {
                                    letter_number_sum += letter.NumberInWord;
                                }
                            }
                        }
                    }
                }
            }

            DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
            DisplayMathsChapterVerseSums(new List<Verse>() { verse }); // update C, V, C+V, C-V, C×V, C÷V, etc.
        }
    }
    private void CalculateAndDisplayCounts(List<Verse> verses)
    {
        if (verses != null)
        {
            if (m_total_chapter_counts)
            {
                CalculateAndDisplayCountsTotal(verses);
            }
            else
            {
                CalculateAndDisplayCountsLocal(verses);
            }
        }
    }
    private void CalculateAndDisplayCountsLocal(List<Verse> verses)
    {
        if (verses != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    List<Chapter> chapters = m_client.Book.GetChapters(verses);
                    if (chapters != null)
                    {
                        int chapter_count = chapters.Count;
                        int verse_count = verses.Count;
                        int word_count = 0;
                        int letter_count = 0;
                        int chapter_number_sum = 0;
                        int verse_number_sum = 0;
                        int word_number_sum = 0;
                        int letter_number_sum = 0;
                        foreach (Chapter chapter in chapters)
                        {
                            if (chapter != null)
                            {
                                chapter_number_sum += chapter.SortedNumber;
                            }
                        }

                        foreach (Verse verse in verses)
                        {
                            word_count += verse.Words.Count;
                            letter_count += verse.LetterCount;

                            verse_number_sum += verse.NumberInChapter;
                            if (verse.Words != null)
                            {
                                foreach (Word word in verse.Words)
                                {
                                    word_number_sum += word.NumberInVerse;
                                    if ((word.Letters != null) && (word.Letters.Count > 0))
                                    {
                                        foreach (Letter letter in word.Letters)
                                        {
                                            letter_number_sum += letter.NumberInWord;
                                        }
                                    }
                                }
                            }
                        }
                        DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
                        DisplayMathsChapterVerseSums(verses); // update C, V, C+V, C-V, C×V, C÷V, etc.

                        DisplayTranslations(verses); // display translations for selected verses
                        DisplayTafseer(verses);
                        DisplaySymmetry();
                        DisplayCVWLSequence();
                        DisplayValuesSequence();
                        DisplayDNASequence();
                    }
                }
            }
        }
    }
    private void CalculateAndDisplayCountsTotal(List<Verse> verses)
    {
        if (verses != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    List<Chapter> chapters = m_client.Book.GetChapters(verses);
                    if (chapters != null)
                    {
                        int chapter_count = chapters.Count;
                        int verse_count = 0;
                        int word_count = 0;
                        int letter_count = 0;
                        int chapter_number_sum = 0;
                        int verse_number_sum = 0;
                        int word_number_sum = 0;
                        int letter_number_sum = 0;
                        foreach (Chapter chapter in chapters)
                        {
                            if (chapter != null)
                            {
                                chapter_number_sum += chapter.SortedNumber;
                                verse_count += chapter.Verses.Count;

                                foreach (Verse verse in chapter.Verses)
                                {
                                    word_count += verse.Words.Count;
                                    letter_count += verse.LetterCount;

                                    verse_number_sum += verse.NumberInChapter;
                                    if (verse.Words != null)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            word_number_sum += word.NumberInVerse;
                                            if ((word.Letters != null) && (word.Letters.Count > 0))
                                            {
                                                foreach (Letter letter in word.Letters)
                                                {
                                                    letter_number_sum += letter.NumberInWord;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
                        DisplayMathsChapterVerseSums(verses); // update C, V, C+V, C-V, C×V, C÷V, etc.

                        DisplayTranslations(verses); // display translations for selected verses
                        DisplayTafseer(verses);
                        DisplaySymmetry();
                        DisplayCVWLSequence();
                        DisplayValuesSequence();
                        DisplayDNASequence();
                    }
                }
            }
        }
    }
    private void CalculateAndDisplayCounts(List<Verse> verses, int letter_index_in_verse1, int letter_index_in_verse2)
    {
        CalculateAndDisplayCounts(verses, letter_index_in_verse1, letter_index_in_verse2, 0, 0);
    }
    private void CalculateAndDisplayCounts(List<Verse> verses, int letter_index_in_verse1, int letter_index_in_verse2, int stopmarks, int quranmarks)
    {
        if (verses != null)
        {
            if (m_client != null)
            {
                if (m_client.Book != null)
                {
                    List<Chapter> chapters = m_client.Book.GetChapters(verses);
                    if (chapters != null)
                    {
                        int chapter_count = chapters.Count;
                        int verse_count = verses.Count;
                        int word_count = 0;
                        int letter_count = stopmarks + quranmarks;
                        int chapter_number_sum = 0;
                        int verse_number_sum = 0;
                        int word_number_sum = 0;
                        int letter_number_sum = 0;
                        foreach (Chapter chapter in chapters)
                        {
                            if (chapter != null)
                            {
                                chapter_number_sum += chapter.SortedNumber;
                            }
                        }

                        ///////////////////////////
                        // Middle Verse Part (verse1, letter_index_in_verse1, letter_index_in_verse2);
                        ///////////////////////////
                        if (verses.Count == 1)
                        {
                            Verse verse1 = verses[0];
                            if (verse1 != null)
                            {
                                verse_number_sum += verse1.NumberInChapter;

                                if (verse1.Words != null)
                                {
                                    foreach (Word word in verse1.Words)
                                    {
                                        if (word != null)
                                        {
                                            if ((word.Letters != null) && (word.Letters.Count > 0))
                                            {
                                                if ((word.Letters[word.Letters.Count - 1].NumberInVerse - 1) < letter_index_in_verse1) continue;
                                                if ((word.Letters[0].NumberInVerse - 1) > letter_index_in_verse2) break;
                                                word_count++;
                                                word_number_sum += word.NumberInVerse;

                                                foreach (Letter letter in word.Letters)
                                                {
                                                    if (letter != null)
                                                    {
                                                        if ((letter.NumberInVerse - 1) < letter_index_in_verse1) continue;
                                                        if ((letter.NumberInVerse - 1) > letter_index_in_verse2) break;
                                                        letter_count++;
                                                        letter_number_sum += letter.NumberInWord;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (verses.Count == 2)
                        {
                            ///////////////////////////
                            // End Verse Part (verse1, letter_index_in_verse1);
                            ///////////////////////////
                            Verse verse1 = verses[0];
                            if (verse1 != null)
                            {
                                verse_number_sum += verse1.NumberInChapter;

                                if (verse1.Words != null)
                                {
                                    foreach (Word word in verse1.Words)
                                    {
                                        if (word != null)
                                        {
                                            if ((word.Letters != null) && (word.Letters.Count > 0))
                                            {
                                                if ((word.Letters[word.Letters.Count - 1].NumberInVerse - 1) < letter_index_in_verse1) continue;
                                                word_count++;
                                                word_number_sum += word.NumberInVerse;

                                                foreach (Letter letter in word.Letters)
                                                {
                                                    if (letter != null)
                                                    {
                                                        if ((letter.NumberInVerse - 1) < letter_index_in_verse1) continue;
                                                        letter_count++;
                                                        letter_number_sum += letter.NumberInWord;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            ///////////////////////////
                            // Beginning Verse Part (verse2, letter_index_in_verse2);
                            ///////////////////////////
                            Verse verse2 = verses[1];
                            if (verse2 != null)
                            {
                                verse_number_sum += verse2.NumberInChapter;

                                if (verse2.Words != null)
                                {
                                    foreach (Word word in verse2.Words)
                                    {
                                        if (word != null)
                                        {
                                            if ((word.Letters != null) && (word.Letters.Count > 0))
                                            {
                                                if ((word.Letters[0].NumberInVerse - 1) > letter_index_in_verse2) break;
                                                word_count++;
                                                word_number_sum += word.NumberInVerse;

                                                foreach (Letter letter in word.Letters)
                                                {
                                                    if (letter != null)
                                                    {
                                                        if ((letter.NumberInVerse - 1) > letter_index_in_verse2) break;
                                                        letter_count++;
                                                        letter_number_sum += letter.NumberInWord;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else if (verses.Count > 2)
                        {
                            ///////////////////////////
                            // End Verse Part (verse1, letter_index_in_verse1);
                            ///////////////////////////
                            Verse verse1 = verses[0];
                            if (verse1 != null)
                            {
                                verse_number_sum += verse1.NumberInChapter;

                                if (verse1.Words != null)
                                {
                                    foreach (Word word in verse1.Words)
                                    {
                                        if (word != null)
                                        {
                                            if ((word.Letters != null) && (word.Letters.Count > 0))
                                            {
                                                if ((word.Letters[word.Letters.Count - 1].NumberInVerse - 1) < letter_index_in_verse1) continue;
                                                word_count++;
                                                word_number_sum += word.NumberInVerse;

                                                foreach (Letter letter in word.Letters)
                                                {
                                                    if (letter != null)
                                                    {
                                                        if ((letter.NumberInVerse - 1) < letter_index_in_verse1) continue;
                                                        letter_count++;
                                                        letter_number_sum += letter.NumberInWord;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            ///////////////////////////
                            // Middle Verses
                            ///////////////////////////
                            for (int i = 1; i < verses.Count - 1; i++)
                            {
                                Verse verse = verses[i];
                                if (verse != null)
                                {
                                    verse_number_sum += verse.NumberInChapter;

                                    if (verse.Words != null)
                                    {
                                        foreach (Word word in verse.Words)
                                        {
                                            word_count++;
                                            word_number_sum += word.NumberInVerse;

                                            if (word != null)
                                            {
                                                if ((word.Letters != null) && (word.Letters.Count > 0))
                                                {
                                                    foreach (Letter letter in word.Letters)
                                                    {
                                                        if (letter != null)
                                                        {
                                                            letter_count++;
                                                            letter_number_sum += letter.NumberInWord;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            ///////////////////////////
                            // Beginning Verse Part (verse2, letter_index_in_verse2);
                            ///////////////////////////
                            Verse verse2 = verses[verses.Count - 1];
                            if (verse2 != null)
                            {
                                verse_number_sum += verse2.NumberInChapter;

                                if (verse2.Words != null)
                                {
                                    foreach (Word word in verse2.Words)
                                    {
                                        if (word != null)
                                        {
                                            if ((word.Letters != null) && (word.Letters.Count > 0))
                                            {
                                                if ((word.Letters[0].NumberInVerse - 1) > letter_index_in_verse2) break;
                                                word_count++;
                                                word_number_sum += word.NumberInVerse;

                                                foreach (Letter letter in word.Letters)
                                                {
                                                    if (letter != null)
                                                    {
                                                        if ((letter.NumberInVerse - 1) > letter_index_in_verse2) break;
                                                        letter_count++;
                                                        letter_number_sum += letter.NumberInWord;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        else // verses.Count == 0
                        {
                            // do nothing
                        }
                        DisplayCounts(chapter_count, verse_count, word_count, letter_count, chapter_number_sum, verse_number_sum, word_number_sum, letter_number_sum);
                        DisplayMathsChapterVerseSums(verses); // update C, V, C+V, C-V, C×V, C÷V, etc.

                        DisplayTranslations(verses); // display translations for selected verses
                        DisplayTafseer(verses);
                        DisplaySymmetry();
                        DisplayCVWLSequence();
                        DisplayValuesSequence();
                        DisplayDNASequence();
                    }
                }
            }
        }
    }
    private void DisplayCounts(int chapter_count, int verse_count, int word_count, int letter_count, int chapter_number_sum, int verse_number_sum, int word_number_sum, int letter_number_sum)
    {
        DisplayCounts(chapter_count, verse_count, word_count, letter_count);

        if (chapter_number_sum != -1)
        {
            //ChapterNumberSumTextBox.Text = SUM_SYMBOL + Radix.Encode(chapter_number_sum, m_radix);
            //ChapterNumberSumTextBox.ForeColor = GetNumberTypeColor(ChapterNumberSumTextBox.Text.Split()[1], m_radix);
            ChapterNumberSumTextBox.Text = SUM_SYMBOL + chapter_number_sum.ToString();
            ChapterNumberSumTextBox.ForeColor = GetNumberTypeColor(chapter_number_sum);
            ChapterNumberSumTextBox.BackColor = (Numbers.Compare(chapter_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            ChapterNumberSumTextBox.Refresh();
        }

        if (verse_number_sum != -1)
        {
            //VerseNumberSumTextBox.Text = SUM_SYMBOL + Radix.Encode(verse_number_sum, m_radix);
            //VerseNumberSumTextBox.ForeColor = GetNumberTypeColor(VerseNumberSumTextBox.Text.Split()[1], m_radix);
            VerseNumberSumTextBox.Text = SUM_SYMBOL + verse_number_sum.ToString();
            VerseNumberSumTextBox.ForeColor = GetNumberTypeColor(verse_number_sum);
            VerseNumberSumTextBox.BackColor = (Numbers.Compare(verse_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            VerseNumberSumTextBox.Refresh();
        }

        if (word_number_sum != -1)
        {
            //WordNumberSumTextBox.Text = SUM_SYMBOL + Radix.Encode(word_number_sum, m_radix);
            //WordNumberSumTextBox.ForeColor = GetNumberTypeColor(WordNumberSumTextBox.Text.Split()[1], m_radix);
            WordNumberSumTextBox.Text = SUM_SYMBOL + word_number_sum.ToString();
            WordNumberSumTextBox.ForeColor = GetNumberTypeColor(word_number_sum);
            WordNumberSumTextBox.BackColor = (Numbers.Compare(word_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            WordNumberSumTextBox.Refresh();
        }

        if (letter_number_sum != -1)
        {
            //LetterNumberSumTextBox.Text = SUM_SYMBOL + Radix.Encode(letter_number_sum, m_radix);
            //LetterNumberSumTextBox.ForeColor = GetNumberTypeColor(LetterNumberSumTextBox.Text.Split()[1], m_radix);
            LetterNumberSumTextBox.Text = SUM_SYMBOL + letter_number_sum.ToString();
            LetterNumberSumTextBox.ForeColor = GetNumberTypeColor(letter_number_sum);
            LetterNumberSumTextBox.BackColor = (Numbers.Compare(letter_number_sum, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
            LetterNumberSumTextBox.Refresh();
        }
    }
    private void DisplayCounts(int chapter_count, int verse_count, int word_count, int letter_count)
    {
        ChaptersTextBox.Text = Radix.Encode(chapter_count, m_radix);
        ChaptersTextBox.ForeColor = GetNumberTypeColor(ChaptersTextBox.Text, m_radix);
        ChaptersTextBox.BackColor = (Numbers.Compare(chapter_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
        ChaptersTextBox.Refresh();

        DecimalChaptersTextBox.Text = chapter_count.ToString();
        DecimalChaptersTextBox.ForeColor = GetNumberTypeColor(chapter_count);
        DecimalChaptersTextBox.Visible = (m_radix != DEFAULT_RADIX);
        DecimalChaptersTextBox.Refresh();

        VersesTextBox.Text = Radix.Encode(verse_count, m_radix);
        VersesTextBox.ForeColor = GetNumberTypeColor(VersesTextBox.Text, m_radix);
        VersesTextBox.BackColor = (Numbers.Compare(verse_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
        VersesTextBox.Refresh();

        DecimalVersesTextBox.Text = verse_count.ToString();
        DecimalVersesTextBox.ForeColor = GetNumberTypeColor(verse_count);
        DecimalVersesTextBox.Visible = (m_radix != DEFAULT_RADIX);
        DecimalVersesTextBox.Refresh();

        WordsTextBox.Text = Radix.Encode(word_count, m_radix);
        WordsTextBox.ForeColor = GetNumberTypeColor(WordsTextBox.Text, m_radix);
        WordsTextBox.BackColor = (Numbers.Compare(word_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
        WordsTextBox.Refresh();

        DecimalWordsTextBox.Text = word_count.ToString();
        DecimalWordsTextBox.ForeColor = GetNumberTypeColor(word_count);
        DecimalWordsTextBox.Visible = (m_radix != DEFAULT_RADIX);
        DecimalWordsTextBox.Refresh();

        LettersTextBox.Text = Radix.Encode(letter_count, m_radix);
        LettersTextBox.ForeColor = GetNumberTypeColor(LettersTextBox.Text, m_radix);
        LettersTextBox.BackColor = (Numbers.Compare(letter_count, m_divisor, ComparisonOperator.DivisibleBy, 0)) ? DIVISOR_COLOR : SystemColors.ControlLight;
        LettersTextBox.Refresh();

        DecimalLettersTextBox.Text = letter_count.ToString();
        DecimalLettersTextBox.ForeColor = GetNumberTypeColor(letter_count);
        DecimalLettersTextBox.Visible = (m_radix != DEFAULT_RADIX);
        DecimalLettersTextBox.Refresh();
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Value Navigator
    ///////////////////////////////////////////////////////////////////////////////
    private Stack<int> m_navigation_undo_stack = new Stack<int>();
    private Stack<int> m_navigation_redo_stack = new Stack<int>();
    private void VerseFromNumerologyValue_Click(object sender, EventArgs e)
    {
        string verse_address = (sender as Label).Text;
        if ((verse_address.Length > 0) && (verse_address != "---:---"))
        {
            Verse verse = GetCurrentVerse();
            if (verse != null)
            {
                int current_verse_number = verse.Number;
                m_navigation_undo_stack.Push(current_verse_number);
                m_navigation_redo_stack.Clear();
                DisplayVerse(verse_address);
            }
        }
    }
    private void DisplayVerse(Verse verse)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (verse != null)
                {
                    if (verse.Chapter != null)
                    {
                        int chapter_number = verse.Chapter.SortedNumber;
                        int verse_number_in_chapter = verse.NumberInChapter;
                        int verse_number = m_client.Book.GetVerseNumber(chapter_number, verse_number_in_chapter);
                        if ((verse_number >= VerseNumericUpDown.Minimum) && (verse_number <= VerseNumericUpDown.Maximum))
                        {
                            VerseNumericUpDown.Focus();//???
                            VerseNumericUpDown.Value = verse_number;
                        }
                    }
                }
            }
        }
    }
    private void DisplayVerse(string verse_address)
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                int chapter_number = 0;
                int verse_number_in_chapter = 0;
                int verse_number = 0;

                string[] parts = verse_address.Split(':');
                if (parts.Length == 2)
                {
                    try
                    {
                        chapter_number = int.Parse(parts[0]);
                        verse_number_in_chapter = int.Parse(parts[1]);
                        verse_number = m_client.Book.GetVerseNumber(chapter_number, verse_number_in_chapter);
                        if ((verse_number >= VerseNumericUpDown.Minimum) && (verse_number <= VerseNumericUpDown.Maximum))
                        {
                            Verse verse = m_client.Book.GetVerseByVerseNumber(verse_number);
                            if (verse != null)
                            {
                                DisplayVerse(verse);
                            }
                        }
                    }
                    catch
                    {
                        // ---:--- or any non-numeric text
                        return;
                    }
                }
                UndoValueNavigationLabel.ForeColor = (m_navigation_undo_stack.Count > 0) ? Color.Yellow : Color.LightGray;
                RedoValueNavigationLabel.ForeColor = (m_navigation_redo_stack.Count > 0) ? Color.Yellow : Color.LightGray;
            }
        }
    }
    private void UndoGotoVerse()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Book.Verses != null)
                {
                    if (m_navigation_undo_stack.Count > 0)
                    {
                        Verse verse = GetCurrentVerse();
                        if (verse != null)
                        {
                            int current_verse_number = verse.Number;
                            m_navigation_redo_stack.Push(current_verse_number);
                            int verse_number = m_navigation_undo_stack.Pop();
                            string verse_address = m_client.Book.Verses[verse_number - 1].Address;
                            DisplayVerse(verse_address);
                        }
                    }
                }
            }
        }
    }
    private void RedoGotoVerse()
    {
        if (m_client != null)
        {
            if (m_client.Book != null)
            {
                if (m_client.Book.Verses != null)
                {
                    if (m_navigation_redo_stack.Count > 0)
                    {
                        Verse verse = GetCurrentVerse();
                        if (verse != null)
                        {
                            int current_verse_number = verse.Number;
                            m_navigation_undo_stack.Push(current_verse_number);
                            int verse_number = m_navigation_redo_stack.Pop();
                            string verse_address = m_client.Book.Verses[verse_number - 1].Address;
                            DisplayVerse(verse_address);
                        }
                    }
                }
            }
        }
    }
    private void UndoValueNavigationLabel_Click(object sender, EventArgs e)
    {
        UndoGotoVerse();
    }
    private void RedoValueNavigationLabel_Click(object sender, EventArgs e)
    {
        RedoGotoVerse();
    }
    private void ValueNavigatorControls_Enter(object sender, EventArgs e)
    {
        SearchGroupBox_Leave(null, null);
        this.AcceptButton = null;
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Value Drawings
    ///////////////////////////////////////////////////////////////////////////////
    //public enum DrawingShape { Lines, Spiral, SquareSpiral, Square, HGoldenRect, VGoldenRect, Cube };
    private enum DrawingType { LetterValues, WordValues, WordLengths, SearchTerms, AllahWords, WithAllahWords, Primes, AdditivePrimes, NonAdditivePrimes, GeneratePrimeDrawings };
    private DrawingShape m_drawing_shape = DrawingShape.Lines;
    private DrawingType m_current_drawing_type = DrawingType.LetterValues;
    private Bitmap m_bitmap = null;
    private void PictureBox_MouseHover(object sender, EventArgs e)
    {
        PictureBox.Focus(); // to enable zooming
    }
    private void PictureBox_MouseMove(object sender, MouseEventArgs e)
    {
        if (m_drawing_shape == DrawingShape.Lines)
        {
            int page_index = e.Y - PictureBox.Image_Y;
            int position = PictureBox.Width - (e.X - PictureBox.Image_X) - 1;

            if (m_client != null)
            {
                List<Verse> verses = null;
                switch (m_client.SearchScope)
                {
                    case SearchScope.Book:
                        {
                            if (m_client.Book != null)
                            {
                                verses = m_client.Book.Verses;
                            }
                        }
                        break;
                    case SearchScope.Selection:
                        {
                            if (m_client.Selection != null)
                            {
                                verses = m_client.Selection.Verses;
                            }
                        }
                        break;
                    case SearchScope.Result:
                        {
                            verses = m_client.FoundVerses;
                        }
                        break;
                }

                if (verses != null)
                {
                    List<Page> pages = new List<Page>();
                    if (pages != null)
                    {
                        foreach (Verse verse in verses)
                        {
                            if (!pages.Contains(verse.Page))
                            {
                                pages.Add(verse.Page);
                            }
                        }

                        if ((page_index >= 0) && (page_index < pages.Count))
                        {
                            Page found_page = pages[page_index];

                            List<Letter> page_letters = new List<Letter>();
                            foreach (Verse verse in found_page.Verses)
                            {
                                if (verse != null)
                                {
                                    foreach (Word word in verse.Words)
                                    {
                                        if (word != null)
                                        {
                                            page_letters.AddRange(word.Letters);
                                            page_letters.Add(null); // space
                                        }
                                    }
                                }
                            }

                            if (page_letters != null)
                            {
                                if ((position >= 0) && (position < page_letters.Count))
                                {
                                    Letter found_letter = page_letters[position];
                                    if (found_letter != null) // not space
                                    {
                                        Word word = found_letter.Word;
                                        if (word != null)
                                        {
                                            this.Text = Application.ProductName + " | " + "Chapter " + word.Verse.Chapter.SortedNumber;
                                            // diplay word info at application caption
                                            this.Text += SPACE_GAP +
                                            (
                                                word.Verse.Chapter.Name + SPACE_GAP +
                                                "verse " + word.Verse.NumberInChapter + "-" + word.Verse.Number + SPACE_GAP +
                                                "word " + word.NumberInVerse + "-" + word.NumberInChapter + "-" + word.Number + SPACE_GAP +
                                                word.Transliteration + SPACE_GAP +
                                                word.Text + SPACE_GAP +
                                                word.Meaning + SPACE_GAP +
                                                word.Occurrence.ToString() + "/" + word.Frequency.ToString()
                                            );

                                            ToolTip.SetToolTip(PictureBox, GetWordSummary(word));
                                        }
                                        else
                                        {
                                            ToolTip.SetToolTip(PictureBox, null);
                                        }
                                    }
                                    else
                                    {
                                        ToolTip.SetToolTip(PictureBox, null);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        else
        {
            ToolTip.SetToolTip(PictureBox, null);
        }
    }
    private void ChangeDrawingShapeLabel_Click(object sender, EventArgs e)
    {
        if (ModifierKeys == Keys.Shift)
        {
            GotoPreviousShape();
        }
        else
        {
            GotoNextShape();
        }
        ToolTip.SetToolTip(ChangeDrawingShapeLabel, m_drawing_shape.ToString());

        // update graphs as we move between selections
        if (PictureBox.Visible)
        {
            RedrawImage();
        }
    }
    private void GotoNextShape()
    {
        switch (m_drawing_shape)
        {
            case DrawingShape.Lines:
                {
                    m_drawing_shape = DrawingShape.Spiral;
                    if (File.Exists("Images/spiral.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap("Images/spiral.png");
                        DrawSearchTermsLabel.Image = new Bitmap("Images/spiral.png");
                    }
                }
                break;
            case DrawingShape.Spiral:
                {
                    m_drawing_shape = DrawingShape.SquareSpiral;
                    if (File.Exists("Images/squarespiral.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap("Images/squarespiral.png");
                        DrawSearchTermsLabel.Image = new Bitmap("Images/squarespiral.png");
                    }
                }
                break;
            case DrawingShape.SquareSpiral:
                {
                    m_drawing_shape = DrawingShape.Square;
                    if (File.Exists("Images/square.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap("Images/square.png");
                        DrawSearchTermsLabel.Image = new Bitmap("Images/square.png");
                    }
                }
                break;
            case DrawingShape.Square:
                {
                    m_drawing_shape = DrawingShape.HGoldenRect;
                    if (File.Exists("Images/hgoldenrect.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap("Images/hgoldenrect.png");
                        DrawSearchTermsLabel.Image = new Bitmap("Images/hgoldenrect.png");
                    }
                }
                break;
            case DrawingShape.HGoldenRect:
                {
                    m_drawing_shape = DrawingShape.VGoldenRect;
                    if (File.Exists("Images/vgoldenrect.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap("Images/vgoldenrect.png");
                        DrawSearchTermsLabel.Image = new Bitmap("Images/vgoldenrect.png");
                    }
                }
                break;
            case DrawingShape.VGoldenRect:
                {
                    m_drawing_shape = DrawingShape.Cube;
                    if (File.Exists("Images/cube.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap("Images/cube.png");
                        DrawSearchTermsLabel.Image = new Bitmap("Images/cube.png");
                    }
                }
                break;
            case DrawingShape.Cube:
                {
                    m_drawing_shape = DrawingShape.Lines;
                    if (File.Exists("Images/lines.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap("Images/lines.png");
                        DrawSearchTermsLabel.Image = new Bitmap("Images/lines.png");
                    }

                }
                break;
        }
    }
    private void GotoPreviousShape()
    {
        switch (m_drawing_shape)
        {
            case DrawingShape.Lines:
                {
                    m_drawing_shape = DrawingShape.Cube;
                    if (File.Exists("Images/cube.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap("Images/cube.png");
                        DrawSearchTermsLabel.Image = new Bitmap("Images/cube.png");
                    }
                }
                break;
            case DrawingShape.Spiral:
                {
                    m_drawing_shape = DrawingShape.Lines;
                    if (File.Exists("Images/lines.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap("Images/lines.png");
                        DrawSearchTermsLabel.Image = new Bitmap("Images/lines.png");
                    }
                }
                break;
            case DrawingShape.SquareSpiral:
                {
                    m_drawing_shape = DrawingShape.Spiral;
                    if (File.Exists("Images/spiral.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap("Images/spiral.png");
                        DrawSearchTermsLabel.Image = new Bitmap("Images/spiral.png");
                    }
                }
                break;
            case DrawingShape.Square:
                {
                    m_drawing_shape = DrawingShape.SquareSpiral;
                    if (File.Exists("Images/squarespiral.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap("Images/squarespiral.png");
                        DrawSearchTermsLabel.Image = new Bitmap("Images/squarespiral.png");
                    }
                }
                break;
            case DrawingShape.HGoldenRect:
                {
                    m_drawing_shape = DrawingShape.Square;
                    if (File.Exists("Images/square.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap("Images/square.png");
                        DrawSearchTermsLabel.Image = new Bitmap("Images/square.png");
                    }
                }
                break;
            case DrawingShape.VGoldenRect:
                {
                    m_drawing_shape = DrawingShape.HGoldenRect;
                    if (File.Exists("Images/hgoldenrect.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap("Images/hgoldenrect.png");
                        DrawSearchTermsLabel.Image = new Bitmap("Images/hgoldenrect.png");
                    }
                }
                break;
            case DrawingShape.Cube:
                {
                    m_drawing_shape = DrawingShape.VGoldenRect;
                    if (File.Exists("Images/vgoldenrect.png"))
                    {
                        ChangeDrawingShapeLabel.Image = new Bitmap("Images/vgoldenrect.png");
                        DrawSearchTermsLabel.Image = new Bitmap("Images/vgoldenrect.png");
                    }
                }
                break;
        }
    }
    private void DrawLetterValuesLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                List<Verse> verses = null;
                switch (m_client.SearchScope)
                {
                    case SearchScope.Book:
                        {
                            if (m_client.Book != null)
                            {
                                verses = m_client.Book.Verses;
                            }
                        }
                        break;
                    case SearchScope.Selection:
                        {
                            if (m_client.Selection != null)
                            {
                                verses = m_client.Selection.Verses;
                            }
                        }
                        break;
                    case SearchScope.Result:
                        {
                            verses = m_client.FoundVerses;
                        }
                        break;
                }

                if (verses != null)
                {
                    ShowPictureBox();
                    m_current_drawing_type = DrawingType.LetterValues;
                    HeaderLabel.Text = m_current_drawing_type.ToString();
                    HeaderLabel.Refresh();

                    m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
                    if (m_bitmap != null)
                    {
                        this.PictureBox.Image = m_bitmap;

                        List<long> values = m_client.CalculateAllLetterValues(verses);
                        if (m_drawing_shape == DrawingShape.Cube)
                        {
                            // cubic-root
                            int width = (int)Math.Floor(Math.Pow(values.Count + 1, 1.0D / 3.0D));
                            int height = width;
                            int layers = width;

                            for (int n = 0; n < layers; n++)
                            {
                                int value_index = n * (width * height);
                                int value_count = (width * height);
                                Drawing.DrawValues(m_bitmap, values.GetRange(value_index, value_count), Color.Pink, m_drawing_shape);
                                PictureBox.Refresh();
                                Thread.Sleep(100);
                            }
                        }
                        else
                        {
                            Drawing.DrawValues(m_bitmap, values, Color.Pink, m_drawing_shape);
                            PictureBox.Refresh();
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message);
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DrawWordValuesLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                List<Verse> verses = null;
                switch (m_client.SearchScope)
                {
                    case SearchScope.Book:
                        {
                            if (m_client.Book != null)
                            {
                                verses = m_client.Book.Verses;
                            }
                        }
                        break;
                    case SearchScope.Selection:
                        {
                            if (m_client.Selection != null)
                            {
                                verses = m_client.Selection.Verses;
                            }
                        }
                        break;
                    case SearchScope.Result:
                        {
                            verses = m_client.FoundVerses;
                        }
                        break;
                }

                if (verses != null)
                {
                    ShowPictureBox();
                    m_current_drawing_type = DrawingType.WordValues;
                    HeaderLabel.Text = m_current_drawing_type.ToString();
                    HeaderLabel.Refresh();

                    m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
                    if (m_bitmap != null)
                    {
                        this.PictureBox.Image = m_bitmap;

                        List<long> values = m_client.CalculateAllWordValues(verses);
                        if (m_drawing_shape == DrawingShape.Cube)
                        {
                            // cubic-root
                            int width = (int)Math.Floor(Math.Pow(values.Count + 1, 1.0D / 3.0D));
                            int height = width;
                            int layers = width;

                            for (int n = 0; n < layers; n++)
                            {
                                int value_index = n * (width * height);
                                int value_count = (width * height);
                                Drawing.DrawValues(m_bitmap, values.GetRange(value_index, value_count), Color.Pink, m_drawing_shape);
                                PictureBox.Refresh();
                            }
                        }
                        else
                        {
                            Drawing.DrawValues(m_bitmap, values, Color.Pink, m_drawing_shape);
                            PictureBox.Refresh();
                        }
                    }
                }
            }
        }
        catch
        {
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DrawSearchTermsLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                List<Verse> verses = null;
                switch (m_client.SearchScope)
                {
                    case SearchScope.Book:
                        {
                            if (m_client.Book != null)
                            {
                                verses = m_client.Book.Verses;
                            }
                        }
                        break;
                    case SearchScope.Selection:
                        {
                            if (m_client.Selection != null)
                            {
                                verses = m_client.Selection.Verses;
                            }
                        }
                        break;
                    case SearchScope.Result:
                        {
                            verses = m_client.FoundVerses;
                        }
                        break;
                }

                if (verses != null)
                {
                    ShowPictureBox();
                    m_current_drawing_type = DrawingType.SearchTerms;

                    m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
                    if (m_bitmap != null)
                    {
                        this.PictureBox.Image = m_bitmap;

                        int count = 0;
                        int given_word_count = 0;
                        string text = FindByTextTextBox.Text.Trim().Simplify29();
                        text = text.Replace("  ", " ");
                        string[] terms = text.Split(' ');

                        List<Page> pages = new List<Page>();
                        if (pages != null)
                        {
                            foreach (Verse verse in verses)
                            {
                                if (!pages.Contains(verse.Page))
                                {
                                    pages.Add(verse.Page);
                                }
                            }

                            List<List<long>> valuess = new List<List<long>>();
                            foreach (Page page in pages)
                            {
                                List<Word> words = new List<Word>();
                                foreach (Verse verse in page.Verses)
                                {
                                    words.AddRange(verse.Words);
                                }

                                List<long> values = new List<long>();
                                foreach (Word word in words)
                                {
                                    bool found = false;
                                    for (int i = 0; i < terms.Length; i++)
                                    {
                                        if (m_text_wordness == TextWordness.WholeWord)
                                        {
                                            if (word.Text.Simplify29() == terms[i])
                                            {
                                                values.Add(i + 1L);
                                                given_word_count++;
                                                found = true;
                                                break;
                                            }
                                        }
                                        else
                                        {
                                            if (word.Text.Simplify29().Contains(terms[i]))
                                            {
                                                values.Add(i + 1L);
                                                given_word_count++;
                                                found = true;
                                                break;
                                            }
                                        }
                                    }
                                    if (!found)
                                    {
                                        values.Add(0L);
                                    }
                                    count++;
                                }
                                valuess.Add(values);
                            }

                            List<List<long>> lengthss = new List<List<long>>();
                            foreach (Page page in pages)
                            {
                                List<Word> words = new List<Word>();
                                foreach (Verse verse in page.Verses)
                                {
                                    words.AddRange(verse.Words);
                                }

                                List<long> lengths = new List<long>();
                                foreach (Word word in words)
                                {
                                    lengths.Add(word.Letters.Count);
                                }
                                lengthss.Add(lengths);
                            }

                            Dictionary<long, Color> colors = new Dictionary<long, Color>();
                            colors.Add(0L, Color.FromArgb(32, 32, 32));
                            colors.Add(1L, Color.Pink);
                            colors.Add(2L, Color.LightBlue);
                            colors.Add(3L, Color.Lime);
                            colors.Add(4L, Color.Green);
                            colors.Add(5L, Color.Blue);
                            colors.Add(6L, Color.Purple);
                            colors.Add(7L, Color.White);
                            if (m_drawing_shape == DrawingShape.Lines)
                            {
                                Drawing.DrawPageLines(m_bitmap, lengthss, valuess, colors);
                            }
                            else
                            {
                                List<long> list = new List<long>();
                                foreach (List<long> values in valuess)
                                {
                                    list.AddRange(values);
                                }
                                Drawing.DrawPoints(m_bitmap, list, colors, m_drawing_shape);
                            }
                            PictureBox.Refresh();
                        }

                        StringBuilder str = new StringBuilder();
                        str.Append(text + " words = " + given_word_count);
                        HeaderLabel.Text = str.ToString();
                        HeaderLabel.Refresh();

                        str.Length = 0;
                        str.AppendLine("Quran words\t= " + count);
                        str.AppendLine(text + " words\t= " + given_word_count);
                    }
                }
            }
        }
        catch
        {
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DrawWordAllahLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                List<Verse> verses = null;
                switch (m_client.SearchScope)
                {
                    case SearchScope.Book:
                        {
                            if (m_client.Book != null)
                            {
                                verses = m_client.Book.Verses;
                            }
                        }
                        break;
                    case SearchScope.Selection:
                        {
                            if (m_client.Selection != null)
                            {
                                verses = m_client.Selection.Verses;
                            }
                        }
                        break;
                    case SearchScope.Result:
                        {
                            verses = m_client.FoundVerses;
                        }
                        break;
                }

                if (verses != null)
                {
                    ShowPictureBox();
                    m_current_drawing_type = DrawingType.AllahWords;

                    List<long> values = new List<long>();
                    m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
                    if (m_bitmap != null)
                    {
                        this.PictureBox.Image = m_bitmap;

                        int count = 0;
                        int Allah_word_count = 0;

                        foreach (Verse verse in verses)
                        {
                            foreach (Word word in verse.Words)
                            {
                                // always simplify29 for Allah word comparison
                                string simplified_text = word.Text.Simplify29();

                                if (simplified_text == "الله")
                                {
                                    values.Add(1L);
                                    Allah_word_count++;
                                }
                                else
                                {
                                    values.Add(0L);
                                }
                                count++;
                            }
                        }

                        StringBuilder str = new StringBuilder();
                        str.Append("Allah words = " + Allah_word_count);
                        HeaderLabel.Text = str.ToString();
                        HeaderLabel.Refresh();

                        str.Length = 0;
                        str.AppendLine("Quran words\t= " + count);
                        str.AppendLine("Allah words\t= " + Allah_word_count);
                    }

                    Dictionary<long, Color> colors = new Dictionary<long, Color>();
                    colors.Add(0L, Color.FromArgb(32, 32, 32));
                    colors.Add(1L, Color.Pink);
                    if (m_drawing_shape == DrawingShape.Lines)
                    {
                        FindByTextTextBox.Text = "الله";
                        DrawSearchTermsLabel_Click(null, null);
                    }
                    else
                    {
                        Drawing.DrawPoints(m_bitmap, values, colors, m_drawing_shape);
                    }
                    PictureBox.Refresh();
                }
            }
        }
        catch
        {
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DrawWordsWithAllahLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            if (m_client != null)
            {
                List<Verse> verses = null;
                switch (m_client.SearchScope)
                {
                    case SearchScope.Book:
                        {
                            if (m_client.Book != null)
                            {
                                verses = m_client.Book.Verses;
                            }
                        }
                        break;
                    case SearchScope.Selection:
                        {
                            if (m_client.Selection != null)
                            {
                                verses = m_client.Selection.Verses;
                            }
                        }
                        break;
                    case SearchScope.Result:
                        {
                            verses = m_client.FoundVerses;
                        }
                        break;
                }

                if (verses != null)
                {
                    ShowPictureBox();
                    m_current_drawing_type = DrawingType.WithAllahWords;

                    List<long> values = new List<long>();
                    m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
                    if (m_bitmap != null)
                    {
                        this.PictureBox.Image = m_bitmap;

                        int count = 0;
                        int Allah_word_count = 0;
                        int with_Allah_word_count = 0;
                        int with_lillah_word_count = 0;

                        foreach (Verse verse in verses)
                        {
                            foreach (Word word in verse.Words)
                            {
                                // always simplify29 for Allah word comparison
                                string simplified_text = word.Text.Simplify29();

                                if (simplified_text == "الله") // "Allah"
                                {
                                    values.Add(1);
                                    Allah_word_count++;
                                }
                                else if ( // Prefix"Allah", Prefix"Allah"Suffix, "Allah"Suffix
                                          (simplified_text.Contains("الله")) &&        // +Allah+ words
                                          (!simplified_text.Contains("اللهو")) &&   // 1 word
                                          (!simplified_text.Contains("اللهب"))      // 1 word
                                        )
                                {
                                    values.Add(2L);
                                    with_Allah_word_count++;
                                }
                                else if ( // Prefix"Lillah", Prefix"Lillah"Suffix, "Lillah"Suffix
                                          (simplified_text.Contains("لله")) &&        // +LiAllah+
                                          (!simplified_text.Contains("اللهو")) &&   // 1 words
                                          (!simplified_text.Contains("اللهب")) &&   // 1 words
                                          (!simplified_text.Contains("ضلله")) &&    // 8 words
                                          (!simplified_text.Contains("ظلله")) &&    // 3 words
                                          (!simplified_text.Contains("كلله")) &&    // 2 words
                                          (!simplified_text.Contains("خلله")) &&    // 5 words
                                          (!simplified_text.Contains("سلله")) &&    // 2 words
                                          (!simplified_text.Contains("للهدي"))      // 1 word
                                        )
                                {
                                    values.Add(3L);
                                    with_lillah_word_count++;
                                }
                                else
                                {
                                    values.Add(0L);
                                }
                                count++;
                            }
                        }

                        StringBuilder str = new StringBuilder();
                        str.Append("Allah words = " + Allah_word_count + " | ");
                        str.Append("+Allah+ = " + with_Allah_word_count + " | ");
                        str.Append("+Lillah+ = " + with_lillah_word_count + " | ");
                        str.Append("Total = " + (Allah_word_count + with_Allah_word_count + with_lillah_word_count));
                        HeaderLabel.Text = str.ToString();
                        HeaderLabel.Refresh();

                        str.Length = 0;
                        str.AppendLine("Quran words\t= " + count);
                        str.AppendLine("Allah words\t= " + Allah_word_count);
                        str.AppendLine("Words with Allah\t= " + with_Allah_word_count + "\t  " + "No اللهو اللهب");
                        str.AppendLine("Words with Lillah\t= " + with_lillah_word_count + "\t  " + "No اللهو اللهب خلله كللة ضللة ظلله سللة للهدى");
                        str.AppendLine("All Allah words\t= " + (Allah_word_count + with_Allah_word_count + with_lillah_word_count));
                        str.AppendLine();
                        str.AppendLine("Excluding:");
                        str.AppendLine("2:16  الضللة");
                        str.AppendLine("2:175 الضللة");
                        str.AppendLine("4:44  الضللة");
                        str.AppendLine("4:12  كللة");
                        str.AppendLine("4:176 الكللة");
                        str.AppendLine("6:39  يضلله");
                        str.AppendLine("7:30  الضللة");
                        str.AppendLine("7:61  ضللة");
                        str.AppendLine("13:15 وظللهم");
                        str.AppendLine("16:36 الضللة");
                        str.AppendLine("16:48 ظلله");
                        str.AppendLine("17:91 خللها");
                        str.AppendLine("18:33 خللهما");
                        str.AppendLine("19:75 الضللة");
                        str.AppendLine("23:12 سللة");
                        str.AppendLine("24:43 خلله");
                        str.AppendLine("27:61 خللها");
                        str.AppendLine("30:48 خلله");
                        str.AppendLine("32:8  سللة");
                        str.AppendLine("62:11 اللهو");
                        str.AppendLine("76:14 ظللها");
                        str.AppendLine("77:31 اللهب");
                        str.AppendLine("92:12 للهدى");
                    }

                    Dictionary<long, Color> colors = new Dictionary<long, Color>();
                    colors.Add(0L, Color.FromArgb(32, 32, 32));
                    colors.Add(1L, Color.Pink);
                    colors.Add(2L, Color.LightBlue);
                    colors.Add(3L, Color.Lime);
                    if (m_drawing_shape == DrawingShape.Lines)
                    {
                        FindByTextTextBox.Text = "الله لله";
                        DrawSearchTermsLabel_Click(null, null);
                    }
                    else
                    {
                        Drawing.DrawPoints(m_bitmap, values, colors, m_drawing_shape);
                    }
                    PictureBox.Refresh();
                }
            }
        }
        catch
        {
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DisplayWordsWithAllahLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            string filename = Globals.HELP_FOLDER + "/" + "AllahWords.txt";
            if (File.Exists(filename))
            {
                FileHelper.WaitForReady(filename);

                System.Diagnostics.Process.Start("Notepad.exe", filename);
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show(ex.Message, Application.ProductName);
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DrawPrimesLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            ShowPictureBox();
            m_current_drawing_type = DrawingType.Primes;
            HeaderLabel.Text = m_current_drawing_type.ToString();
            HeaderLabel.Refresh();

            m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
            if (m_bitmap != null)
            {
                this.PictureBox.Image = m_bitmap;

                int width = (m_bitmap.Width > m_bitmap.Height) ? m_bitmap.Width : m_bitmap.Height;
                int height = width;
                int max = width * height;
                List<long> values = new List<long>(max);
                for (int i = 0; i < max; i++)
                {
                    if (Numbers.IsAdditivePrime(i + 1))
                    {
                        values.Add(2L);
                    }
                    else if (Numbers.IsNonAdditivePrime(i + 1))
                    {
                        values.Add(1L);
                    }
                    else
                    {
                        values.Add(0L);
                    }
                }

                Dictionary<long, Color> colors = new Dictionary<long, Color>();
                colors.Add(0L, Color.FromArgb(32, 32, 32));
                colors.Add(1L, Color.Pink);
                colors.Add(2L, Color.LightBlue);
                Drawing.DrawPoints(m_bitmap, values, colors, m_drawing_shape);
                PictureBox.Refresh();
            }
        }
        catch
        {
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DrawAdditivePrimesLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            ShowPictureBox();
            m_current_drawing_type = DrawingType.AdditivePrimes;
            HeaderLabel.Text = m_current_drawing_type.ToString();
            HeaderLabel.Refresh();

            m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
            if (m_bitmap != null)
            {
                this.PictureBox.Image = m_bitmap;

                int width = (m_bitmap.Width > m_bitmap.Height) ? m_bitmap.Width : m_bitmap.Height;
                int height = width;
                int max = width * height;
                List<long> values = new List<long>(max);
                for (int i = 0; i < max; i++)
                {
                    if (Numbers.IsAdditivePrime(i + 1))
                    {
                        values.Add(2L);
                    }
                    else
                    {
                        values.Add(0L);
                    }
                }

                Dictionary<long, Color> colors = new Dictionary<long, Color>();
                colors.Add(0L, Color.FromArgb(32, 32, 32));
                colors.Add(1L, Color.Pink);
                colors.Add(2L, Color.LightBlue);
                Drawing.DrawPoints(m_bitmap, values, colors, m_drawing_shape);
                PictureBox.Refresh();
            }
        }
        catch
        {
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void DrawNonAdditivePrimesLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            ShowPictureBox();
            m_current_drawing_type = DrawingType.NonAdditivePrimes;
            HeaderLabel.Text = m_current_drawing_type.ToString();
            HeaderLabel.Refresh();

            m_bitmap = new Bitmap(PictureBox.Width, PictureBox.Height, PixelFormat.Format24bppRgb);
            if (m_bitmap != null)
            {
                this.PictureBox.Image = m_bitmap;

                int width = (m_bitmap.Width > m_bitmap.Height) ? m_bitmap.Width : m_bitmap.Height;
                int height = width;
                int max = width * height;
                List<long> values = new List<long>(max);
                for (int i = 0; i < max; i++)
                {
                    if (Numbers.IsNonAdditivePrime(i + 1))
                    {
                        values.Add(1L);
                    }
                    else
                    {
                        values.Add(0L);
                    }
                }

                Dictionary<long, Color> colors = new Dictionary<long, Color>();
                colors.Add(0L, Color.FromArgb(32, 32, 32));
                colors.Add(1L, Color.Pink);
                colors.Add(2L, Color.LightBlue);
                Drawing.DrawPoints(m_bitmap, values, colors, m_drawing_shape);
                PictureBox.Refresh();
            }
        }
        catch
        {
            HidePictureBox();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void GeneratePrimeDrawingsLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            m_current_drawing_type = DrawingType.GeneratePrimeDrawings;
            Drawing.GeneratePrimeDrawings(Color.LightGreen, Color.CornflowerBlue);
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void ShowPictureBox()
    {
        PictureBox.Visible = true;
        PictureBox.BringToFront();

        // restore graphic zoom icons
        ZoomInLabel.Enabled = (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
        ZoomOutLabel.Enabled = (m_graphics_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));
    }
    private void HidePictureBox()
    {
        PictureBox.Visible = false;

        // restore text heading
        UpdateHeaderLabel();

        // restore text zoom icons
        ZoomInLabel.Enabled = (m_text_zoom_factor <= (m_max_zoom_factor - m_zoom_factor_increment + m_error_margin));
        ZoomOutLabel.Enabled = (m_text_zoom_factor >= (m_min_zoom_factor + m_zoom_factor_increment - m_error_margin));
    }
    private void RedrawImage()
    {
        if (PictureBox.Visible)
        {
            switch (m_current_drawing_type)
            {
                case DrawingType.LetterValues:
                    DrawLetterValuesLabel_Click(null, null);
                    break;
                case DrawingType.WordValues:
                    DrawWordAllahLabel_Click(null, null);
                    break;
                case DrawingType.WordLengths:
                    DrawWordValuesLabel_Click(null, null);
                    break;
                case DrawingType.SearchTerms:
                    DrawSearchTermsLabel_Click(null, null);
                    break;
                case DrawingType.AllahWords:
                    DrawWordAllahLabel_Click(null, null);
                    break;
                case DrawingType.WithAllahWords:
                    DrawWordsWithAllahLabel_Click(null, null);
                    break;
                case DrawingType.Primes:
                    DrawPrimesLabel_Click(null, null);
                    break;
                case DrawingType.AdditivePrimes:
                    DrawAdditivePrimesLabel_Click(null, null);
                    break;
                case DrawingType.NonAdditivePrimes:
                    DrawNonAdditivePrimesLabel_Click(null, null);
                    break;
                default:
                    break;
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Statistics
    ///////////////////////////////////////////////////////////////////////////////
    private List<char> m_selected_letters = new List<char>();
    private void LetterFrequencyListView_ColumnClick(object sender, ColumnClickEventArgs e)
    {
        if (sender is ListView)
        {
            ListView listview = sender as ListView;
            try
            {
                if (m_client != null)
                {
                    m_client.SortLetterStatistics((StatisticSortMethod)e.Column);
                    DisplayLetterFrequencies();

                    // display sort marker
                    string sort_marker = (LetterStatistic.SortOrder == StatisticSortOrder.Ascending) ? "▼" : "▲";
                    // empty all sort markers
                    foreach (ColumnHeader column in listview.Columns)
                    {
                        if (column.Text.EndsWith("▲"))
                        {
                            column.Text = column.Text.Replace("▲", " ");
                        }
                        else if (column.Text.EndsWith("▼"))
                        {
                            column.Text = column.Text.Replace("▼", " ");
                        }
                    }
                    // mark clicked column
                    listview.Columns[e.Column].Text = listview.Columns[e.Column].Text.Replace("  ", " " + sort_marker);
                }
            }
            catch
            {
                // log exception
            }
        }
    }
    private void LetterFrequencyListView_SelectedIndexChanged(object sender, EventArgs e)
    {
        // only update m_selected_letters if user manually select items
        // otherwise we would lose items in they don't appear in a selection
        // and would give wrong results for subsequent selections with these items 
        if (LetterFrequencyListView.Focused)
        {
            m_selected_letters.Clear();
            if (LetterFrequencyListView.SelectedIndices.Count > 0)
            {
                foreach (ListViewItem item in LetterFrequencyListView.SelectedItems)
                {
                    m_selected_letters.Add(item.SubItems[1].Text[0]);
                }
            }
        }

        DisplayLetterFrequenciesTotals();

        FindByFrequencyButton.Enabled = ((m_find_by_phrase) && (m_phrase_text.Length > 0))
                                        ||
                                        ((!m_find_by_phrase) && (LetterFrequencyListView.SelectedIndices.Count > 0));
    }
    private void LetterFrequencyListView_DoubleClick(object sender, EventArgs e)
    {
        char character = '\0';
        Dictionary<char, List<int>> letter_positions = new Dictionary<char, List<int>>();
        Dictionary<char, List<int>> letter_distances = new Dictionary<char, List<int>>();
        foreach (ListViewItem item in LetterFrequencyListView.SelectedItems)
        {
            character = item.SubItems[1].Text[0];
            letter_positions.Add(character, new List<int>());
            letter_distances.Add(character, new List<int>());
        }

        if (!String.IsNullOrEmpty(m_current_text))
        {
            string text = m_current_text.SimplifyTo(m_client.NumerologySystem.TextMode);
            text = text.Replace("\r", "");
            text = text.Replace("\n", "");
            text = text.Replace("\t", "");
            text = text.Replace("_", "");
            text = text.Replace(" ", "");
            text = text.Replace(Constants.OPEN_BRACKET, "");
            text = text.Replace(Constants.CLOSE_BRACKET, "");
            foreach (char c in Constants.INDIAN_DIGITS)
            {
                text = text.Replace(c.ToString(), "");
            }

            foreach (char c in letter_positions.Keys)
            {
                int pos = text.IndexOf(c);
                if (pos > -1)
                {
                    letter_positions[c].Add(pos + 1);
                    for (int i = pos + 1; i < text.Length; i++)
                    {
                        if (text[i] == c)
                        {
                            letter_positions[c].Add(i + 1);

                            int letter_distance = i - pos;
                            if (letter_distances.ContainsKey(c))
                            {
                                letter_distances[c].Add(letter_distance);
                            }
                            pos = i;
                        }
                    }
                }
            }

            StringBuilder str = new StringBuilder();
            foreach (char c in letter_positions.Keys)
            {
                str.Append(c.ToString() + " positions" + "\t");
                foreach (int ld in letter_positions[c])
                {
                    str.Append(ld.ToString() + ",");
                }
                if (str.Length > 0)
                {
                    str.Remove(str.Length - 1, 1);
                }
                str.AppendLine();
            }

            str.AppendLine();
            foreach (char c in letter_distances.Keys)
            {
                str.Append(c.ToString() + " distances" + "\t");
                foreach (int ld in letter_distances[c])
                {
                    str.Append(ld.ToString() + ",");
                }
                if (str.Length > 0)
                {
                    str.Remove(str.Length - 1, 1);
                }
                str.AppendLine();
            }

            string filename = character.ToString() + "_" + "LetterPositionsAndDistances" + Globals.OUTPUT_FILE_EXT;
            if (Directory.Exists(Globals.RESEARCH_FOLDER))
            {
                string path = Globals.RESEARCH_FOLDER + "/" + filename;
                FileHelper.SaveText(path, str.ToString());
                FileHelper.DisplayFile(path);
            }
        }

    }
    private void PositionsToolStripMenuItem_Click(object sender, EventArgs e)
    {
        Dictionary<char, List<int>> letter_positions = new Dictionary<char, List<int>>();
        foreach (ListViewItem item in LetterFrequencyListView.SelectedItems)
        {
            char character = item.SubItems[1].Text[0];
            letter_positions.Add(character, new List<int>());
        }

        if (!String.IsNullOrEmpty(m_current_text))
        {
            string text = m_current_text.SimplifyTo(m_client.NumerologySystem.TextMode);
            text = text.Replace("\r", "");
            text = text.Replace("\n", "");
            text = text.Replace("\t", "");
            text = text.Replace("_", "");
            text = text.Replace(" ", "");
            text = text.Replace(Constants.OPEN_BRACKET, "");
            text = text.Replace(Constants.CLOSE_BRACKET, "");
            foreach (char c in Constants.INDIAN_DIGITS)
            {
                text = text.Replace(c.ToString(), "");
            }

            foreach (char character in letter_positions.Keys)
            {
                int pos = text.IndexOf(character);
                if (pos > -1)
                {
                    letter_positions[character].Add(pos + 1);
                    for (int i = pos + 1; i < text.Length; i++)
                    {
                        if (text[i] == character)
                        {
                            letter_positions[character].Add(i + 1);
                        }
                    }
                }
            }

            StringBuilder str = new StringBuilder();
            foreach (char character in letter_positions.Keys)
            {
                str.Append(character.ToString() + " positions" + "\t");
                foreach (int ld in letter_positions[character])
                {
                    str.Append(ld.ToString() + ",");
                }
                if (str.Length > 0)
                {
                    str.Remove(str.Length - 1, 1);
                }
                str.AppendLine();
            }

            string filename = "LetterPositions" + Globals.OUTPUT_FILE_EXT;
            if (Directory.Exists(Globals.RESEARCH_FOLDER))
            {
                string path = Globals.RESEARCH_FOLDER + "/" + filename;
                FileHelper.SaveText(path, str.ToString());
                FileHelper.DisplayFile(path);
            }
        }
    }
    private void DistancesToolStripMenuItem_Click(object sender, EventArgs e)
    {
        Dictionary<char, List<int>> letter_distances = new Dictionary<char, List<int>>();
        foreach (ListViewItem item in LetterFrequencyListView.SelectedItems)
        {
            char character = item.SubItems[1].Text[0];
            letter_distances.Add(character, new List<int>());
        }

        if (!String.IsNullOrEmpty(m_current_text))
        {
            string text = m_current_text.SimplifyTo(m_client.NumerologySystem.TextMode);
            text = text.Replace("\r", "");
            text = text.Replace("\n", "");
            text = text.Replace("\t", "");
            text = text.Replace("_", "");
            text = text.Replace(" ", "");
            text = text.Replace(Constants.OPEN_BRACKET, "");
            text = text.Replace(Constants.CLOSE_BRACKET, "");
            foreach (char c in Constants.INDIAN_DIGITS)
            {
                text = text.Replace(c.ToString(), "");
            }

            foreach (char character in letter_distances.Keys)
            {
                int pos = text.IndexOf(character);
                if (pos > -1)
                {
                    for (int i = pos + 1; i < text.Length; i++)
                    {
                        if (text[i] == character)
                        {
                            int letter_distance = i - pos;
                            if (letter_distances.ContainsKey(character))
                            {
                                letter_distances[character].Add(letter_distance);
                            }
                            pos = i;
                        }
                    }
                }
            }

            StringBuilder str = new StringBuilder();
            foreach (char character in letter_distances.Keys)
            {
                str.Append(character.ToString() + " distances" + "\t");
                foreach (int ld in letter_distances[character])
                {
                    str.Append(ld.ToString() + ",");
                }
                if (str.Length > 0)
                {
                    str.Remove(str.Length - 1, 1);
                }
                str.AppendLine();
            }

            string filename = "LetterDistances" + Globals.OUTPUT_FILE_EXT;
            if (Directory.Exists(Globals.RESEARCH_FOLDER))
            {
                string path = Globals.RESEARCH_FOLDER + "/" + filename;
                FileHelper.SaveText(path, str.ToString());
                FileHelper.DisplayFile(path);
            }
        }
    }
    private void BuildLetterFrequencies()
    {
        if (m_client != null)
        {
            if (
                 (m_text_display_mode == TextDisplayMode.None) ||
                 (m_text_display_mode == TextDisplayMode.TranslationOnly)
               )
            {
                if (!m_found_verses_displayed)
                {
                    if (m_client.Selection != null)
                    {
                        m_current_text = m_client.Selection.Text;
                    }
                }
            }

            if (!String.IsNullOrEmpty(m_current_text))
            {
                if (FindByFrequencyPhraseTextBox.SelectionLength > 0)
                {
                    m_current_phrase = FindByFrequencyPhraseTextBox.SelectedText;
                }
                else
                {
                    m_current_phrase = FindByFrequencyPhraseTextBox.Text;
                }

                if (m_current_phrase.Length > 0)
                {
                    m_client.BuildLetterStatistics(m_current_text, m_current_phrase, m_frequency_search_type, m_with_diacritics);
                }
                else
                {
                    m_client.BuildLetterStatistics(m_current_text, m_with_diacritics);
                }
            }
            else
            {
                if (m_client.LetterStatistics != null)
                {
                    m_client.LetterStatistics.Clear();
                }
            }
        }
    }
    private void DisplayLetterFrequencies()
    {
        if (m_client != null)
        {
            if (m_client.LetterStatistics != null)
            {
                LetterFrequencyListView.Items.Clear();
                if (m_client.LetterStatistics.Count > 0)
                {
                    List<int> selected_indexes = new List<int>();
                    for (int i = 0; i < m_client.LetterStatistics.Count; i++)
                    {
                        string[] item_parts = new string[3];
                        item_parts[0] = m_client.LetterStatistics[i].Order.ToString();
                        item_parts[1] = m_client.LetterStatistics[i].Letter.ToString();
                        item_parts[2] = m_client.LetterStatistics[i].Frequency.ToString();
                        LetterFrequencyListView.Items.Add(new ListViewItem(item_parts, i));

                        // re-select user items if any were selected for previous selection
                        if (m_selected_letters.Contains(m_client.LetterStatistics[i].Letter))
                        {
                            selected_indexes.Add(i);
                        }
                    }
                    // must be done after adding all items
                    foreach (int index in selected_indexes)
                    {
                        LetterFrequencyListView.SelectedIndices.Add(index);
                        LetterFrequencyListView.EnsureVisible(index);
                    }
                }

                DisplayLetterFrequenciesTotals();

                // reset sort-markers
                foreach (ColumnHeader column in LetterFrequencyListView.Columns)
                {
                    if (column.Text.EndsWith("▲"))
                    {
                        column.Text = column.Text.Replace("▲", " ");
                    }
                    else if (column.Text.EndsWith("▼"))
                    {
                        column.Text = column.Text.Replace("▼", " ");
                    }
                }
                LetterFrequencyListView.Columns[0].Text = LetterFrequencyListView.Columns[0].Text.Replace("  ", " ▲");
                LetterFrequencyListView.Refresh();
            }
        }
    }
    private void DisplayLetterFrequenciesTotals()
    {
        try
        {
            int count = 0;
            long sum = 0L;
            if (LetterFrequencyListView.SelectedIndices.Count > 0)
            {
                count = LetterFrequencyListView.SelectedIndices.Count;
                foreach (ListViewItem item in LetterFrequencyListView.SelectedItems)
                {
                    sum += long.Parse(item.SubItems[2].Text);
                }
            }
            else
            {
                count = LetterFrequencyListView.Items.Count;
                foreach (ListViewItem item in LetterFrequencyListView.Items)
                {
                    sum += long.Parse(item.SubItems[2].Text);
                }
            }

            LetterFrequencyCountLabel.Text = count.ToString();
            LetterFrequencyCountLabel.ForeColor = GetNumberTypeColor(count);
            LetterFrequencyCountLabel.Refresh();

            LetterFrequencySumLabel.Text = sum.ToString();
            LetterFrequencySumLabel.ForeColor = GetNumberTypeColor(sum);
            LetterFrequencySumLabel.Refresh();
        }
        catch
        {
            // log exception
        }
    }

    private void LetterFrequencyInspectLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            InspectLetterStatistics();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void InspectLetterStatistics()
    {
        if (m_client != null)
        {
            string text = m_current_text;
            if (!String.IsNullOrEmpty(text))
            {
                if (!String.IsNullOrEmpty(m_current_phrase))
                {
                    string filename = DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss") + "_" + ".txt";
                    if (m_client.NumerologySystem != null)
                    {
                        filename = DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss") + "_" + m_client.NumerologySystem.Name + ".txt";
                    }

                    m_client.SaveLetterStatistics(filename, text, m_current_phrase);
                }
                else
                {
                    string filename = DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss") + "_" + ".txt";
                    if (m_client.NumerologySystem != null)
                    {
                        filename = DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss") + "_" + m_client.NumerologySystem.Name + ".txt";
                    }

                    m_client.SaveLetterStatistics(filename, text);
                }
            }
        }
    }
    private void ValueInspectLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            InspectValueCalculations();
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void InspectValueCalculations()
    {
        if (m_client != null)
        {
            if (m_client.NumerologySystem != null)
            {
                string filename = DateTime.Now.ToString("yyyy-MM-dd_HH.mm.ss") + "_" + m_client.NumerologySystem.Name + ".txt";

                long value = 0;
                StringBuilder str = new StringBuilder();
                if (long.TryParse(ValueTextBox.Text, out value))
                {
                    str.AppendLine(m_current_text);
                    str.AppendLine("----------------------------------------");
                    str.AppendLine();
                    str.AppendLine("Verses\t\t=\t" + VersesTextBox.Text);
                    str.AppendLine("Words\t\t=\t" + WordsTextBox.Text);
                    str.AppendLine("Letters\t\t=\t" + LettersTextBox.Text);
                    str.AppendLine("Value\t\t=\t" + ValueTextBox.Text + ((m_radix == DEFAULT_RADIX) ? "" : " in base " + m_radix.ToString()));

                    str.AppendLine();
                    str.AppendLine("Prime Factors\t=\t" + Numbers.FactorizeToString(value));
                    int nth_number_index = 0;
                    int nth_additive_number_index = 0;
                    int nth_non_additive_number_index = 0;
                    if (Numbers.IsPrime(value))
                    {
                        m_index_type = IndexType.Prime;
                        nth_number_index = Numbers.PrimeIndexOf(value) + 1;
                        nth_additive_number_index = Numbers.AdditivePrimeIndexOf(value) + 1;
                        nth_non_additive_number_index = Numbers.NonAdditivePrimeIndexOf(value) + 1;
                        str.AppendLine("P  Index\t=\t" + ((nth_number_index > 0) ? nth_number_index.ToString() : ""));
                        str.AppendLine("AP Index\t=\t" + ((nth_additive_number_index > 0) ? nth_additive_number_index.ToString() : ""));
                        str.AppendLine("XP Index\t=\t" + ((nth_non_additive_number_index > 0) ? nth_non_additive_number_index.ToString() : ""));
                    }
                    else // any other index type will be treated as IndexNumberType.Composite
                    {
                        m_index_type = IndexType.Composite;
                        nth_number_index = Numbers.CompositeIndexOf(value) + 1;
                        nth_additive_number_index = Numbers.AdditiveCompositeIndexOf(value) + 1;
                        nth_non_additive_number_index = Numbers.NonAdditiveCompositeIndexOf(value) + 1;
                        str.AppendLine("C  Index\t=\t" + ((nth_number_index > 0) ? nth_number_index.ToString() : ""));
                        str.AppendLine("AC Index\t=\t" + ((nth_additive_number_index > 0) ? nth_additive_number_index.ToString() : ""));
                        str.AppendLine("XC Index\t=\t" + ((nth_non_additive_number_index > 0) ? nth_non_additive_number_index.ToString() : ""));
                    }

                    str.AppendLine();
                    string divisors = Numbers.GetDivisorsString(value);
                    long sum_of_divisors = Numbers.SumOfDivisors(value);
                    str.AppendLine("Sum Of Divisors\t\t=\t" + sum_of_divisors + " = " + divisors);

                    string proper_divisors = Numbers.GetProperDivisorsString(value);
                    long sum_of_proper_divisors = Numbers.SumOfProperDivisors(value);
                    str.AppendLine("Sum Of Proper Divisors\t=\t" + sum_of_proper_divisors + " = " + proper_divisors);

                    m_number_kind = Numbers.GetNumberKind(value);
                    int number_kind_index = 0;
                    switch (m_number_kind)
                    {
                        case NumberKind.Deficient:
                            {
                                number_kind_index = Numbers.DeficientIndexOf(value) + 1;
                            }
                            break;
                        case NumberKind.Perfect:
                            {
                                number_kind_index = Numbers.PerfectIndexOf(value) + 1;
                            }
                            break;
                        case NumberKind.Abundant:
                            {
                                number_kind_index = Numbers.AbundantIndexOf(value) + 1;
                            }
                            break;
                        default:
                            {
                                number_kind_index = 0;
                            }
                            break;
                    }
                    str.AppendLine(m_number_kind.ToString() + " Index\t\t=\t" + number_kind_index);

                    str.AppendLine();
                    string squares1_str = "";
                    string squares2_str = "";
                    if (Numbers.IsUnit(value) || Numbers.IsPrime(value))
                    {
                        squares1_str = Numbers.Get4nPlus1EqualsSumOfTwoSquares(value);
                        squares2_str = Numbers.Get4nPlus1EqualsDiffOfTwoSquares(value);
                    }
                    else //if composite
                    {
                        squares1_str = Numbers.Get4nPlus1EqualsDiffOfTwoSquares(value);
                        squares2_str = Numbers.Get4nPlus1EqualsDiffOfTwoSquares2(value);
                    }
                    str.AppendLine("4n+1 Squares1\t\t=\t" + squares1_str);
                    str.AppendLine("4n+1 Squares2\t\t=\t" + squares2_str);

                    str.AppendLine();
                    if (m_client.Book != null)
                    {
                        Verse verse = m_client.Book.GetVerseByVerseNumber((int)value);
                        if (verse != null)
                        {
                            str.AppendLine("VerseByVerseNumber\t=\t" + verse.Address);
                        }
                        else
                        {
                            str.AppendLine("VerseByVerseNumber\t=\t\"---:---\"");
                        }

                        verse = m_client.Book.GetVerseByWordNumber((int)value);
                        if (verse != null)
                        {
                            str.AppendLine("VerseByWordNumber\t=\t" + verse.Address);
                        }
                        else
                        {
                            str.AppendLine("VerseByWordNumber\t=\t\"---:---\"");
                        }

                        verse = m_client.Book.GetVerseByLetterNumber((int)value);
                        if (verse != null)
                        {
                            str.AppendLine("VerseByLetterNumber\t=\t" + verse.Address);
                        }
                        else
                        {
                            str.AppendLine("VerseByLetterNumber\t=\t\"---:---\"");
                        }
                    }

                    str.AppendLine();
                    str.AppendLine("Left-to-right prime/composite index chain | P=0 C=1\r\n" + GetPCIndexChainL2R(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryPCIndexChainL2R(value) + "  =  " + DecimalPCIndexChainL2R(value));
                    str.AppendLine();
                    str.AppendLine("Right-to-left prime/composite index chain | P=0 C=1\r\n" + GetPCIndexChainR2L(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryPCIndexChainR2L(value) + "  =  " + DecimalPCIndexChainR2L(value));
                    str.AppendLine();
                    str.AppendLine("Left-to-right composite/prime index chain | C=0 P=1\r\n" + GetCPIndexChainL2R(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryCPIndexChainL2R(value) + "  =  " + DecimalCPIndexChainL2R(value));
                    str.AppendLine();
                    str.AppendLine("Right-to-left composite/prime index chain | C=0 P=1\r\n" + GetCPIndexChainR2L(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryCPIndexChainR2L(value) + "  =  " + DecimalCPIndexChainR2L(value));
                    str.AppendLine("----------------------------------------");

                    str.AppendLine();
                    m_client.SaveValueCalculations(filename, str.ToString());
                }
            }
        }
    }

    private void StatisticsControls_Enter(object sender, EventArgs e)
    {
        SearchGroupBox_Leave(null, null);
        this.AcceptButton = null;
    }
    private void TextBoxLabelControls_CtrlClick(object sender, EventArgs e)
    {
        // Ctrl+Click factorizes number
        if (ModifierKeys == Keys.Control)
        {
            if (sender is Label)
            {
                FactorizeNumber(sender as Label);
            }
            else if (sender is TextBox)
            {
                FactorizeNumber(sender as TextBox);
            }
        }
    }
    private void PCIndexChainL2RTextBox_TextChanged(object sender, EventArgs e)
    {
        long value = 0;
        if (long.TryParse(ValueTextBox.Text, out value))
        {
            this.ToolTip.SetToolTip(this.PCIndexChainL2RTextBox, "Left-to-right prime/composite index chain | P=0 C=1\r\n" + GetPCIndexChainL2R(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryPCIndexChainL2R(value) + "  =  " + DecimalPCIndexChainL2R(value));
        }
    }
    private void PCIndexChainR2LTextBox_TextChanged(object sender, EventArgs e)
    {
        long value = 0;
        if (long.TryParse(ValueTextBox.Text, out value))
        {
            this.ToolTip.SetToolTip(this.PCIndexChainR2LTextBox, "Right-to-left prime/composite index chain | P=0 C=1\r\n" + GetPCIndexChainR2L(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryPCIndexChainR2L(value) + "  =  " + DecimalPCIndexChainR2L(value));
        }
    }
    private void CPIndexChainL2RTextBox_TextChanged(object sender, EventArgs e)
    {
        long value = 0;
        if (long.TryParse(ValueTextBox.Text, out value))
        {
            this.ToolTip.SetToolTip(this.CPIndexChainL2RTextBox, "Left-to-right composite/prime index chain | C=0 P=1\r\n" + GetCPIndexChainL2R(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryCPIndexChainL2R(value) + "  =  " + DecimalCPIndexChainL2R(value));
        }
    }
    private void CPIndexChainR2LTextBox_TextChanged(object sender, EventArgs e)
    {
        long value = 0;
        if (long.TryParse(ValueTextBox.Text, out value))
        {
            this.ToolTip.SetToolTip(this.CPIndexChainR2LTextBox, "Right-to-left composite/prime index chain | C=0 P=1\r\n" + GetCPIndexChainR2L(value) + "\r\n" + "Chain length = " + IndexChainLength(value) + "\t\t" + BinaryCPIndexChainR2L(value) + "  =  " + DecimalCPIndexChainR2L(value));
        }
    }
    private void IndexChainLengthTextBox_Click(object sender, EventArgs e)
    {
        if (ModifierKeys == Keys.Control)
        {
            TextBoxLabelControls_CtrlClick(sender, e);
        }
        else
        {
            this.Cursor = Cursors.WaitCursor;
            try
            {
                int length = 0;
                if (int.TryParse(IndexChainLengthTextBox.Text, out length))
                {
                    NumbersOfIndexChainLength(length);
                }
            }
            finally
            {
                this.Cursor = Cursors.Default;
            }
        }
    }
    private void FactorizeNumber(Label control)
    {
        if (control != null)
        {
            long value = 0L;
            try
            {
                string text = control.Text;
                if (!String.IsNullOrEmpty(text))
                {
                    value = Math.Abs((long)double.Parse(text));
                }

                FactorizeValue(value, "Number", false);
            }
            catch
            {
                //value = -1L; // error
            }
        }
    }
    private void FactorizeNumber(TextBox control)
    {
        if (control != null)
        {
            if (control != ValueTextBox)
            {
                long value = 0L;
                try
                {
                    string text = control.Text;
                    if (!String.IsNullOrEmpty(text))
                    {
                        if (control.Name.StartsWith("LetterFrequency"))
                        {
                            value = Math.Abs((long)double.Parse(text));
                        }
                        else if (control.Name.StartsWith("Decimal"))
                        {
                            value = Radix.Decode(text, 10L);
                        }
                        else if (text.StartsWith(SUM_SYMBOL))
                        {
                            text = text.Substring(SUM_SYMBOL.Length, text.Length - SUM_SYMBOL.Length);
                            value = Radix.Decode(text, 10L);
                        }
                        else if (text.StartsWith("4×")) // 4n+1
                        {
                            int start = "4×".Length;
                            int end = text.IndexOf("+");
                            text = text.Substring(start, end - start);
                            value = Radix.Decode(text, 10L);
                        }
                        else
                        {
                            value = Radix.Decode(text, m_radix);
                        }
                    }

                    FactorizeValue(value, "Number", false);
                }
                catch
                {
                    //value = -1L; // error
                }
            }
        }
    }
    private void StatusControls_Enter(object sender, EventArgs e)
    {
        SearchGroupBox_Leave(null, null);
        this.AcceptButton = null;
    }
    private void Control_MouseHover(object sender, EventArgs e)
    {
        Control control = sender as Control;
        if (control != null)
        {
            try
            {
                string text = control.Text;
                if (!String.IsNullOrEmpty(text))
                {
                    if (text.StartsWith(SUM_SYMBOL))
                    {
                        text = text.Substring(1);
                    }
                    long number = (long)double.Parse(text);
                    string factors_str = Numbers.FactorizeToString(number);
                    ToolTip.SetToolTip(control, factors_str);
                }
            }
            catch
            {
                ToolTip.SetToolTip(control, null);
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
    #region Help
    ///////////////////////////////////////////////////////////////////////////////
    private int m_help_message_index = 0;
    private void HelpMessageLabel_Click(object sender, EventArgs e)
    {
        if (m_client != null)
        {
            if (m_client.HelpMessages != null)
            {
                int maximum = m_client.HelpMessages.Count - 1;
                if (ModifierKeys == Keys.Shift)
                {
                    m_help_message_index--;
                    if (m_help_message_index < 0) m_help_message_index = maximum;
                }
                else
                {
                    m_help_message_index++;
                    if (m_help_message_index > maximum) m_help_message_index = 0;
                }

                if (m_client.HelpMessages.Count > m_help_message_index)
                {
                    HelpMessageLabel.Text = m_client.HelpMessages[m_help_message_index];
                }
            }
        }
    }
    private void LinkLabel_Click(object sender, EventArgs e)
    {
        if (Directory.Exists(Globals.HELP_FOLDER))
        {
            System.Diagnostics.Process.Start(Globals.HELP_FOLDER);
        }

        this.Cursor = Cursors.WaitCursor;
        try
        {
            Control control = (sender as Control);
            if (control != null)
            {
                if (control.Tag != null)
                {
                    if (!String.IsNullOrEmpty(control.Tag.ToString()))
                    {
                        try
                        {
                            System.Diagnostics.Process.Start(control.Tag.ToString());
                        }
                        catch (Exception ex)
                        {
                            while (ex != null)
                            {
                                //Console.WriteLine(ex.Message);
                                MessageBox.Show(ex.Message, Application.ProductName);
                                ex = ex.InnerException;
                            }
                        }
                    }
                }
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void BrowseGroupBox_Click(object sender, EventArgs e)
    {
        string path = Globals.HELP_FOLDER + "/" + "QuickInfo.txt";
        if (File.Exists(path))
        {
            FileHelper.DisplayFile(path);
        }
    }
    private void StatisticsGroupBox_Click(object sender, EventArgs e)
    {
        string path = Globals.HELP_FOLDER + "/" + "114.txt";
        if (File.Exists(path))
        {
            FileHelper.DisplayFile(path);
        }
    }
    private void PrimalogyLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            string filename = "Primalogy.pdf";
            string path = Application.StartupPath + "/" + Globals.HELP_FOLDER + "/" + filename;
            if (!File.Exists(path))
            {
                DownloadFile("http://heliwave.com/" + filename, path);
            }
            if (File.Exists(path))
            {
                FileHelper.WaitForReady(path);

                System.Diagnostics.Process.Start(path);
            }
        }
        catch (Exception ex)
        {
            while (ex != null)
            {
                //Console.WriteLine(ex.Message);
                MessageBox.Show(ex.Message, Application.ProductName);
                ex = ex.InnerException;
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void PrimalogyARLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            string filename = "Primalogy_AR.pdf";
            string path = Application.StartupPath + "/" + Globals.HELP_FOLDER + "/" + filename;
            if (!File.Exists(path))
            {
                DownloadFile("http://heliwave.com/" + filename, path);
            }
            if (File.Exists(path))
            {
                FileHelper.WaitForReady(path);

                System.Diagnostics.Process.Start(path);
            }
        }
        catch (Exception ex)
        {
            while (ex != null)
            {
                //Console.WriteLine(ex.Message);
                MessageBox.Show(ex.Message, Application.ProductName);
                ex = ex.InnerException;
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private void EncryptedQuranLinkLabel_Click(object sender, EventArgs e)
    {
        this.Cursor = Cursors.WaitCursor;
        try
        {
            //string filename = "EncryptedQuran.pdf";
            //string path = Application.StartupPath + "/" + Globals.HELP_FOLDER + "/" + filename;
            //if (!File.Exists(path))
            //{
            //    DownloadFile("http://heliwave.com/" + filename, path);
            //}
            //if (File.Exists(path))
            //{
            //    FileHelper.WaitForReady(path);

            //    System.Diagnostics.Process.Start(path);
            //}

            if (Directory.Exists(Globals.HELP_FOLDER))
            {
                System.Diagnostics.Process.Start(Globals.HELP_FOLDER);
            }
        }
        catch (Exception ex)
        {
            while (ex != null)
            {
                //Console.WriteLine(ex.Message);
                MessageBox.Show(ex.Message, Application.ProductName);
                ex = ex.InnerException;
            }
        }
        finally
        {
            this.Cursor = Cursors.Default;
        }
    }
    private AboutBox m_about_box = null;
    private void VersionLabel_Click(object sender, EventArgs e)
    {
        if (m_about_box == null)
        {
            m_about_box = new AboutBox();
        }
        if (m_about_box != null)
        {
            if (!m_about_box.Visible)
            {
                m_about_box.ShowDialog();
            }
        }
    }
    ///////////////////////////////////////////////////////////////////////////////
    #endregion
}
